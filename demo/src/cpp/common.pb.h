// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.proto

#ifndef PROTOBUF_common_2eproto__INCLUDED
#define PROTOBUF_common_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/map.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace dg {
namespace model {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_common_2eproto();
void protobuf_AssignDesc_common_2eproto();
void protobuf_ShutdownFile_common_2eproto();

class Attribute;
class CategoryAndFeature;
class Color;
class Cutboard;
class CutboardImage;
class FaceAlignResult;
class FaceAttribute;
class FeatureVector;
class Image;
class NameAndConfidence;
class NullMessage;
class PingRequest;
class PingResponse;
class PointF;
class RecFace;
class Rect;
class RotatedRect;
class SrcMetadata;
class StorageConfig;

enum ObjType {
  OBJ_TYPE_UNKNOWN = 0,
  OBJ_TYPE_FACE = 1024,
  OBJ_TYPE_FACE_VECTOR = 3072,
  OBJ_TYPE_FACE_CUTBOARD = 5120,
  ObjType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ObjType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ObjType_IsValid(int value);
const ObjType ObjType_MIN = OBJ_TYPE_UNKNOWN;
const ObjType ObjType_MAX = OBJ_TYPE_FACE_CUTBOARD;
const int ObjType_ARRAYSIZE = ObjType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ObjType_descriptor();
inline const ::std::string& ObjType_Name(ObjType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ObjType_descriptor(), value);
}
inline bool ObjType_Parse(
    const ::std::string& name, ObjType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ObjType>(
    ObjType_descriptor(), name, value);
}
enum DataFmtType {
  UNKNOWNFMT = 0,
  JSON = 1,
  PROTOBUF = 2,
  CSV = 3,
  PDF = 4,
  DataFmtType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  DataFmtType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool DataFmtType_IsValid(int value);
const DataFmtType DataFmtType_MIN = UNKNOWNFMT;
const DataFmtType DataFmtType_MAX = PDF;
const int DataFmtType_ARRAYSIZE = DataFmtType_MAX + 1;

const ::google::protobuf::EnumDescriptor* DataFmtType_descriptor();
inline const ::std::string& DataFmtType_Name(DataFmtType value) {
  return ::google::protobuf::internal::NameOfEnum(
    DataFmtType_descriptor(), value);
}
inline bool DataFmtType_Parse(
    const ::std::string& name, DataFmtType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DataFmtType>(
    DataFmtType_descriptor(), name, value);
}
enum ThreeStatus {
  THREE_STATUS_FALSE = 0,
  THREE_STATUS_TRUE = 1,
  THREE_STATUS_UNKNOWN = -1,
  ThreeStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ThreeStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ThreeStatus_IsValid(int value);
const ThreeStatus ThreeStatus_MIN = THREE_STATUS_UNKNOWN;
const ThreeStatus ThreeStatus_MAX = THREE_STATUS_TRUE;
const int ThreeStatus_ARRAYSIZE = ThreeStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* ThreeStatus_descriptor();
inline const ::std::string& ThreeStatus_Name(ThreeStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    ThreeStatus_descriptor(), value);
}
inline bool ThreeStatus_Parse(
    const ::std::string& name, ThreeStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ThreeStatus>(
    ThreeStatus_descriptor(), name, value);
}
enum DBType {
  KAFKA = 0,
  POSTGRES = 1,
  FILEIMAGE = 2,
  DBType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  DBType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool DBType_IsValid(int value);
const DBType DBType_MIN = KAFKA;
const DBType DBType_MAX = FILEIMAGE;
const int DBType_ARRAYSIZE = DBType_MAX + 1;

const ::google::protobuf::EnumDescriptor* DBType_descriptor();
inline const ::std::string& DBType_Name(DBType value) {
  return ::google::protobuf::internal::NameOfEnum(
    DBType_descriptor(), value);
}
inline bool DBType_Parse(
    const ::std::string& name, DBType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DBType>(
    DBType_descriptor(), name, value);
}
// ===================================================================

class SrcMetadata : public ::google::protobuf::Message {
 public:
  SrcMetadata();
  virtual ~SrcMetadata();

  SrcMetadata(const SrcMetadata& from);

  inline SrcMetadata& operator=(const SrcMetadata& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SrcMetadata& default_instance();

  void Swap(SrcMetadata* other);

  // implements Message ----------------------------------------------

  inline SrcMetadata* New() const { return New(NULL); }

  SrcMetadata* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SrcMetadata& from);
  void MergeFrom(const SrcMetadata& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SrcMetadata* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 Timestamp = 1;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // optional int32 Duration = 2;
  void clear_duration();
  static const int kDurationFieldNumber = 2;
  ::google::protobuf::int32 duration() const;
  void set_duration(::google::protobuf::int32 value);

  // optional int32 SensorId = 3;
  void clear_sensorid();
  static const int kSensorIdFieldNumber = 3;
  ::google::protobuf::int32 sensorid() const;
  void set_sensorid(::google::protobuf::int32 value);

  // optional string SensorName = 4;
  void clear_sensorname();
  static const int kSensorNameFieldNumber = 4;
  const ::std::string& sensorname() const;
  void set_sensorname(const ::std::string& value);
  void set_sensorname(const char* value);
  void set_sensorname(const char* value, size_t size);
  ::std::string* mutable_sensorname();
  ::std::string* release_sensorname();
  void set_allocated_sensorname(::std::string* sensorname);

  // optional string SensorUrl = 5;
  void clear_sensorurl();
  static const int kSensorUrlFieldNumber = 5;
  const ::std::string& sensorurl() const;
  void set_sensorurl(const ::std::string& value);
  void set_sensorurl(const char* value);
  void set_sensorurl(const char* value, size_t size);
  ::std::string* mutable_sensorurl();
  ::std::string* release_sensorurl();
  void set_allocated_sensorurl(::std::string* sensorurl);

  // optional int32 RepoId = 6;
  void clear_repoid();
  static const int kRepoIdFieldNumber = 6;
  ::google::protobuf::int32 repoid() const;
  void set_repoid(::google::protobuf::int32 value);

  // optional string RepoInfo = 7;
  void clear_repoinfo();
  static const int kRepoInfoFieldNumber = 7;
  const ::std::string& repoinfo() const;
  void set_repoinfo(const ::std::string& value);
  void set_repoinfo(const char* value);
  void set_repoinfo(const char* value, size_t size);
  ::std::string* mutable_repoinfo();
  ::std::string* release_repoinfo();
  void set_allocated_repoinfo(::std::string* repoinfo);

  // optional .dg.model.ObjType ObjType = 8;
  void clear_objtype();
  static const int kObjTypeFieldNumber = 8;
  ::dg::model::ObjType objtype() const;
  void set_objtype(::dg::model::ObjType value);

  // optional string SensorIdStr = 9;
  void clear_sensoridstr();
  static const int kSensorIdStrFieldNumber = 9;
  const ::std::string& sensoridstr() const;
  void set_sensoridstr(const ::std::string& value);
  void set_sensoridstr(const char* value);
  void set_sensoridstr(const char* value, size_t size);
  ::std::string* mutable_sensoridstr();
  ::std::string* release_sensoridstr();
  void set_allocated_sensoridstr(::std::string* sensoridstr);

  // @@protoc_insertion_point(class_scope:dg.model.SrcMetadata)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 timestamp_;
  ::google::protobuf::int32 duration_;
  ::google::protobuf::int32 sensorid_;
  ::google::protobuf::internal::ArenaStringPtr sensorname_;
  ::google::protobuf::internal::ArenaStringPtr sensorurl_;
  ::google::protobuf::internal::ArenaStringPtr repoinfo_;
  ::google::protobuf::int32 repoid_;
  int objtype_;
  ::google::protobuf::internal::ArenaStringPtr sensoridstr_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static SrcMetadata* default_instance_;
};
// -------------------------------------------------------------------

class PingRequest : public ::google::protobuf::Message {
 public:
  PingRequest();
  virtual ~PingRequest();

  PingRequest(const PingRequest& from);

  inline PingRequest& operator=(const PingRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PingRequest& default_instance();

  void Swap(PingRequest* other);

  // implements Message ----------------------------------------------

  inline PingRequest* New() const { return New(NULL); }

  PingRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PingRequest& from);
  void MergeFrom(const PingRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PingRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:dg.model.PingRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static PingRequest* default_instance_;
};
// -------------------------------------------------------------------

class PingResponse : public ::google::protobuf::Message {
 public:
  PingResponse();
  virtual ~PingResponse();

  PingResponse(const PingResponse& from);

  inline PingResponse& operator=(const PingResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PingResponse& default_instance();

  void Swap(PingResponse* other);

  // implements Message ----------------------------------------------

  inline PingResponse* New() const { return New(NULL); }

  PingResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PingResponse& from);
  void MergeFrom(const PingResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PingResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Message = 1;
  void clear_message();
  static const int kMessageFieldNumber = 1;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // @@protoc_insertion_point(class_scope:dg.model.PingResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static PingResponse* default_instance_;
};
// -------------------------------------------------------------------

class Cutboard : public ::google::protobuf::Message {
 public:
  Cutboard();
  virtual ~Cutboard();

  Cutboard(const Cutboard& from);

  inline Cutboard& operator=(const Cutboard& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Cutboard& default_instance();

  void Swap(Cutboard* other);

  // implements Message ----------------------------------------------

  inline Cutboard* New() const { return New(NULL); }

  Cutboard* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Cutboard& from);
  void MergeFrom(const Cutboard& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Cutboard* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 X = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  ::google::protobuf::int32 x() const;
  void set_x(::google::protobuf::int32 value);

  // optional int32 Y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  ::google::protobuf::int32 y() const;
  void set_y(::google::protobuf::int32 value);

  // optional int32 Width = 3;
  void clear_width();
  static const int kWidthFieldNumber = 3;
  ::google::protobuf::int32 width() const;
  void set_width(::google::protobuf::int32 value);

  // optional int32 Height = 4;
  void clear_height();
  static const int kHeightFieldNumber = 4;
  ::google::protobuf::int32 height() const;
  void set_height(::google::protobuf::int32 value);

  // optional int32 ResWidth = 5;
  void clear_reswidth();
  static const int kResWidthFieldNumber = 5;
  ::google::protobuf::int32 reswidth() const;
  void set_reswidth(::google::protobuf::int32 value);

  // optional int32 ResHeight = 6;
  void clear_resheight();
  static const int kResHeightFieldNumber = 6;
  ::google::protobuf::int32 resheight() const;
  void set_resheight(::google::protobuf::int32 value);

  // optional float Confidence = 7;
  void clear_confidence();
  static const int kConfidenceFieldNumber = 7;
  float confidence() const;
  void set_confidence(float value);

  // @@protoc_insertion_point(class_scope:dg.model.Cutboard)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;
  ::google::protobuf::int32 width_;
  ::google::protobuf::int32 height_;
  ::google::protobuf::int32 reswidth_;
  ::google::protobuf::int32 resheight_;
  float confidence_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static Cutboard* default_instance_;
};
// -------------------------------------------------------------------

class PointF : public ::google::protobuf::Message {
 public:
  PointF();
  virtual ~PointF();

  PointF(const PointF& from);

  inline PointF& operator=(const PointF& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PointF& default_instance();

  void Swap(PointF* other);

  // implements Message ----------------------------------------------

  inline PointF* New() const { return New(NULL); }

  PointF* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PointF& from);
  void MergeFrom(const PointF& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PointF* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float X = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  float x() const;
  void set_x(float value);

  // optional float Y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  float y() const;
  void set_y(float value);

  // @@protoc_insertion_point(class_scope:dg.model.PointF)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  float x_;
  float y_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static PointF* default_instance_;
};
// -------------------------------------------------------------------

class Rect : public ::google::protobuf::Message {
 public:
  Rect();
  virtual ~Rect();

  Rect(const Rect& from);

  inline Rect& operator=(const Rect& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Rect& default_instance();

  void Swap(Rect* other);

  // implements Message ----------------------------------------------

  inline Rect* New() const { return New(NULL); }

  Rect* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Rect& from);
  void MergeFrom(const Rect& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Rect* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 X = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  ::google::protobuf::int32 x() const;
  void set_x(::google::protobuf::int32 value);

  // optional int32 Y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  ::google::protobuf::int32 y() const;
  void set_y(::google::protobuf::int32 value);

  // optional int32 Width = 3;
  void clear_width();
  static const int kWidthFieldNumber = 3;
  ::google::protobuf::int32 width() const;
  void set_width(::google::protobuf::int32 value);

  // optional int32 Height = 4;
  void clear_height();
  static const int kHeightFieldNumber = 4;
  ::google::protobuf::int32 height() const;
  void set_height(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:dg.model.Rect)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;
  ::google::protobuf::int32 width_;
  ::google::protobuf::int32 height_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static Rect* default_instance_;
};
// -------------------------------------------------------------------

class RotatedRect : public ::google::protobuf::Message {
 public:
  RotatedRect();
  virtual ~RotatedRect();

  RotatedRect(const RotatedRect& from);

  inline RotatedRect& operator=(const RotatedRect& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RotatedRect& default_instance();

  void Swap(RotatedRect* other);

  // implements Message ----------------------------------------------

  inline RotatedRect* New() const { return New(NULL); }

  RotatedRect* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RotatedRect& from);
  void MergeFrom(const RotatedRect& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RotatedRect* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float CenterX = 1;
  void clear_centerx();
  static const int kCenterXFieldNumber = 1;
  float centerx() const;
  void set_centerx(float value);

  // optional float CenterY = 2;
  void clear_centery();
  static const int kCenterYFieldNumber = 2;
  float centery() const;
  void set_centery(float value);

  // optional float Width = 3;
  void clear_width();
  static const int kWidthFieldNumber = 3;
  float width() const;
  void set_width(float value);

  // optional float Height = 4;
  void clear_height();
  static const int kHeightFieldNumber = 4;
  float height() const;
  void set_height(float value);

  // optional float Angle = 5;
  void clear_angle();
  static const int kAngleFieldNumber = 5;
  float angle() const;
  void set_angle(float value);

  // @@protoc_insertion_point(class_scope:dg.model.RotatedRect)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  float centerx_;
  float centery_;
  float width_;
  float height_;
  float angle_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static RotatedRect* default_instance_;
};
// -------------------------------------------------------------------

class CutboardImage : public ::google::protobuf::Message {
 public:
  CutboardImage();
  virtual ~CutboardImage();

  CutboardImage(const CutboardImage& from);

  inline CutboardImage& operator=(const CutboardImage& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CutboardImage& default_instance();

  void Swap(CutboardImage* other);

  // implements Message ----------------------------------------------

  inline CutboardImage* New() const { return New(NULL); }

  CutboardImage* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CutboardImage& from);
  void MergeFrom(const CutboardImage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CutboardImage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .dg.model.Cutboard Cutboard = 1;
  bool has_cutboard() const;
  void clear_cutboard();
  static const int kCutboardFieldNumber = 1;
  const ::dg::model::Cutboard& cutboard() const;
  ::dg::model::Cutboard* mutable_cutboard();
  ::dg::model::Cutboard* release_cutboard();
  void set_allocated_cutboard(::dg::model::Cutboard* cutboard);

  // optional .dg.model.Image Img = 2;
  bool has_img() const;
  void clear_img();
  static const int kImgFieldNumber = 2;
  const ::dg::model::Image& img() const;
  ::dg::model::Image* mutable_img();
  ::dg::model::Image* release_img();
  void set_allocated_img(::dg::model::Image* img);

  // optional .dg.model.RotatedRect Rect = 3;
  bool has_rect() const;
  void clear_rect();
  static const int kRectFieldNumber = 3;
  const ::dg::model::RotatedRect& rect() const;
  ::dg::model::RotatedRect* mutable_rect();
  ::dg::model::RotatedRect* release_rect();
  void set_allocated_rect(::dg::model::RotatedRect* rect);

  // @@protoc_insertion_point(class_scope:dg.model.CutboardImage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::dg::model::Cutboard* cutboard_;
  ::dg::model::Image* img_;
  ::dg::model::RotatedRect* rect_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static CutboardImage* default_instance_;
};
// -------------------------------------------------------------------

class Color : public ::google::protobuf::Message {
 public:
  Color();
  virtual ~Color();

  Color(const Color& from);

  inline Color& operator=(const Color& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Color& default_instance();

  void Swap(Color* other);

  // implements Message ----------------------------------------------

  inline Color* New() const { return New(NULL); }

  Color* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Color& from);
  void MergeFrom(const Color& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Color* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ColorId = 1;
  void clear_colorid();
  static const int kColorIdFieldNumber = 1;
  ::google::protobuf::int32 colorid() const;
  void set_colorid(::google::protobuf::int32 value);

  // optional float Confidence = 2;
  void clear_confidence();
  static const int kConfidenceFieldNumber = 2;
  float confidence() const;
  void set_confidence(float value);

  // optional string ColorName = 3;
  void clear_colorname();
  static const int kColorNameFieldNumber = 3;
  const ::std::string& colorname() const;
  void set_colorname(const ::std::string& value);
  void set_colorname(const char* value);
  void set_colorname(const char* value, size_t size);
  ::std::string* mutable_colorname();
  ::std::string* release_colorname();
  void set_allocated_colorname(::std::string* colorname);

  // @@protoc_insertion_point(class_scope:dg.model.Color)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int32 colorid_;
  float confidence_;
  ::google::protobuf::internal::ArenaStringPtr colorname_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static Color* default_instance_;
};
// -------------------------------------------------------------------

class FeatureVector : public ::google::protobuf::Message {
 public:
  FeatureVector();
  virtual ~FeatureVector();

  FeatureVector(const FeatureVector& from);

  inline FeatureVector& operator=(const FeatureVector& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FeatureVector& default_instance();

  void Swap(FeatureVector* other);

  // implements Message ----------------------------------------------

  inline FeatureVector* New() const { return New(NULL); }

  FeatureVector* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FeatureVector& from);
  void MergeFrom(const FeatureVector& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FeatureVector* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 Id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int64 id() const;
  void set_id(::google::protobuf::int64 value);

  // optional string Feature = 2;
  void clear_feature();
  static const int kFeatureFieldNumber = 2;
  const ::std::string& feature() const;
  void set_feature(const ::std::string& value);
  void set_feature(const char* value);
  void set_feature(const char* value, size_t size);
  ::std::string* mutable_feature();
  ::std::string* release_feature();
  void set_allocated_feature(::std::string* feature);

  // @@protoc_insertion_point(class_scope:dg.model.FeatureVector)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 id_;
  ::google::protobuf::internal::ArenaStringPtr feature_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static FeatureVector* default_instance_;
};
// -------------------------------------------------------------------

class NullMessage : public ::google::protobuf::Message {
 public:
  NullMessage();
  virtual ~NullMessage();

  NullMessage(const NullMessage& from);

  inline NullMessage& operator=(const NullMessage& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NullMessage& default_instance();

  void Swap(NullMessage* other);

  // implements Message ----------------------------------------------

  inline NullMessage* New() const { return New(NULL); }

  NullMessage* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NullMessage& from);
  void MergeFrom(const NullMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NullMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:dg.model.NullMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static NullMessage* default_instance_;
};
// -------------------------------------------------------------------

class Attribute : public ::google::protobuf::Message {
 public:
  Attribute();
  virtual ~Attribute();

  Attribute(const Attribute& from);

  inline Attribute& operator=(const Attribute& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Attribute& default_instance();

  void Swap(Attribute* other);

  // implements Message ----------------------------------------------

  inline Attribute* New() const { return New(NULL); }

  Attribute* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Attribute& from);
  void MergeFrom(const Attribute& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Attribute* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 AttributeId = 1;
  void clear_attributeid();
  static const int kAttributeIdFieldNumber = 1;
  ::google::protobuf::int32 attributeid() const;
  void set_attributeid(::google::protobuf::int32 value);

  // optional string AttributeName = 2;
  void clear_attributename();
  static const int kAttributeNameFieldNumber = 2;
  const ::std::string& attributename() const;
  void set_attributename(const ::std::string& value);
  void set_attributename(const char* value);
  void set_attributename(const char* value, size_t size);
  ::std::string* mutable_attributename();
  ::std::string* release_attributename();
  void set_allocated_attributename(::std::string* attributename);

  // optional int32 ValueId = 3;
  void clear_valueid();
  static const int kValueIdFieldNumber = 3;
  ::google::protobuf::int32 valueid() const;
  void set_valueid(::google::protobuf::int32 value);

  // optional string ValueString = 4;
  void clear_valuestring();
  static const int kValueStringFieldNumber = 4;
  const ::std::string& valuestring() const;
  void set_valuestring(const ::std::string& value);
  void set_valuestring(const char* value);
  void set_valuestring(const char* value, size_t size);
  ::std::string* mutable_valuestring();
  ::std::string* release_valuestring();
  void set_allocated_valuestring(::std::string* valuestring);

  // optional float Confidence = 5;
  void clear_confidence();
  static const int kConfidenceFieldNumber = 5;
  float confidence() const;
  void set_confidence(float value);

  // @@protoc_insertion_point(class_scope:dg.model.Attribute)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr attributename_;
  ::google::protobuf::int32 attributeid_;
  ::google::protobuf::int32 valueid_;
  ::google::protobuf::internal::ArenaStringPtr valuestring_;
  float confidence_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static Attribute* default_instance_;
};
// -------------------------------------------------------------------

class FaceAttribute : public ::google::protobuf::Message {
 public:
  FaceAttribute();
  virtual ~FaceAttribute();

  FaceAttribute(const FaceAttribute& from);

  inline FaceAttribute& operator=(const FaceAttribute& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FaceAttribute& default_instance();

  enum ValueCase {
    kValueBool = 9,
    kValueInt = 10,
    kValueFloat = 11,
    kValueString = 12,
    VALUE_NOT_SET = 0,
  };

  void Swap(FaceAttribute* other);

  // implements Message ----------------------------------------------

  inline FaceAttribute* New() const { return New(NULL); }

  FaceAttribute* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FaceAttribute& from);
  void MergeFrom(const FaceAttribute& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FaceAttribute* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 AttributeId = 1;
  void clear_attributeid();
  static const int kAttributeIdFieldNumber = 1;
  ::google::protobuf::int32 attributeid() const;
  void set_attributeid(::google::protobuf::int32 value);

  // optional string Name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional int32 ValueId = 3;
  void clear_valueid();
  static const int kValueIdFieldNumber = 3;
  ::google::protobuf::int32 valueid() const;
  void set_valueid(::google::protobuf::int32 value);

  // optional float Confidence = 4;
  void clear_confidence();
  static const int kConfidenceFieldNumber = 4;
  float confidence() const;
  void set_confidence(float value);

  // optional bool ValueBool = 9;
  private:
  bool has_valuebool() const;
  public:
  void clear_valuebool();
  static const int kValueBoolFieldNumber = 9;
  bool valuebool() const;
  void set_valuebool(bool value);

  // optional int32 ValueInt = 10;
  private:
  bool has_valueint() const;
  public:
  void clear_valueint();
  static const int kValueIntFieldNumber = 10;
  ::google::protobuf::int32 valueint() const;
  void set_valueint(::google::protobuf::int32 value);

  // optional float ValueFloat = 11;
  private:
  bool has_valuefloat() const;
  public:
  void clear_valuefloat();
  static const int kValueFloatFieldNumber = 11;
  float valuefloat() const;
  void set_valuefloat(float value);

  // optional string ValueString = 12;
  private:
  bool has_valuestring() const;
  public:
  void clear_valuestring();
  static const int kValueStringFieldNumber = 12;
  const ::std::string& valuestring() const;
  void set_valuestring(const ::std::string& value);
  void set_valuestring(const char* value);
  void set_valuestring(const char* value, size_t size);
  ::std::string* mutable_valuestring();
  ::std::string* release_valuestring();
  void set_allocated_valuestring(::std::string* valuestring);

  ValueCase Value_case() const;
  // @@protoc_insertion_point(class_scope:dg.model.FaceAttribute)
 private:
  inline void set_has_valuebool();
  inline void set_has_valueint();
  inline void set_has_valuefloat();
  inline void set_has_valuestring();

  inline bool has_Value() const;
  void clear_Value();
  inline void clear_has_Value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::int32 attributeid_;
  ::google::protobuf::int32 valueid_;
  float confidence_;
  union ValueUnion {
    ValueUnion() {}
    bool valuebool_;
    ::google::protobuf::int32 valueint_;
    float valuefloat_;
    ::google::protobuf::internal::ArenaStringPtr valuestring_;
  } Value_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static FaceAttribute* default_instance_;
};
// -------------------------------------------------------------------

class Image : public ::google::protobuf::Message {
 public:
  Image();
  virtual ~Image();

  Image(const Image& from);

  inline Image& operator=(const Image& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Image& default_instance();

  void Swap(Image* other);

  // implements Message ----------------------------------------------

  inline Image* New() const { return New(NULL); }

  Image* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Image& from);
  void MergeFrom(const Image& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Image* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // optional int32 Width = 2;
  void clear_width();
  static const int kWidthFieldNumber = 2;
  ::google::protobuf::int32 width() const;
  void set_width(::google::protobuf::int32 value);

  // optional int32 Height = 3;
  void clear_height();
  static const int kHeightFieldNumber = 3;
  ::google::protobuf::int32 height() const;
  void set_height(::google::protobuf::int32 value);

  // optional string URI = 4;
  void clear_uri();
  static const int kURIFieldNumber = 4;
  const ::std::string& uri() const;
  void set_uri(const ::std::string& value);
  void set_uri(const char* value);
  void set_uri(const char* value, size_t size);
  ::std::string* mutable_uri();
  ::std::string* release_uri();
  void set_allocated_uri(::std::string* uri);

  // optional string BinData = 5;
  void clear_bindata();
  static const int kBinDataFieldNumber = 5;
  const ::std::string& bindata() const;
  void set_bindata(const ::std::string& value);
  void set_bindata(const char* value);
  void set_bindata(const char* value, size_t size);
  ::std::string* mutable_bindata();
  ::std::string* release_bindata();
  void set_allocated_bindata(::std::string* bindata);

  // @@protoc_insertion_point(class_scope:dg.model.Image)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::int32 width_;
  ::google::protobuf::int32 height_;
  ::google::protobuf::internal::ArenaStringPtr uri_;
  ::google::protobuf::internal::ArenaStringPtr bindata_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static Image* default_instance_;
};
// -------------------------------------------------------------------

class FaceAlignResult : public ::google::protobuf::Message {
 public:
  FaceAlignResult();
  virtual ~FaceAlignResult();

  FaceAlignResult(const FaceAlignResult& from);

  inline FaceAlignResult& operator=(const FaceAlignResult& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FaceAlignResult& default_instance();

  void Swap(FaceAlignResult* other);

  // implements Message ----------------------------------------------

  inline FaceAlignResult* New() const { return New(NULL); }

  FaceAlignResult* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FaceAlignResult& from);
  void MergeFrom(const FaceAlignResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FaceAlignResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // repeated .dg.model.PointF LandMarks = 1;
  int landmarks_size() const;
  void clear_landmarks();
  static const int kLandMarksFieldNumber = 1;
  const ::dg::model::PointF& landmarks(int index) const;
  ::dg::model::PointF* mutable_landmarks(int index);
  ::dg::model::PointF* add_landmarks();
  ::google::protobuf::RepeatedPtrField< ::dg::model::PointF >*
      mutable_landmarks();
  const ::google::protobuf::RepeatedPtrField< ::dg::model::PointF >&
      landmarks() const;

  // repeated float LandMarkScores = 2;
  int landmarkscores_size() const;
  void clear_landmarkscores();
  static const int kLandMarkScoresFieldNumber = 2;
  float landmarkscores(int index) const;
  void set_landmarkscores(int index, float value);
  void add_landmarkscores(float value);
  const ::google::protobuf::RepeatedField< float >&
      landmarkscores() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_landmarkscores();

  // optional .dg.model.Rect Box = 3;
  bool has_box() const;
  void clear_box();
  static const int kBoxFieldNumber = 3;
  const ::dg::model::Rect& box() const;
  ::dg::model::Rect* mutable_box();
  ::dg::model::Rect* release_box();
  void set_allocated_box(::dg::model::Rect* box);

  // map<string, float> Scores = 4;
  int scores_size() const;
  void clear_scores();
  static const int kScoresFieldNumber = 4;
  const ::google::protobuf::Map< ::std::string, float >&
      scores() const;
  ::google::protobuf::Map< ::std::string, float >*
      mutable_scores();

  // @@protoc_insertion_point(class_scope:dg.model.FaceAlignResult)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::dg::model::PointF > landmarks_;
  ::google::protobuf::RepeatedField< float > landmarkscores_;
  mutable int _landmarkscores_cached_byte_size_;
  ::dg::model::Rect* box_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::std::string, float,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT,
      0 >
      FaceAlignResult_ScoresEntry;
  ::google::protobuf::internal::MapField<
      ::std::string, float,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT,
      0 > scores_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static FaceAlignResult* default_instance_;
};
// -------------------------------------------------------------------

class RecFace : public ::google::protobuf::Message {
 public:
  RecFace();
  virtual ~RecFace();

  RecFace(const RecFace& from);

  inline RecFace& operator=(const RecFace& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RecFace& default_instance();

  void Swap(RecFace* other);

  // implements Message ----------------------------------------------

  inline RecFace* New() const { return New(NULL); }

  RecFace* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RecFace& from);
  void MergeFrom(const RecFace& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RecFace* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // optional int64 Id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int64 id() const;
  void set_id(::google::protobuf::int64 value);

  // optional float Confidence = 2;
  void clear_confidence();
  static const int kConfidenceFieldNumber = 2;
  float confidence() const;
  void set_confidence(float value);

  // optional .dg.model.CutboardImage Img = 3;
  bool has_img() const;
  void clear_img();
  static const int kImgFieldNumber = 3;
  const ::dg::model::CutboardImage& img() const;
  ::dg::model::CutboardImage* mutable_img();
  ::dg::model::CutboardImage* release_img();
  void set_allocated_img(::dg::model::CutboardImage* img);

  // optional .dg.model.FaceAlignResult AlignResult = 4;
  bool has_alignresult() const;
  void clear_alignresult();
  static const int kAlignResultFieldNumber = 4;
  const ::dg::model::FaceAlignResult& alignresult() const;
  ::dg::model::FaceAlignResult* mutable_alignresult();
  ::dg::model::FaceAlignResult* release_alignresult();
  void set_allocated_alignresult(::dg::model::FaceAlignResult* alignresult);

  // map<string, float> Qualities = 5;
  int qualities_size() const;
  void clear_qualities();
  static const int kQualitiesFieldNumber = 5;
  const ::google::protobuf::Map< ::std::string, float >&
      qualities() const;
  ::google::protobuf::Map< ::std::string, float >*
      mutable_qualities();

  // optional string Features = 6;
  void clear_features();
  static const int kFeaturesFieldNumber = 6;
  const ::std::string& features() const;
  void set_features(const ::std::string& value);
  void set_features(const char* value);
  void set_features(const char* value, size_t size);
  ::std::string* mutable_features();
  ::std::string* release_features();
  void set_allocated_features(::std::string* features);

  // repeated .dg.model.FaceAttribute Attributes = 7;
  int attributes_size() const;
  void clear_attributes();
  static const int kAttributesFieldNumber = 7;
  const ::dg::model::FaceAttribute& attributes(int index) const;
  ::dg::model::FaceAttribute* mutable_attributes(int index);
  ::dg::model::FaceAttribute* add_attributes();
  ::google::protobuf::RepeatedPtrField< ::dg::model::FaceAttribute >*
      mutable_attributes();
  const ::google::protobuf::RepeatedPtrField< ::dg::model::FaceAttribute >&
      attributes() const;

  // optional .dg.model.Image AlignedImage = 8;
  bool has_alignedimage() const;
  void clear_alignedimage();
  static const int kAlignedImageFieldNumber = 8;
  const ::dg::model::Image& alignedimage() const;
  ::dg::model::Image* mutable_alignedimage();
  ::dg::model::Image* release_alignedimage();
  void set_allocated_alignedimage(::dg::model::Image* alignedimage);

  // optional .dg.model.FaceAlignResult TransformedAlignResult = 9;
  bool has_transformedalignresult() const;
  void clear_transformedalignresult();
  static const int kTransformedAlignResultFieldNumber = 9;
  const ::dg::model::FaceAlignResult& transformedalignresult() const;
  ::dg::model::FaceAlignResult* mutable_transformedalignresult();
  ::dg::model::FaceAlignResult* release_transformedalignresult();
  void set_allocated_transformedalignresult(::dg::model::FaceAlignResult* transformedalignresult);

  // @@protoc_insertion_point(class_scope:dg.model.RecFace)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 id_;
  ::dg::model::CutboardImage* img_;
  ::dg::model::FaceAlignResult* alignresult_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::std::string, float,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT,
      0 >
      RecFace_QualitiesEntry;
  ::google::protobuf::internal::MapField<
      ::std::string, float,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT,
      0 > qualities_;
  ::google::protobuf::internal::ArenaStringPtr features_;
  ::google::protobuf::RepeatedPtrField< ::dg::model::FaceAttribute > attributes_;
  ::dg::model::Image* alignedimage_;
  ::dg::model::FaceAlignResult* transformedalignresult_;
  float confidence_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static RecFace* default_instance_;
};
// -------------------------------------------------------------------

class NameAndConfidence : public ::google::protobuf::Message {
 public:
  NameAndConfidence();
  virtual ~NameAndConfidence();

  NameAndConfidence(const NameAndConfidence& from);

  inline NameAndConfidence& operator=(const NameAndConfidence& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NameAndConfidence& default_instance();

  void Swap(NameAndConfidence* other);

  // implements Message ----------------------------------------------

  inline NameAndConfidence* New() const { return New(NULL); }

  NameAndConfidence* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NameAndConfidence& from);
  void MergeFrom(const NameAndConfidence& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NameAndConfidence* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // optional string Name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional float Confidence = 3;
  void clear_confidence();
  static const int kConfidenceFieldNumber = 3;
  float confidence() const;
  void set_confidence(float value);

  // @@protoc_insertion_point(class_scope:dg.model.NameAndConfidence)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::int32 id_;
  float confidence_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static NameAndConfidence* default_instance_;
};
// -------------------------------------------------------------------

class CategoryAndFeature : public ::google::protobuf::Message {
 public:
  CategoryAndFeature();
  virtual ~CategoryAndFeature();

  CategoryAndFeature(const CategoryAndFeature& from);

  inline CategoryAndFeature& operator=(const CategoryAndFeature& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CategoryAndFeature& default_instance();

  void Swap(CategoryAndFeature* other);

  // implements Message ----------------------------------------------

  inline CategoryAndFeature* New() const { return New(NULL); }

  CategoryAndFeature* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CategoryAndFeature& from);
  void MergeFrom(const CategoryAndFeature& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CategoryAndFeature* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // optional string CategoryName = 2;
  void clear_categoryname();
  static const int kCategoryNameFieldNumber = 2;
  const ::std::string& categoryname() const;
  void set_categoryname(const ::std::string& value);
  void set_categoryname(const char* value);
  void set_categoryname(const char* value, size_t size);
  ::std::string* mutable_categoryname();
  ::std::string* release_categoryname();
  void set_allocated_categoryname(::std::string* categoryname);

  // repeated .dg.model.NameAndConfidence Items = 3;
  int items_size() const;
  void clear_items();
  static const int kItemsFieldNumber = 3;
  const ::dg::model::NameAndConfidence& items(int index) const;
  ::dg::model::NameAndConfidence* mutable_items(int index);
  ::dg::model::NameAndConfidence* add_items();
  ::google::protobuf::RepeatedPtrField< ::dg::model::NameAndConfidence >*
      mutable_items();
  const ::google::protobuf::RepeatedPtrField< ::dg::model::NameAndConfidence >&
      items() const;

  // @@protoc_insertion_point(class_scope:dg.model.CategoryAndFeature)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr categoryname_;
  ::google::protobuf::RepeatedPtrField< ::dg::model::NameAndConfidence > items_;
  ::google::protobuf::int32 id_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static CategoryAndFeature* default_instance_;
};
// -------------------------------------------------------------------

class StorageConfig : public ::google::protobuf::Message {
 public:
  StorageConfig();
  virtual ~StorageConfig();

  StorageConfig(const StorageConfig& from);

  inline StorageConfig& operator=(const StorageConfig& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StorageConfig& default_instance();

  void Swap(StorageConfig* other);

  // implements Message ----------------------------------------------

  inline StorageConfig* New() const { return New(NULL); }

  StorageConfig* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StorageConfig& from);
  void MergeFrom(const StorageConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StorageConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Address = 1;
  void clear_address();
  static const int kAddressFieldNumber = 1;
  const ::std::string& address() const;
  void set_address(const ::std::string& value);
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  ::std::string* mutable_address();
  ::std::string* release_address();
  void set_allocated_address(::std::string* address);

  // optional .dg.model.DBType Type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::dg::model::DBType type() const;
  void set_type(::dg::model::DBType value);

  // repeated string Tags = 3;
  int tags_size() const;
  void clear_tags();
  static const int kTagsFieldNumber = 3;
  const ::std::string& tags(int index) const;
  ::std::string* mutable_tags(int index);
  void set_tags(int index, const ::std::string& value);
  void set_tags(int index, const char* value);
  void set_tags(int index, const char* value, size_t size);
  ::std::string* add_tags();
  void add_tags(const ::std::string& value);
  void add_tags(const char* value);
  void add_tags(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& tags() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_tags();

  // @@protoc_insertion_point(class_scope:dg.model.StorageConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr address_;
  ::google::protobuf::RepeatedPtrField< ::std::string> tags_;
  int type_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static StorageConfig* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// SrcMetadata

// optional int64 Timestamp = 1;
inline void SrcMetadata::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 SrcMetadata::timestamp() const {
  // @@protoc_insertion_point(field_get:dg.model.SrcMetadata.Timestamp)
  return timestamp_;
}
inline void SrcMetadata::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:dg.model.SrcMetadata.Timestamp)
}

// optional int32 Duration = 2;
inline void SrcMetadata::clear_duration() {
  duration_ = 0;
}
inline ::google::protobuf::int32 SrcMetadata::duration() const {
  // @@protoc_insertion_point(field_get:dg.model.SrcMetadata.Duration)
  return duration_;
}
inline void SrcMetadata::set_duration(::google::protobuf::int32 value) {
  
  duration_ = value;
  // @@protoc_insertion_point(field_set:dg.model.SrcMetadata.Duration)
}

// optional int32 SensorId = 3;
inline void SrcMetadata::clear_sensorid() {
  sensorid_ = 0;
}
inline ::google::protobuf::int32 SrcMetadata::sensorid() const {
  // @@protoc_insertion_point(field_get:dg.model.SrcMetadata.SensorId)
  return sensorid_;
}
inline void SrcMetadata::set_sensorid(::google::protobuf::int32 value) {
  
  sensorid_ = value;
  // @@protoc_insertion_point(field_set:dg.model.SrcMetadata.SensorId)
}

// optional string SensorName = 4;
inline void SrcMetadata::clear_sensorname() {
  sensorname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SrcMetadata::sensorname() const {
  // @@protoc_insertion_point(field_get:dg.model.SrcMetadata.SensorName)
  return sensorname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SrcMetadata::set_sensorname(const ::std::string& value) {
  
  sensorname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dg.model.SrcMetadata.SensorName)
}
inline void SrcMetadata::set_sensorname(const char* value) {
  
  sensorname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dg.model.SrcMetadata.SensorName)
}
inline void SrcMetadata::set_sensorname(const char* value, size_t size) {
  
  sensorname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dg.model.SrcMetadata.SensorName)
}
inline ::std::string* SrcMetadata::mutable_sensorname() {
  
  // @@protoc_insertion_point(field_mutable:dg.model.SrcMetadata.SensorName)
  return sensorname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SrcMetadata::release_sensorname() {
  
  return sensorname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SrcMetadata::set_allocated_sensorname(::std::string* sensorname) {
  if (sensorname != NULL) {
    
  } else {
    
  }
  sensorname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sensorname);
  // @@protoc_insertion_point(field_set_allocated:dg.model.SrcMetadata.SensorName)
}

// optional string SensorUrl = 5;
inline void SrcMetadata::clear_sensorurl() {
  sensorurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SrcMetadata::sensorurl() const {
  // @@protoc_insertion_point(field_get:dg.model.SrcMetadata.SensorUrl)
  return sensorurl_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SrcMetadata::set_sensorurl(const ::std::string& value) {
  
  sensorurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dg.model.SrcMetadata.SensorUrl)
}
inline void SrcMetadata::set_sensorurl(const char* value) {
  
  sensorurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dg.model.SrcMetadata.SensorUrl)
}
inline void SrcMetadata::set_sensorurl(const char* value, size_t size) {
  
  sensorurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dg.model.SrcMetadata.SensorUrl)
}
inline ::std::string* SrcMetadata::mutable_sensorurl() {
  
  // @@protoc_insertion_point(field_mutable:dg.model.SrcMetadata.SensorUrl)
  return sensorurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SrcMetadata::release_sensorurl() {
  
  return sensorurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SrcMetadata::set_allocated_sensorurl(::std::string* sensorurl) {
  if (sensorurl != NULL) {
    
  } else {
    
  }
  sensorurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sensorurl);
  // @@protoc_insertion_point(field_set_allocated:dg.model.SrcMetadata.SensorUrl)
}

// optional int32 RepoId = 6;
inline void SrcMetadata::clear_repoid() {
  repoid_ = 0;
}
inline ::google::protobuf::int32 SrcMetadata::repoid() const {
  // @@protoc_insertion_point(field_get:dg.model.SrcMetadata.RepoId)
  return repoid_;
}
inline void SrcMetadata::set_repoid(::google::protobuf::int32 value) {
  
  repoid_ = value;
  // @@protoc_insertion_point(field_set:dg.model.SrcMetadata.RepoId)
}

// optional string RepoInfo = 7;
inline void SrcMetadata::clear_repoinfo() {
  repoinfo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SrcMetadata::repoinfo() const {
  // @@protoc_insertion_point(field_get:dg.model.SrcMetadata.RepoInfo)
  return repoinfo_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SrcMetadata::set_repoinfo(const ::std::string& value) {
  
  repoinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dg.model.SrcMetadata.RepoInfo)
}
inline void SrcMetadata::set_repoinfo(const char* value) {
  
  repoinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dg.model.SrcMetadata.RepoInfo)
}
inline void SrcMetadata::set_repoinfo(const char* value, size_t size) {
  
  repoinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dg.model.SrcMetadata.RepoInfo)
}
inline ::std::string* SrcMetadata::mutable_repoinfo() {
  
  // @@protoc_insertion_point(field_mutable:dg.model.SrcMetadata.RepoInfo)
  return repoinfo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SrcMetadata::release_repoinfo() {
  
  return repoinfo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SrcMetadata::set_allocated_repoinfo(::std::string* repoinfo) {
  if (repoinfo != NULL) {
    
  } else {
    
  }
  repoinfo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), repoinfo);
  // @@protoc_insertion_point(field_set_allocated:dg.model.SrcMetadata.RepoInfo)
}

// optional .dg.model.ObjType ObjType = 8;
inline void SrcMetadata::clear_objtype() {
  objtype_ = 0;
}
inline ::dg::model::ObjType SrcMetadata::objtype() const {
  // @@protoc_insertion_point(field_get:dg.model.SrcMetadata.ObjType)
  return static_cast< ::dg::model::ObjType >(objtype_);
}
inline void SrcMetadata::set_objtype(::dg::model::ObjType value) {
  
  objtype_ = value;
  // @@protoc_insertion_point(field_set:dg.model.SrcMetadata.ObjType)
}

// optional string SensorIdStr = 9;
inline void SrcMetadata::clear_sensoridstr() {
  sensoridstr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SrcMetadata::sensoridstr() const {
  // @@protoc_insertion_point(field_get:dg.model.SrcMetadata.SensorIdStr)
  return sensoridstr_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SrcMetadata::set_sensoridstr(const ::std::string& value) {
  
  sensoridstr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dg.model.SrcMetadata.SensorIdStr)
}
inline void SrcMetadata::set_sensoridstr(const char* value) {
  
  sensoridstr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dg.model.SrcMetadata.SensorIdStr)
}
inline void SrcMetadata::set_sensoridstr(const char* value, size_t size) {
  
  sensoridstr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dg.model.SrcMetadata.SensorIdStr)
}
inline ::std::string* SrcMetadata::mutable_sensoridstr() {
  
  // @@protoc_insertion_point(field_mutable:dg.model.SrcMetadata.SensorIdStr)
  return sensoridstr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SrcMetadata::release_sensoridstr() {
  
  return sensoridstr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SrcMetadata::set_allocated_sensoridstr(::std::string* sensoridstr) {
  if (sensoridstr != NULL) {
    
  } else {
    
  }
  sensoridstr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sensoridstr);
  // @@protoc_insertion_point(field_set_allocated:dg.model.SrcMetadata.SensorIdStr)
}

// -------------------------------------------------------------------

// PingRequest

// -------------------------------------------------------------------

// PingResponse

// optional string Message = 1;
inline void PingResponse::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PingResponse::message() const {
  // @@protoc_insertion_point(field_get:dg.model.PingResponse.Message)
  return message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PingResponse::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dg.model.PingResponse.Message)
}
inline void PingResponse::set_message(const char* value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dg.model.PingResponse.Message)
}
inline void PingResponse::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dg.model.PingResponse.Message)
}
inline ::std::string* PingResponse::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:dg.model.PingResponse.Message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PingResponse::release_message() {
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PingResponse::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:dg.model.PingResponse.Message)
}

// -------------------------------------------------------------------

// Cutboard

// optional int32 X = 1;
inline void Cutboard::clear_x() {
  x_ = 0;
}
inline ::google::protobuf::int32 Cutboard::x() const {
  // @@protoc_insertion_point(field_get:dg.model.Cutboard.X)
  return x_;
}
inline void Cutboard::set_x(::google::protobuf::int32 value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:dg.model.Cutboard.X)
}

// optional int32 Y = 2;
inline void Cutboard::clear_y() {
  y_ = 0;
}
inline ::google::protobuf::int32 Cutboard::y() const {
  // @@protoc_insertion_point(field_get:dg.model.Cutboard.Y)
  return y_;
}
inline void Cutboard::set_y(::google::protobuf::int32 value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:dg.model.Cutboard.Y)
}

// optional int32 Width = 3;
inline void Cutboard::clear_width() {
  width_ = 0;
}
inline ::google::protobuf::int32 Cutboard::width() const {
  // @@protoc_insertion_point(field_get:dg.model.Cutboard.Width)
  return width_;
}
inline void Cutboard::set_width(::google::protobuf::int32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:dg.model.Cutboard.Width)
}

// optional int32 Height = 4;
inline void Cutboard::clear_height() {
  height_ = 0;
}
inline ::google::protobuf::int32 Cutboard::height() const {
  // @@protoc_insertion_point(field_get:dg.model.Cutboard.Height)
  return height_;
}
inline void Cutboard::set_height(::google::protobuf::int32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:dg.model.Cutboard.Height)
}

// optional int32 ResWidth = 5;
inline void Cutboard::clear_reswidth() {
  reswidth_ = 0;
}
inline ::google::protobuf::int32 Cutboard::reswidth() const {
  // @@protoc_insertion_point(field_get:dg.model.Cutboard.ResWidth)
  return reswidth_;
}
inline void Cutboard::set_reswidth(::google::protobuf::int32 value) {
  
  reswidth_ = value;
  // @@protoc_insertion_point(field_set:dg.model.Cutboard.ResWidth)
}

// optional int32 ResHeight = 6;
inline void Cutboard::clear_resheight() {
  resheight_ = 0;
}
inline ::google::protobuf::int32 Cutboard::resheight() const {
  // @@protoc_insertion_point(field_get:dg.model.Cutboard.ResHeight)
  return resheight_;
}
inline void Cutboard::set_resheight(::google::protobuf::int32 value) {
  
  resheight_ = value;
  // @@protoc_insertion_point(field_set:dg.model.Cutboard.ResHeight)
}

// optional float Confidence = 7;
inline void Cutboard::clear_confidence() {
  confidence_ = 0;
}
inline float Cutboard::confidence() const {
  // @@protoc_insertion_point(field_get:dg.model.Cutboard.Confidence)
  return confidence_;
}
inline void Cutboard::set_confidence(float value) {
  
  confidence_ = value;
  // @@protoc_insertion_point(field_set:dg.model.Cutboard.Confidence)
}

// -------------------------------------------------------------------

// PointF

// optional float X = 1;
inline void PointF::clear_x() {
  x_ = 0;
}
inline float PointF::x() const {
  // @@protoc_insertion_point(field_get:dg.model.PointF.X)
  return x_;
}
inline void PointF::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:dg.model.PointF.X)
}

// optional float Y = 2;
inline void PointF::clear_y() {
  y_ = 0;
}
inline float PointF::y() const {
  // @@protoc_insertion_point(field_get:dg.model.PointF.Y)
  return y_;
}
inline void PointF::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:dg.model.PointF.Y)
}

// -------------------------------------------------------------------

// Rect

// optional int32 X = 1;
inline void Rect::clear_x() {
  x_ = 0;
}
inline ::google::protobuf::int32 Rect::x() const {
  // @@protoc_insertion_point(field_get:dg.model.Rect.X)
  return x_;
}
inline void Rect::set_x(::google::protobuf::int32 value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:dg.model.Rect.X)
}

// optional int32 Y = 2;
inline void Rect::clear_y() {
  y_ = 0;
}
inline ::google::protobuf::int32 Rect::y() const {
  // @@protoc_insertion_point(field_get:dg.model.Rect.Y)
  return y_;
}
inline void Rect::set_y(::google::protobuf::int32 value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:dg.model.Rect.Y)
}

// optional int32 Width = 3;
inline void Rect::clear_width() {
  width_ = 0;
}
inline ::google::protobuf::int32 Rect::width() const {
  // @@protoc_insertion_point(field_get:dg.model.Rect.Width)
  return width_;
}
inline void Rect::set_width(::google::protobuf::int32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:dg.model.Rect.Width)
}

// optional int32 Height = 4;
inline void Rect::clear_height() {
  height_ = 0;
}
inline ::google::protobuf::int32 Rect::height() const {
  // @@protoc_insertion_point(field_get:dg.model.Rect.Height)
  return height_;
}
inline void Rect::set_height(::google::protobuf::int32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:dg.model.Rect.Height)
}

// -------------------------------------------------------------------

// RotatedRect

// optional float CenterX = 1;
inline void RotatedRect::clear_centerx() {
  centerx_ = 0;
}
inline float RotatedRect::centerx() const {
  // @@protoc_insertion_point(field_get:dg.model.RotatedRect.CenterX)
  return centerx_;
}
inline void RotatedRect::set_centerx(float value) {
  
  centerx_ = value;
  // @@protoc_insertion_point(field_set:dg.model.RotatedRect.CenterX)
}

// optional float CenterY = 2;
inline void RotatedRect::clear_centery() {
  centery_ = 0;
}
inline float RotatedRect::centery() const {
  // @@protoc_insertion_point(field_get:dg.model.RotatedRect.CenterY)
  return centery_;
}
inline void RotatedRect::set_centery(float value) {
  
  centery_ = value;
  // @@protoc_insertion_point(field_set:dg.model.RotatedRect.CenterY)
}

// optional float Width = 3;
inline void RotatedRect::clear_width() {
  width_ = 0;
}
inline float RotatedRect::width() const {
  // @@protoc_insertion_point(field_get:dg.model.RotatedRect.Width)
  return width_;
}
inline void RotatedRect::set_width(float value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:dg.model.RotatedRect.Width)
}

// optional float Height = 4;
inline void RotatedRect::clear_height() {
  height_ = 0;
}
inline float RotatedRect::height() const {
  // @@protoc_insertion_point(field_get:dg.model.RotatedRect.Height)
  return height_;
}
inline void RotatedRect::set_height(float value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:dg.model.RotatedRect.Height)
}

// optional float Angle = 5;
inline void RotatedRect::clear_angle() {
  angle_ = 0;
}
inline float RotatedRect::angle() const {
  // @@protoc_insertion_point(field_get:dg.model.RotatedRect.Angle)
  return angle_;
}
inline void RotatedRect::set_angle(float value) {
  
  angle_ = value;
  // @@protoc_insertion_point(field_set:dg.model.RotatedRect.Angle)
}

// -------------------------------------------------------------------

// CutboardImage

// optional .dg.model.Cutboard Cutboard = 1;
inline bool CutboardImage::has_cutboard() const {
  return !_is_default_instance_ && cutboard_ != NULL;
}
inline void CutboardImage::clear_cutboard() {
  if (GetArenaNoVirtual() == NULL && cutboard_ != NULL) delete cutboard_;
  cutboard_ = NULL;
}
inline const ::dg::model::Cutboard& CutboardImage::cutboard() const {
  // @@protoc_insertion_point(field_get:dg.model.CutboardImage.Cutboard)
  return cutboard_ != NULL ? *cutboard_ : *default_instance_->cutboard_;
}
inline ::dg::model::Cutboard* CutboardImage::mutable_cutboard() {
  
  if (cutboard_ == NULL) {
    cutboard_ = new ::dg::model::Cutboard;
  }
  // @@protoc_insertion_point(field_mutable:dg.model.CutboardImage.Cutboard)
  return cutboard_;
}
inline ::dg::model::Cutboard* CutboardImage::release_cutboard() {
  
  ::dg::model::Cutboard* temp = cutboard_;
  cutboard_ = NULL;
  return temp;
}
inline void CutboardImage::set_allocated_cutboard(::dg::model::Cutboard* cutboard) {
  delete cutboard_;
  cutboard_ = cutboard;
  if (cutboard) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dg.model.CutboardImage.Cutboard)
}

// optional .dg.model.Image Img = 2;
inline bool CutboardImage::has_img() const {
  return !_is_default_instance_ && img_ != NULL;
}
inline void CutboardImage::clear_img() {
  if (GetArenaNoVirtual() == NULL && img_ != NULL) delete img_;
  img_ = NULL;
}
inline const ::dg::model::Image& CutboardImage::img() const {
  // @@protoc_insertion_point(field_get:dg.model.CutboardImage.Img)
  return img_ != NULL ? *img_ : *default_instance_->img_;
}
inline ::dg::model::Image* CutboardImage::mutable_img() {
  
  if (img_ == NULL) {
    img_ = new ::dg::model::Image;
  }
  // @@protoc_insertion_point(field_mutable:dg.model.CutboardImage.Img)
  return img_;
}
inline ::dg::model::Image* CutboardImage::release_img() {
  
  ::dg::model::Image* temp = img_;
  img_ = NULL;
  return temp;
}
inline void CutboardImage::set_allocated_img(::dg::model::Image* img) {
  delete img_;
  img_ = img;
  if (img) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dg.model.CutboardImage.Img)
}

// optional .dg.model.RotatedRect Rect = 3;
inline bool CutboardImage::has_rect() const {
  return !_is_default_instance_ && rect_ != NULL;
}
inline void CutboardImage::clear_rect() {
  if (GetArenaNoVirtual() == NULL && rect_ != NULL) delete rect_;
  rect_ = NULL;
}
inline const ::dg::model::RotatedRect& CutboardImage::rect() const {
  // @@protoc_insertion_point(field_get:dg.model.CutboardImage.Rect)
  return rect_ != NULL ? *rect_ : *default_instance_->rect_;
}
inline ::dg::model::RotatedRect* CutboardImage::mutable_rect() {
  
  if (rect_ == NULL) {
    rect_ = new ::dg::model::RotatedRect;
  }
  // @@protoc_insertion_point(field_mutable:dg.model.CutboardImage.Rect)
  return rect_;
}
inline ::dg::model::RotatedRect* CutboardImage::release_rect() {
  
  ::dg::model::RotatedRect* temp = rect_;
  rect_ = NULL;
  return temp;
}
inline void CutboardImage::set_allocated_rect(::dg::model::RotatedRect* rect) {
  delete rect_;
  rect_ = rect;
  if (rect) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dg.model.CutboardImage.Rect)
}

// -------------------------------------------------------------------

// Color

// optional int32 ColorId = 1;
inline void Color::clear_colorid() {
  colorid_ = 0;
}
inline ::google::protobuf::int32 Color::colorid() const {
  // @@protoc_insertion_point(field_get:dg.model.Color.ColorId)
  return colorid_;
}
inline void Color::set_colorid(::google::protobuf::int32 value) {
  
  colorid_ = value;
  // @@protoc_insertion_point(field_set:dg.model.Color.ColorId)
}

// optional float Confidence = 2;
inline void Color::clear_confidence() {
  confidence_ = 0;
}
inline float Color::confidence() const {
  // @@protoc_insertion_point(field_get:dg.model.Color.Confidence)
  return confidence_;
}
inline void Color::set_confidence(float value) {
  
  confidence_ = value;
  // @@protoc_insertion_point(field_set:dg.model.Color.Confidence)
}

// optional string ColorName = 3;
inline void Color::clear_colorname() {
  colorname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Color::colorname() const {
  // @@protoc_insertion_point(field_get:dg.model.Color.ColorName)
  return colorname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Color::set_colorname(const ::std::string& value) {
  
  colorname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dg.model.Color.ColorName)
}
inline void Color::set_colorname(const char* value) {
  
  colorname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dg.model.Color.ColorName)
}
inline void Color::set_colorname(const char* value, size_t size) {
  
  colorname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dg.model.Color.ColorName)
}
inline ::std::string* Color::mutable_colorname() {
  
  // @@protoc_insertion_point(field_mutable:dg.model.Color.ColorName)
  return colorname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Color::release_colorname() {
  
  return colorname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Color::set_allocated_colorname(::std::string* colorname) {
  if (colorname != NULL) {
    
  } else {
    
  }
  colorname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), colorname);
  // @@protoc_insertion_point(field_set_allocated:dg.model.Color.ColorName)
}

// -------------------------------------------------------------------

// FeatureVector

// optional int64 Id = 1;
inline void FeatureVector::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 FeatureVector::id() const {
  // @@protoc_insertion_point(field_get:dg.model.FeatureVector.Id)
  return id_;
}
inline void FeatureVector::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:dg.model.FeatureVector.Id)
}

// optional string Feature = 2;
inline void FeatureVector::clear_feature() {
  feature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FeatureVector::feature() const {
  // @@protoc_insertion_point(field_get:dg.model.FeatureVector.Feature)
  return feature_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FeatureVector::set_feature(const ::std::string& value) {
  
  feature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dg.model.FeatureVector.Feature)
}
inline void FeatureVector::set_feature(const char* value) {
  
  feature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dg.model.FeatureVector.Feature)
}
inline void FeatureVector::set_feature(const char* value, size_t size) {
  
  feature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dg.model.FeatureVector.Feature)
}
inline ::std::string* FeatureVector::mutable_feature() {
  
  // @@protoc_insertion_point(field_mutable:dg.model.FeatureVector.Feature)
  return feature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FeatureVector::release_feature() {
  
  return feature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FeatureVector::set_allocated_feature(::std::string* feature) {
  if (feature != NULL) {
    
  } else {
    
  }
  feature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), feature);
  // @@protoc_insertion_point(field_set_allocated:dg.model.FeatureVector.Feature)
}

// -------------------------------------------------------------------

// NullMessage

// -------------------------------------------------------------------

// Attribute

// optional int32 AttributeId = 1;
inline void Attribute::clear_attributeid() {
  attributeid_ = 0;
}
inline ::google::protobuf::int32 Attribute::attributeid() const {
  // @@protoc_insertion_point(field_get:dg.model.Attribute.AttributeId)
  return attributeid_;
}
inline void Attribute::set_attributeid(::google::protobuf::int32 value) {
  
  attributeid_ = value;
  // @@protoc_insertion_point(field_set:dg.model.Attribute.AttributeId)
}

// optional string AttributeName = 2;
inline void Attribute::clear_attributename() {
  attributename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Attribute::attributename() const {
  // @@protoc_insertion_point(field_get:dg.model.Attribute.AttributeName)
  return attributename_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Attribute::set_attributename(const ::std::string& value) {
  
  attributename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dg.model.Attribute.AttributeName)
}
inline void Attribute::set_attributename(const char* value) {
  
  attributename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dg.model.Attribute.AttributeName)
}
inline void Attribute::set_attributename(const char* value, size_t size) {
  
  attributename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dg.model.Attribute.AttributeName)
}
inline ::std::string* Attribute::mutable_attributename() {
  
  // @@protoc_insertion_point(field_mutable:dg.model.Attribute.AttributeName)
  return attributename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Attribute::release_attributename() {
  
  return attributename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Attribute::set_allocated_attributename(::std::string* attributename) {
  if (attributename != NULL) {
    
  } else {
    
  }
  attributename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), attributename);
  // @@protoc_insertion_point(field_set_allocated:dg.model.Attribute.AttributeName)
}

// optional int32 ValueId = 3;
inline void Attribute::clear_valueid() {
  valueid_ = 0;
}
inline ::google::protobuf::int32 Attribute::valueid() const {
  // @@protoc_insertion_point(field_get:dg.model.Attribute.ValueId)
  return valueid_;
}
inline void Attribute::set_valueid(::google::protobuf::int32 value) {
  
  valueid_ = value;
  // @@protoc_insertion_point(field_set:dg.model.Attribute.ValueId)
}

// optional string ValueString = 4;
inline void Attribute::clear_valuestring() {
  valuestring_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Attribute::valuestring() const {
  // @@protoc_insertion_point(field_get:dg.model.Attribute.ValueString)
  return valuestring_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Attribute::set_valuestring(const ::std::string& value) {
  
  valuestring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dg.model.Attribute.ValueString)
}
inline void Attribute::set_valuestring(const char* value) {
  
  valuestring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dg.model.Attribute.ValueString)
}
inline void Attribute::set_valuestring(const char* value, size_t size) {
  
  valuestring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dg.model.Attribute.ValueString)
}
inline ::std::string* Attribute::mutable_valuestring() {
  
  // @@protoc_insertion_point(field_mutable:dg.model.Attribute.ValueString)
  return valuestring_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Attribute::release_valuestring() {
  
  return valuestring_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Attribute::set_allocated_valuestring(::std::string* valuestring) {
  if (valuestring != NULL) {
    
  } else {
    
  }
  valuestring_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), valuestring);
  // @@protoc_insertion_point(field_set_allocated:dg.model.Attribute.ValueString)
}

// optional float Confidence = 5;
inline void Attribute::clear_confidence() {
  confidence_ = 0;
}
inline float Attribute::confidence() const {
  // @@protoc_insertion_point(field_get:dg.model.Attribute.Confidence)
  return confidence_;
}
inline void Attribute::set_confidence(float value) {
  
  confidence_ = value;
  // @@protoc_insertion_point(field_set:dg.model.Attribute.Confidence)
}

// -------------------------------------------------------------------

// FaceAttribute

// optional int32 AttributeId = 1;
inline void FaceAttribute::clear_attributeid() {
  attributeid_ = 0;
}
inline ::google::protobuf::int32 FaceAttribute::attributeid() const {
  // @@protoc_insertion_point(field_get:dg.model.FaceAttribute.AttributeId)
  return attributeid_;
}
inline void FaceAttribute::set_attributeid(::google::protobuf::int32 value) {
  
  attributeid_ = value;
  // @@protoc_insertion_point(field_set:dg.model.FaceAttribute.AttributeId)
}

// optional string Name = 2;
inline void FaceAttribute::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FaceAttribute::name() const {
  // @@protoc_insertion_point(field_get:dg.model.FaceAttribute.Name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FaceAttribute::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dg.model.FaceAttribute.Name)
}
inline void FaceAttribute::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dg.model.FaceAttribute.Name)
}
inline void FaceAttribute::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dg.model.FaceAttribute.Name)
}
inline ::std::string* FaceAttribute::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:dg.model.FaceAttribute.Name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FaceAttribute::release_name() {
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FaceAttribute::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:dg.model.FaceAttribute.Name)
}

// optional int32 ValueId = 3;
inline void FaceAttribute::clear_valueid() {
  valueid_ = 0;
}
inline ::google::protobuf::int32 FaceAttribute::valueid() const {
  // @@protoc_insertion_point(field_get:dg.model.FaceAttribute.ValueId)
  return valueid_;
}
inline void FaceAttribute::set_valueid(::google::protobuf::int32 value) {
  
  valueid_ = value;
  // @@protoc_insertion_point(field_set:dg.model.FaceAttribute.ValueId)
}

// optional float Confidence = 4;
inline void FaceAttribute::clear_confidence() {
  confidence_ = 0;
}
inline float FaceAttribute::confidence() const {
  // @@protoc_insertion_point(field_get:dg.model.FaceAttribute.Confidence)
  return confidence_;
}
inline void FaceAttribute::set_confidence(float value) {
  
  confidence_ = value;
  // @@protoc_insertion_point(field_set:dg.model.FaceAttribute.Confidence)
}

// optional bool ValueBool = 9;
inline bool FaceAttribute::has_valuebool() const {
  return Value_case() == kValueBool;
}
inline void FaceAttribute::set_has_valuebool() {
  _oneof_case_[0] = kValueBool;
}
inline void FaceAttribute::clear_valuebool() {
  if (has_valuebool()) {
    Value_.valuebool_ = false;
    clear_has_Value();
  }
}
inline bool FaceAttribute::valuebool() const {
  // @@protoc_insertion_point(field_get:dg.model.FaceAttribute.ValueBool)
  if (has_valuebool()) {
    return Value_.valuebool_;
  }
  return false;
}
inline void FaceAttribute::set_valuebool(bool value) {
  if (!has_valuebool()) {
    clear_Value();
    set_has_valuebool();
  }
  Value_.valuebool_ = value;
  // @@protoc_insertion_point(field_set:dg.model.FaceAttribute.ValueBool)
}

// optional int32 ValueInt = 10;
inline bool FaceAttribute::has_valueint() const {
  return Value_case() == kValueInt;
}
inline void FaceAttribute::set_has_valueint() {
  _oneof_case_[0] = kValueInt;
}
inline void FaceAttribute::clear_valueint() {
  if (has_valueint()) {
    Value_.valueint_ = 0;
    clear_has_Value();
  }
}
inline ::google::protobuf::int32 FaceAttribute::valueint() const {
  // @@protoc_insertion_point(field_get:dg.model.FaceAttribute.ValueInt)
  if (has_valueint()) {
    return Value_.valueint_;
  }
  return 0;
}
inline void FaceAttribute::set_valueint(::google::protobuf::int32 value) {
  if (!has_valueint()) {
    clear_Value();
    set_has_valueint();
  }
  Value_.valueint_ = value;
  // @@protoc_insertion_point(field_set:dg.model.FaceAttribute.ValueInt)
}

// optional float ValueFloat = 11;
inline bool FaceAttribute::has_valuefloat() const {
  return Value_case() == kValueFloat;
}
inline void FaceAttribute::set_has_valuefloat() {
  _oneof_case_[0] = kValueFloat;
}
inline void FaceAttribute::clear_valuefloat() {
  if (has_valuefloat()) {
    Value_.valuefloat_ = 0;
    clear_has_Value();
  }
}
inline float FaceAttribute::valuefloat() const {
  // @@protoc_insertion_point(field_get:dg.model.FaceAttribute.ValueFloat)
  if (has_valuefloat()) {
    return Value_.valuefloat_;
  }
  return 0;
}
inline void FaceAttribute::set_valuefloat(float value) {
  if (!has_valuefloat()) {
    clear_Value();
    set_has_valuefloat();
  }
  Value_.valuefloat_ = value;
  // @@protoc_insertion_point(field_set:dg.model.FaceAttribute.ValueFloat)
}

// optional string ValueString = 12;
inline bool FaceAttribute::has_valuestring() const {
  return Value_case() == kValueString;
}
inline void FaceAttribute::set_has_valuestring() {
  _oneof_case_[0] = kValueString;
}
inline void FaceAttribute::clear_valuestring() {
  if (has_valuestring()) {
    Value_.valuestring_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_Value();
  }
}
inline const ::std::string& FaceAttribute::valuestring() const {
  // @@protoc_insertion_point(field_get:dg.model.FaceAttribute.ValueString)
  if (has_valuestring()) {
    return Value_.valuestring_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void FaceAttribute::set_valuestring(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:dg.model.FaceAttribute.ValueString)
  if (!has_valuestring()) {
    clear_Value();
    set_has_valuestring();
    Value_.valuestring_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  Value_.valuestring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dg.model.FaceAttribute.ValueString)
}
inline void FaceAttribute::set_valuestring(const char* value) {
  if (!has_valuestring()) {
    clear_Value();
    set_has_valuestring();
    Value_.valuestring_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  Value_.valuestring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dg.model.FaceAttribute.ValueString)
}
inline void FaceAttribute::set_valuestring(const char* value, size_t size) {
  if (!has_valuestring()) {
    clear_Value();
    set_has_valuestring();
    Value_.valuestring_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  Value_.valuestring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dg.model.FaceAttribute.ValueString)
}
inline ::std::string* FaceAttribute::mutable_valuestring() {
  if (!has_valuestring()) {
    clear_Value();
    set_has_valuestring();
    Value_.valuestring_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:dg.model.FaceAttribute.ValueString)
  return Value_.valuestring_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FaceAttribute::release_valuestring() {
  if (has_valuestring()) {
    clear_has_Value();
    return Value_.valuestring_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void FaceAttribute::set_allocated_valuestring(::std::string* valuestring) {
  if (!has_valuestring()) {
    Value_.valuestring_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_Value();
  if (valuestring != NULL) {
    set_has_valuestring();
    Value_.valuestring_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        valuestring);
  }
  // @@protoc_insertion_point(field_set_allocated:dg.model.FaceAttribute.ValueString)
}

inline bool FaceAttribute::has_Value() const {
  return Value_case() != VALUE_NOT_SET;
}
inline void FaceAttribute::clear_has_Value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline FaceAttribute::ValueCase FaceAttribute::Value_case() const {
  return FaceAttribute::ValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Image

// optional string Id = 1;
inline void Image::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Image::id() const {
  // @@protoc_insertion_point(field_get:dg.model.Image.Id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Image::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dg.model.Image.Id)
}
inline void Image::set_id(const char* value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dg.model.Image.Id)
}
inline void Image::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dg.model.Image.Id)
}
inline ::std::string* Image::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:dg.model.Image.Id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Image::release_id() {
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Image::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:dg.model.Image.Id)
}

// optional int32 Width = 2;
inline void Image::clear_width() {
  width_ = 0;
}
inline ::google::protobuf::int32 Image::width() const {
  // @@protoc_insertion_point(field_get:dg.model.Image.Width)
  return width_;
}
inline void Image::set_width(::google::protobuf::int32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:dg.model.Image.Width)
}

// optional int32 Height = 3;
inline void Image::clear_height() {
  height_ = 0;
}
inline ::google::protobuf::int32 Image::height() const {
  // @@protoc_insertion_point(field_get:dg.model.Image.Height)
  return height_;
}
inline void Image::set_height(::google::protobuf::int32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:dg.model.Image.Height)
}

// optional string URI = 4;
inline void Image::clear_uri() {
  uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Image::uri() const {
  // @@protoc_insertion_point(field_get:dg.model.Image.URI)
  return uri_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Image::set_uri(const ::std::string& value) {
  
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dg.model.Image.URI)
}
inline void Image::set_uri(const char* value) {
  
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dg.model.Image.URI)
}
inline void Image::set_uri(const char* value, size_t size) {
  
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dg.model.Image.URI)
}
inline ::std::string* Image::mutable_uri() {
  
  // @@protoc_insertion_point(field_mutable:dg.model.Image.URI)
  return uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Image::release_uri() {
  
  return uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Image::set_allocated_uri(::std::string* uri) {
  if (uri != NULL) {
    
  } else {
    
  }
  uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uri);
  // @@protoc_insertion_point(field_set_allocated:dg.model.Image.URI)
}

// optional string BinData = 5;
inline void Image::clear_bindata() {
  bindata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Image::bindata() const {
  // @@protoc_insertion_point(field_get:dg.model.Image.BinData)
  return bindata_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Image::set_bindata(const ::std::string& value) {
  
  bindata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dg.model.Image.BinData)
}
inline void Image::set_bindata(const char* value) {
  
  bindata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dg.model.Image.BinData)
}
inline void Image::set_bindata(const char* value, size_t size) {
  
  bindata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dg.model.Image.BinData)
}
inline ::std::string* Image::mutable_bindata() {
  
  // @@protoc_insertion_point(field_mutable:dg.model.Image.BinData)
  return bindata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Image::release_bindata() {
  
  return bindata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Image::set_allocated_bindata(::std::string* bindata) {
  if (bindata != NULL) {
    
  } else {
    
  }
  bindata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bindata);
  // @@protoc_insertion_point(field_set_allocated:dg.model.Image.BinData)
}

// -------------------------------------------------------------------

// FaceAlignResult

// repeated .dg.model.PointF LandMarks = 1;
inline int FaceAlignResult::landmarks_size() const {
  return landmarks_.size();
}
inline void FaceAlignResult::clear_landmarks() {
  landmarks_.Clear();
}
inline const ::dg::model::PointF& FaceAlignResult::landmarks(int index) const {
  // @@protoc_insertion_point(field_get:dg.model.FaceAlignResult.LandMarks)
  return landmarks_.Get(index);
}
inline ::dg::model::PointF* FaceAlignResult::mutable_landmarks(int index) {
  // @@protoc_insertion_point(field_mutable:dg.model.FaceAlignResult.LandMarks)
  return landmarks_.Mutable(index);
}
inline ::dg::model::PointF* FaceAlignResult::add_landmarks() {
  // @@protoc_insertion_point(field_add:dg.model.FaceAlignResult.LandMarks)
  return landmarks_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::dg::model::PointF >*
FaceAlignResult::mutable_landmarks() {
  // @@protoc_insertion_point(field_mutable_list:dg.model.FaceAlignResult.LandMarks)
  return &landmarks_;
}
inline const ::google::protobuf::RepeatedPtrField< ::dg::model::PointF >&
FaceAlignResult::landmarks() const {
  // @@protoc_insertion_point(field_list:dg.model.FaceAlignResult.LandMarks)
  return landmarks_;
}

// repeated float LandMarkScores = 2;
inline int FaceAlignResult::landmarkscores_size() const {
  return landmarkscores_.size();
}
inline void FaceAlignResult::clear_landmarkscores() {
  landmarkscores_.Clear();
}
inline float FaceAlignResult::landmarkscores(int index) const {
  // @@protoc_insertion_point(field_get:dg.model.FaceAlignResult.LandMarkScores)
  return landmarkscores_.Get(index);
}
inline void FaceAlignResult::set_landmarkscores(int index, float value) {
  landmarkscores_.Set(index, value);
  // @@protoc_insertion_point(field_set:dg.model.FaceAlignResult.LandMarkScores)
}
inline void FaceAlignResult::add_landmarkscores(float value) {
  landmarkscores_.Add(value);
  // @@protoc_insertion_point(field_add:dg.model.FaceAlignResult.LandMarkScores)
}
inline const ::google::protobuf::RepeatedField< float >&
FaceAlignResult::landmarkscores() const {
  // @@protoc_insertion_point(field_list:dg.model.FaceAlignResult.LandMarkScores)
  return landmarkscores_;
}
inline ::google::protobuf::RepeatedField< float >*
FaceAlignResult::mutable_landmarkscores() {
  // @@protoc_insertion_point(field_mutable_list:dg.model.FaceAlignResult.LandMarkScores)
  return &landmarkscores_;
}

// optional .dg.model.Rect Box = 3;
inline bool FaceAlignResult::has_box() const {
  return !_is_default_instance_ && box_ != NULL;
}
inline void FaceAlignResult::clear_box() {
  if (GetArenaNoVirtual() == NULL && box_ != NULL) delete box_;
  box_ = NULL;
}
inline const ::dg::model::Rect& FaceAlignResult::box() const {
  // @@protoc_insertion_point(field_get:dg.model.FaceAlignResult.Box)
  return box_ != NULL ? *box_ : *default_instance_->box_;
}
inline ::dg::model::Rect* FaceAlignResult::mutable_box() {
  
  if (box_ == NULL) {
    box_ = new ::dg::model::Rect;
  }
  // @@protoc_insertion_point(field_mutable:dg.model.FaceAlignResult.Box)
  return box_;
}
inline ::dg::model::Rect* FaceAlignResult::release_box() {
  
  ::dg::model::Rect* temp = box_;
  box_ = NULL;
  return temp;
}
inline void FaceAlignResult::set_allocated_box(::dg::model::Rect* box) {
  delete box_;
  box_ = box;
  if (box) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dg.model.FaceAlignResult.Box)
}

// map<string, float> Scores = 4;
inline int FaceAlignResult::scores_size() const {
  return scores_.size();
}
inline void FaceAlignResult::clear_scores() {
  scores_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, float >&
FaceAlignResult::scores() const {
  // @@protoc_insertion_point(field_map:dg.model.FaceAlignResult.Scores)
  return scores_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, float >*
FaceAlignResult::mutable_scores() {
  // @@protoc_insertion_point(field_mutable_map:dg.model.FaceAlignResult.Scores)
  return scores_.MutableMap();
}

// -------------------------------------------------------------------

// RecFace

// optional int64 Id = 1;
inline void RecFace::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 RecFace::id() const {
  // @@protoc_insertion_point(field_get:dg.model.RecFace.Id)
  return id_;
}
inline void RecFace::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:dg.model.RecFace.Id)
}

// optional float Confidence = 2;
inline void RecFace::clear_confidence() {
  confidence_ = 0;
}
inline float RecFace::confidence() const {
  // @@protoc_insertion_point(field_get:dg.model.RecFace.Confidence)
  return confidence_;
}
inline void RecFace::set_confidence(float value) {
  
  confidence_ = value;
  // @@protoc_insertion_point(field_set:dg.model.RecFace.Confidence)
}

// optional .dg.model.CutboardImage Img = 3;
inline bool RecFace::has_img() const {
  return !_is_default_instance_ && img_ != NULL;
}
inline void RecFace::clear_img() {
  if (GetArenaNoVirtual() == NULL && img_ != NULL) delete img_;
  img_ = NULL;
}
inline const ::dg::model::CutboardImage& RecFace::img() const {
  // @@protoc_insertion_point(field_get:dg.model.RecFace.Img)
  return img_ != NULL ? *img_ : *default_instance_->img_;
}
inline ::dg::model::CutboardImage* RecFace::mutable_img() {
  
  if (img_ == NULL) {
    img_ = new ::dg::model::CutboardImage;
  }
  // @@protoc_insertion_point(field_mutable:dg.model.RecFace.Img)
  return img_;
}
inline ::dg::model::CutboardImage* RecFace::release_img() {
  
  ::dg::model::CutboardImage* temp = img_;
  img_ = NULL;
  return temp;
}
inline void RecFace::set_allocated_img(::dg::model::CutboardImage* img) {
  delete img_;
  img_ = img;
  if (img) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dg.model.RecFace.Img)
}

// optional .dg.model.FaceAlignResult AlignResult = 4;
inline bool RecFace::has_alignresult() const {
  return !_is_default_instance_ && alignresult_ != NULL;
}
inline void RecFace::clear_alignresult() {
  if (GetArenaNoVirtual() == NULL && alignresult_ != NULL) delete alignresult_;
  alignresult_ = NULL;
}
inline const ::dg::model::FaceAlignResult& RecFace::alignresult() const {
  // @@protoc_insertion_point(field_get:dg.model.RecFace.AlignResult)
  return alignresult_ != NULL ? *alignresult_ : *default_instance_->alignresult_;
}
inline ::dg::model::FaceAlignResult* RecFace::mutable_alignresult() {
  
  if (alignresult_ == NULL) {
    alignresult_ = new ::dg::model::FaceAlignResult;
  }
  // @@protoc_insertion_point(field_mutable:dg.model.RecFace.AlignResult)
  return alignresult_;
}
inline ::dg::model::FaceAlignResult* RecFace::release_alignresult() {
  
  ::dg::model::FaceAlignResult* temp = alignresult_;
  alignresult_ = NULL;
  return temp;
}
inline void RecFace::set_allocated_alignresult(::dg::model::FaceAlignResult* alignresult) {
  delete alignresult_;
  alignresult_ = alignresult;
  if (alignresult) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dg.model.RecFace.AlignResult)
}

// map<string, float> Qualities = 5;
inline int RecFace::qualities_size() const {
  return qualities_.size();
}
inline void RecFace::clear_qualities() {
  qualities_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, float >&
RecFace::qualities() const {
  // @@protoc_insertion_point(field_map:dg.model.RecFace.Qualities)
  return qualities_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, float >*
RecFace::mutable_qualities() {
  // @@protoc_insertion_point(field_mutable_map:dg.model.RecFace.Qualities)
  return qualities_.MutableMap();
}

// optional string Features = 6;
inline void RecFace::clear_features() {
  features_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RecFace::features() const {
  // @@protoc_insertion_point(field_get:dg.model.RecFace.Features)
  return features_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RecFace::set_features(const ::std::string& value) {
  
  features_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dg.model.RecFace.Features)
}
inline void RecFace::set_features(const char* value) {
  
  features_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dg.model.RecFace.Features)
}
inline void RecFace::set_features(const char* value, size_t size) {
  
  features_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dg.model.RecFace.Features)
}
inline ::std::string* RecFace::mutable_features() {
  
  // @@protoc_insertion_point(field_mutable:dg.model.RecFace.Features)
  return features_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RecFace::release_features() {
  
  return features_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RecFace::set_allocated_features(::std::string* features) {
  if (features != NULL) {
    
  } else {
    
  }
  features_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), features);
  // @@protoc_insertion_point(field_set_allocated:dg.model.RecFace.Features)
}

// repeated .dg.model.FaceAttribute Attributes = 7;
inline int RecFace::attributes_size() const {
  return attributes_.size();
}
inline void RecFace::clear_attributes() {
  attributes_.Clear();
}
inline const ::dg::model::FaceAttribute& RecFace::attributes(int index) const {
  // @@protoc_insertion_point(field_get:dg.model.RecFace.Attributes)
  return attributes_.Get(index);
}
inline ::dg::model::FaceAttribute* RecFace::mutable_attributes(int index) {
  // @@protoc_insertion_point(field_mutable:dg.model.RecFace.Attributes)
  return attributes_.Mutable(index);
}
inline ::dg::model::FaceAttribute* RecFace::add_attributes() {
  // @@protoc_insertion_point(field_add:dg.model.RecFace.Attributes)
  return attributes_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::dg::model::FaceAttribute >*
RecFace::mutable_attributes() {
  // @@protoc_insertion_point(field_mutable_list:dg.model.RecFace.Attributes)
  return &attributes_;
}
inline const ::google::protobuf::RepeatedPtrField< ::dg::model::FaceAttribute >&
RecFace::attributes() const {
  // @@protoc_insertion_point(field_list:dg.model.RecFace.Attributes)
  return attributes_;
}

// optional .dg.model.Image AlignedImage = 8;
inline bool RecFace::has_alignedimage() const {
  return !_is_default_instance_ && alignedimage_ != NULL;
}
inline void RecFace::clear_alignedimage() {
  if (GetArenaNoVirtual() == NULL && alignedimage_ != NULL) delete alignedimage_;
  alignedimage_ = NULL;
}
inline const ::dg::model::Image& RecFace::alignedimage() const {
  // @@protoc_insertion_point(field_get:dg.model.RecFace.AlignedImage)
  return alignedimage_ != NULL ? *alignedimage_ : *default_instance_->alignedimage_;
}
inline ::dg::model::Image* RecFace::mutable_alignedimage() {
  
  if (alignedimage_ == NULL) {
    alignedimage_ = new ::dg::model::Image;
  }
  // @@protoc_insertion_point(field_mutable:dg.model.RecFace.AlignedImage)
  return alignedimage_;
}
inline ::dg::model::Image* RecFace::release_alignedimage() {
  
  ::dg::model::Image* temp = alignedimage_;
  alignedimage_ = NULL;
  return temp;
}
inline void RecFace::set_allocated_alignedimage(::dg::model::Image* alignedimage) {
  delete alignedimage_;
  alignedimage_ = alignedimage;
  if (alignedimage) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dg.model.RecFace.AlignedImage)
}

// optional .dg.model.FaceAlignResult TransformedAlignResult = 9;
inline bool RecFace::has_transformedalignresult() const {
  return !_is_default_instance_ && transformedalignresult_ != NULL;
}
inline void RecFace::clear_transformedalignresult() {
  if (GetArenaNoVirtual() == NULL && transformedalignresult_ != NULL) delete transformedalignresult_;
  transformedalignresult_ = NULL;
}
inline const ::dg::model::FaceAlignResult& RecFace::transformedalignresult() const {
  // @@protoc_insertion_point(field_get:dg.model.RecFace.TransformedAlignResult)
  return transformedalignresult_ != NULL ? *transformedalignresult_ : *default_instance_->transformedalignresult_;
}
inline ::dg::model::FaceAlignResult* RecFace::mutable_transformedalignresult() {
  
  if (transformedalignresult_ == NULL) {
    transformedalignresult_ = new ::dg::model::FaceAlignResult;
  }
  // @@protoc_insertion_point(field_mutable:dg.model.RecFace.TransformedAlignResult)
  return transformedalignresult_;
}
inline ::dg::model::FaceAlignResult* RecFace::release_transformedalignresult() {
  
  ::dg::model::FaceAlignResult* temp = transformedalignresult_;
  transformedalignresult_ = NULL;
  return temp;
}
inline void RecFace::set_allocated_transformedalignresult(::dg::model::FaceAlignResult* transformedalignresult) {
  delete transformedalignresult_;
  transformedalignresult_ = transformedalignresult;
  if (transformedalignresult) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dg.model.RecFace.TransformedAlignResult)
}

// -------------------------------------------------------------------

// NameAndConfidence

// optional int32 Id = 1;
inline void NameAndConfidence::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 NameAndConfidence::id() const {
  // @@protoc_insertion_point(field_get:dg.model.NameAndConfidence.Id)
  return id_;
}
inline void NameAndConfidence::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:dg.model.NameAndConfidence.Id)
}

// optional string Name = 2;
inline void NameAndConfidence::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NameAndConfidence::name() const {
  // @@protoc_insertion_point(field_get:dg.model.NameAndConfidence.Name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NameAndConfidence::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dg.model.NameAndConfidence.Name)
}
inline void NameAndConfidence::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dg.model.NameAndConfidence.Name)
}
inline void NameAndConfidence::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dg.model.NameAndConfidence.Name)
}
inline ::std::string* NameAndConfidence::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:dg.model.NameAndConfidence.Name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NameAndConfidence::release_name() {
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NameAndConfidence::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:dg.model.NameAndConfidence.Name)
}

// optional float Confidence = 3;
inline void NameAndConfidence::clear_confidence() {
  confidence_ = 0;
}
inline float NameAndConfidence::confidence() const {
  // @@protoc_insertion_point(field_get:dg.model.NameAndConfidence.Confidence)
  return confidence_;
}
inline void NameAndConfidence::set_confidence(float value) {
  
  confidence_ = value;
  // @@protoc_insertion_point(field_set:dg.model.NameAndConfidence.Confidence)
}

// -------------------------------------------------------------------

// CategoryAndFeature

// optional int32 Id = 1;
inline void CategoryAndFeature::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 CategoryAndFeature::id() const {
  // @@protoc_insertion_point(field_get:dg.model.CategoryAndFeature.Id)
  return id_;
}
inline void CategoryAndFeature::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:dg.model.CategoryAndFeature.Id)
}

// optional string CategoryName = 2;
inline void CategoryAndFeature::clear_categoryname() {
  categoryname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CategoryAndFeature::categoryname() const {
  // @@protoc_insertion_point(field_get:dg.model.CategoryAndFeature.CategoryName)
  return categoryname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CategoryAndFeature::set_categoryname(const ::std::string& value) {
  
  categoryname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dg.model.CategoryAndFeature.CategoryName)
}
inline void CategoryAndFeature::set_categoryname(const char* value) {
  
  categoryname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dg.model.CategoryAndFeature.CategoryName)
}
inline void CategoryAndFeature::set_categoryname(const char* value, size_t size) {
  
  categoryname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dg.model.CategoryAndFeature.CategoryName)
}
inline ::std::string* CategoryAndFeature::mutable_categoryname() {
  
  // @@protoc_insertion_point(field_mutable:dg.model.CategoryAndFeature.CategoryName)
  return categoryname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CategoryAndFeature::release_categoryname() {
  
  return categoryname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CategoryAndFeature::set_allocated_categoryname(::std::string* categoryname) {
  if (categoryname != NULL) {
    
  } else {
    
  }
  categoryname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), categoryname);
  // @@protoc_insertion_point(field_set_allocated:dg.model.CategoryAndFeature.CategoryName)
}

// repeated .dg.model.NameAndConfidence Items = 3;
inline int CategoryAndFeature::items_size() const {
  return items_.size();
}
inline void CategoryAndFeature::clear_items() {
  items_.Clear();
}
inline const ::dg::model::NameAndConfidence& CategoryAndFeature::items(int index) const {
  // @@protoc_insertion_point(field_get:dg.model.CategoryAndFeature.Items)
  return items_.Get(index);
}
inline ::dg::model::NameAndConfidence* CategoryAndFeature::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:dg.model.CategoryAndFeature.Items)
  return items_.Mutable(index);
}
inline ::dg::model::NameAndConfidence* CategoryAndFeature::add_items() {
  // @@protoc_insertion_point(field_add:dg.model.CategoryAndFeature.Items)
  return items_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::dg::model::NameAndConfidence >*
CategoryAndFeature::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:dg.model.CategoryAndFeature.Items)
  return &items_;
}
inline const ::google::protobuf::RepeatedPtrField< ::dg::model::NameAndConfidence >&
CategoryAndFeature::items() const {
  // @@protoc_insertion_point(field_list:dg.model.CategoryAndFeature.Items)
  return items_;
}

// -------------------------------------------------------------------

// StorageConfig

// optional string Address = 1;
inline void StorageConfig::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StorageConfig::address() const {
  // @@protoc_insertion_point(field_get:dg.model.StorageConfig.Address)
  return address_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StorageConfig::set_address(const ::std::string& value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dg.model.StorageConfig.Address)
}
inline void StorageConfig::set_address(const char* value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dg.model.StorageConfig.Address)
}
inline void StorageConfig::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dg.model.StorageConfig.Address)
}
inline ::std::string* StorageConfig::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:dg.model.StorageConfig.Address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StorageConfig::release_address() {
  
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StorageConfig::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:dg.model.StorageConfig.Address)
}

// optional .dg.model.DBType Type = 2;
inline void StorageConfig::clear_type() {
  type_ = 0;
}
inline ::dg::model::DBType StorageConfig::type() const {
  // @@protoc_insertion_point(field_get:dg.model.StorageConfig.Type)
  return static_cast< ::dg::model::DBType >(type_);
}
inline void StorageConfig::set_type(::dg::model::DBType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:dg.model.StorageConfig.Type)
}

// repeated string Tags = 3;
inline int StorageConfig::tags_size() const {
  return tags_.size();
}
inline void StorageConfig::clear_tags() {
  tags_.Clear();
}
inline const ::std::string& StorageConfig::tags(int index) const {
  // @@protoc_insertion_point(field_get:dg.model.StorageConfig.Tags)
  return tags_.Get(index);
}
inline ::std::string* StorageConfig::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:dg.model.StorageConfig.Tags)
  return tags_.Mutable(index);
}
inline void StorageConfig::set_tags(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:dg.model.StorageConfig.Tags)
  tags_.Mutable(index)->assign(value);
}
inline void StorageConfig::set_tags(int index, const char* value) {
  tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:dg.model.StorageConfig.Tags)
}
inline void StorageConfig::set_tags(int index, const char* value, size_t size) {
  tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dg.model.StorageConfig.Tags)
}
inline ::std::string* StorageConfig::add_tags() {
  return tags_.Add();
}
inline void StorageConfig::add_tags(const ::std::string& value) {
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:dg.model.StorageConfig.Tags)
}
inline void StorageConfig::add_tags(const char* value) {
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:dg.model.StorageConfig.Tags)
}
inline void StorageConfig::add_tags(const char* value, size_t size) {
  tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:dg.model.StorageConfig.Tags)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
StorageConfig::tags() const {
  // @@protoc_insertion_point(field_list:dg.model.StorageConfig.Tags)
  return tags_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
StorageConfig::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:dg.model.StorageConfig.Tags)
  return &tags_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace model
}  // namespace dg

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::dg::model::ObjType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dg::model::ObjType>() {
  return ::dg::model::ObjType_descriptor();
}
template <> struct is_proto_enum< ::dg::model::DataFmtType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dg::model::DataFmtType>() {
  return ::dg::model::DataFmtType_descriptor();
}
template <> struct is_proto_enum< ::dg::model::ThreeStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dg::model::ThreeStatus>() {
  return ::dg::model::ThreeStatus_descriptor();
}
template <> struct is_proto_enum< ::dg::model::DBType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dg::model::DBType>() {
  return ::dg::model::DBType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_common_2eproto__INCLUDED
