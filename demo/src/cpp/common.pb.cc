// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "common.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace dg {
namespace model {

namespace {

const ::google::protobuf::Descriptor* SrcMetadata_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SrcMetadata_reflection_ = NULL;
const ::google::protobuf::Descriptor* PingRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PingRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* PingResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PingResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* Cutboard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Cutboard_reflection_ = NULL;
const ::google::protobuf::Descriptor* PointF_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PointF_reflection_ = NULL;
const ::google::protobuf::Descriptor* Rect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Rect_reflection_ = NULL;
const ::google::protobuf::Descriptor* RotatedRect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RotatedRect_reflection_ = NULL;
const ::google::protobuf::Descriptor* CutboardImage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CutboardImage_reflection_ = NULL;
const ::google::protobuf::Descriptor* Color_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Color_reflection_ = NULL;
const ::google::protobuf::Descriptor* FeatureVector_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FeatureVector_reflection_ = NULL;
const ::google::protobuf::Descriptor* NullMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NullMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* Attribute_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Attribute_reflection_ = NULL;
const ::google::protobuf::Descriptor* FaceAttribute_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FaceAttribute_reflection_ = NULL;
struct FaceAttributeOneofInstance {
  bool valuebool_;
  ::google::protobuf::int32 valueint_;
  float valuefloat_;
  ::google::protobuf::internal::ArenaStringPtr valuestring_;
}* FaceAttribute_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* Image_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Image_reflection_ = NULL;
const ::google::protobuf::Descriptor* FaceAlignResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FaceAlignResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* FaceAlignResult_ScoresEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* RecFace_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RecFace_reflection_ = NULL;
const ::google::protobuf::Descriptor* RecFace_QualitiesEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NameAndConfidence_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NameAndConfidence_reflection_ = NULL;
const ::google::protobuf::Descriptor* CategoryAndFeature_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CategoryAndFeature_reflection_ = NULL;
const ::google::protobuf::Descriptor* StorageConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StorageConfig_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ObjType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DataFmtType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ThreeStatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DBType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_common_2eproto() {
  protobuf_AddDesc_common_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "common.proto");
  GOOGLE_CHECK(file != NULL);
  SrcMetadata_descriptor_ = file->message_type(0);
  static const int SrcMetadata_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrcMetadata, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrcMetadata, duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrcMetadata, sensorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrcMetadata, sensorname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrcMetadata, sensorurl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrcMetadata, repoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrcMetadata, repoinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrcMetadata, objtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrcMetadata, sensoridstr_),
  };
  SrcMetadata_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SrcMetadata_descriptor_,
      SrcMetadata::default_instance_,
      SrcMetadata_offsets_,
      -1,
      -1,
      -1,
      sizeof(SrcMetadata),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrcMetadata, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SrcMetadata, _is_default_instance_));
  PingRequest_descriptor_ = file->message_type(1);
  static const int PingRequest_offsets_[1] = {
  };
  PingRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PingRequest_descriptor_,
      PingRequest::default_instance_,
      PingRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(PingRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PingRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PingRequest, _is_default_instance_));
  PingResponse_descriptor_ = file->message_type(2);
  static const int PingResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PingResponse, message_),
  };
  PingResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PingResponse_descriptor_,
      PingResponse::default_instance_,
      PingResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(PingResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PingResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PingResponse, _is_default_instance_));
  Cutboard_descriptor_ = file->message_type(3);
  static const int Cutboard_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cutboard, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cutboard, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cutboard, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cutboard, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cutboard, reswidth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cutboard, resheight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cutboard, confidence_),
  };
  Cutboard_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Cutboard_descriptor_,
      Cutboard::default_instance_,
      Cutboard_offsets_,
      -1,
      -1,
      -1,
      sizeof(Cutboard),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cutboard, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cutboard, _is_default_instance_));
  PointF_descriptor_ = file->message_type(4);
  static const int PointF_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointF, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointF, y_),
  };
  PointF_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PointF_descriptor_,
      PointF::default_instance_,
      PointF_offsets_,
      -1,
      -1,
      -1,
      sizeof(PointF),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointF, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointF, _is_default_instance_));
  Rect_descriptor_ = file->message_type(5);
  static const int Rect_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rect, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rect, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rect, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rect, height_),
  };
  Rect_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Rect_descriptor_,
      Rect::default_instance_,
      Rect_offsets_,
      -1,
      -1,
      -1,
      sizeof(Rect),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rect, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rect, _is_default_instance_));
  RotatedRect_descriptor_ = file->message_type(6);
  static const int RotatedRect_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotatedRect, centerx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotatedRect, centery_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotatedRect, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotatedRect, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotatedRect, angle_),
  };
  RotatedRect_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RotatedRect_descriptor_,
      RotatedRect::default_instance_,
      RotatedRect_offsets_,
      -1,
      -1,
      -1,
      sizeof(RotatedRect),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotatedRect, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotatedRect, _is_default_instance_));
  CutboardImage_descriptor_ = file->message_type(7);
  static const int CutboardImage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CutboardImage, cutboard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CutboardImage, img_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CutboardImage, rect_),
  };
  CutboardImage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CutboardImage_descriptor_,
      CutboardImage::default_instance_,
      CutboardImage_offsets_,
      -1,
      -1,
      -1,
      sizeof(CutboardImage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CutboardImage, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CutboardImage, _is_default_instance_));
  Color_descriptor_ = file->message_type(8);
  static const int Color_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Color, colorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Color, confidence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Color, colorname_),
  };
  Color_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Color_descriptor_,
      Color::default_instance_,
      Color_offsets_,
      -1,
      -1,
      -1,
      sizeof(Color),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Color, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Color, _is_default_instance_));
  FeatureVector_descriptor_ = file->message_type(9);
  static const int FeatureVector_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureVector, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureVector, feature_),
  };
  FeatureVector_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FeatureVector_descriptor_,
      FeatureVector::default_instance_,
      FeatureVector_offsets_,
      -1,
      -1,
      -1,
      sizeof(FeatureVector),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureVector, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureVector, _is_default_instance_));
  NullMessage_descriptor_ = file->message_type(10);
  static const int NullMessage_offsets_[1] = {
  };
  NullMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NullMessage_descriptor_,
      NullMessage::default_instance_,
      NullMessage_offsets_,
      -1,
      -1,
      -1,
      sizeof(NullMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NullMessage, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NullMessage, _is_default_instance_));
  Attribute_descriptor_ = file->message_type(11);
  static const int Attribute_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attribute, attributeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attribute, attributename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attribute, valueid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attribute, valuestring_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attribute, confidence_),
  };
  Attribute_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Attribute_descriptor_,
      Attribute::default_instance_,
      Attribute_offsets_,
      -1,
      -1,
      -1,
      sizeof(Attribute),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attribute, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attribute, _is_default_instance_));
  FaceAttribute_descriptor_ = file->message_type(12);
  static const int FaceAttribute_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceAttribute, attributeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceAttribute, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceAttribute, valueid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceAttribute, confidence_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(FaceAttribute_default_oneof_instance_, valuebool_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(FaceAttribute_default_oneof_instance_, valueint_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(FaceAttribute_default_oneof_instance_, valuefloat_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(FaceAttribute_default_oneof_instance_, valuestring_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceAttribute, Value_),
  };
  FaceAttribute_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FaceAttribute_descriptor_,
      FaceAttribute::default_instance_,
      FaceAttribute_offsets_,
      -1,
      -1,
      -1,
      FaceAttribute_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceAttribute, _oneof_case_[0]),
      sizeof(FaceAttribute),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceAttribute, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceAttribute, _is_default_instance_));
  Image_descriptor_ = file->message_type(13);
  static const int Image_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image, uri_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image, bindata_),
  };
  Image_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Image_descriptor_,
      Image::default_instance_,
      Image_offsets_,
      -1,
      -1,
      -1,
      sizeof(Image),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image, _is_default_instance_));
  FaceAlignResult_descriptor_ = file->message_type(14);
  static const int FaceAlignResult_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceAlignResult, landmarks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceAlignResult, landmarkscores_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceAlignResult, box_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceAlignResult, scores_),
  };
  FaceAlignResult_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FaceAlignResult_descriptor_,
      FaceAlignResult::default_instance_,
      FaceAlignResult_offsets_,
      -1,
      -1,
      -1,
      sizeof(FaceAlignResult),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceAlignResult, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceAlignResult, _is_default_instance_));
  FaceAlignResult_ScoresEntry_descriptor_ = FaceAlignResult_descriptor_->nested_type(0);
  RecFace_descriptor_ = file->message_type(15);
  static const int RecFace_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecFace, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecFace, confidence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecFace, img_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecFace, alignresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecFace, qualities_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecFace, features_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecFace, attributes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecFace, alignedimage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecFace, transformedalignresult_),
  };
  RecFace_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RecFace_descriptor_,
      RecFace::default_instance_,
      RecFace_offsets_,
      -1,
      -1,
      -1,
      sizeof(RecFace),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecFace, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecFace, _is_default_instance_));
  RecFace_QualitiesEntry_descriptor_ = RecFace_descriptor_->nested_type(0);
  NameAndConfidence_descriptor_ = file->message_type(16);
  static const int NameAndConfidence_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NameAndConfidence, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NameAndConfidence, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NameAndConfidence, confidence_),
  };
  NameAndConfidence_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NameAndConfidence_descriptor_,
      NameAndConfidence::default_instance_,
      NameAndConfidence_offsets_,
      -1,
      -1,
      -1,
      sizeof(NameAndConfidence),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NameAndConfidence, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NameAndConfidence, _is_default_instance_));
  CategoryAndFeature_descriptor_ = file->message_type(17);
  static const int CategoryAndFeature_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CategoryAndFeature, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CategoryAndFeature, categoryname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CategoryAndFeature, items_),
  };
  CategoryAndFeature_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CategoryAndFeature_descriptor_,
      CategoryAndFeature::default_instance_,
      CategoryAndFeature_offsets_,
      -1,
      -1,
      -1,
      sizeof(CategoryAndFeature),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CategoryAndFeature, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CategoryAndFeature, _is_default_instance_));
  StorageConfig_descriptor_ = file->message_type(18);
  static const int StorageConfig_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageConfig, address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageConfig, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageConfig, tags_),
  };
  StorageConfig_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StorageConfig_descriptor_,
      StorageConfig::default_instance_,
      StorageConfig_offsets_,
      -1,
      -1,
      -1,
      sizeof(StorageConfig),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageConfig, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageConfig, _is_default_instance_));
  ObjType_descriptor_ = file->enum_type(0);
  DataFmtType_descriptor_ = file->enum_type(1);
  ThreeStatus_descriptor_ = file->enum_type(2);
  DBType_descriptor_ = file->enum_type(3);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_common_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SrcMetadata_descriptor_, &SrcMetadata::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PingRequest_descriptor_, &PingRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PingResponse_descriptor_, &PingResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Cutboard_descriptor_, &Cutboard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PointF_descriptor_, &PointF::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Rect_descriptor_, &Rect::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RotatedRect_descriptor_, &RotatedRect::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CutboardImage_descriptor_, &CutboardImage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Color_descriptor_, &Color::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FeatureVector_descriptor_, &FeatureVector::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NullMessage_descriptor_, &NullMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Attribute_descriptor_, &Attribute::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FaceAttribute_descriptor_, &FaceAttribute::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Image_descriptor_, &Image::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FaceAlignResult_descriptor_, &FaceAlignResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        FaceAlignResult_ScoresEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            float,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT,
            0>::CreateDefaultInstance(
                FaceAlignResult_ScoresEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RecFace_descriptor_, &RecFace::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        RecFace_QualitiesEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            float,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT,
            0>::CreateDefaultInstance(
                RecFace_QualitiesEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NameAndConfidence_descriptor_, &NameAndConfidence::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CategoryAndFeature_descriptor_, &CategoryAndFeature::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StorageConfig_descriptor_, &StorageConfig::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_common_2eproto() {
  delete SrcMetadata::default_instance_;
  delete SrcMetadata_reflection_;
  delete PingRequest::default_instance_;
  delete PingRequest_reflection_;
  delete PingResponse::default_instance_;
  delete PingResponse_reflection_;
  delete Cutboard::default_instance_;
  delete Cutboard_reflection_;
  delete PointF::default_instance_;
  delete PointF_reflection_;
  delete Rect::default_instance_;
  delete Rect_reflection_;
  delete RotatedRect::default_instance_;
  delete RotatedRect_reflection_;
  delete CutboardImage::default_instance_;
  delete CutboardImage_reflection_;
  delete Color::default_instance_;
  delete Color_reflection_;
  delete FeatureVector::default_instance_;
  delete FeatureVector_reflection_;
  delete NullMessage::default_instance_;
  delete NullMessage_reflection_;
  delete Attribute::default_instance_;
  delete Attribute_reflection_;
  delete FaceAttribute::default_instance_;
  delete FaceAttribute_default_oneof_instance_;
  delete FaceAttribute_reflection_;
  delete Image::default_instance_;
  delete Image_reflection_;
  delete FaceAlignResult::default_instance_;
  delete FaceAlignResult_reflection_;
  delete RecFace::default_instance_;
  delete RecFace_reflection_;
  delete NameAndConfidence::default_instance_;
  delete NameAndConfidence_reflection_;
  delete CategoryAndFeature::default_instance_;
  delete CategoryAndFeature_reflection_;
  delete StorageConfig::default_instance_;
  delete StorageConfig_reflection_;
}

void protobuf_AddDesc_common_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014common.proto\022\010dg.model\"\306\001\n\013SrcMetadata"
    "\022\021\n\tTimestamp\030\001 \001(\003\022\020\n\010Duration\030\002 \001(\005\022\020\n"
    "\010SensorId\030\003 \001(\005\022\022\n\nSensorName\030\004 \001(\t\022\021\n\tS"
    "ensorUrl\030\005 \001(\t\022\016\n\006RepoId\030\006 \001(\005\022\020\n\010RepoIn"
    "fo\030\007 \001(\t\022\"\n\007ObjType\030\010 \001(\0162\021.dg.model.Obj"
    "Type\022\023\n\013SensorIdStr\030\t \001(\t\"\r\n\013PingRequest"
    "\"\037\n\014PingResponse\022\017\n\007Message\030\001 \001(\t\"x\n\010Cut"
    "board\022\t\n\001X\030\001 \001(\005\022\t\n\001Y\030\002 \001(\005\022\r\n\005Width\030\003 \001"
    "(\005\022\016\n\006Height\030\004 \001(\005\022\020\n\010ResWidth\030\005 \001(\005\022\021\n\t"
    "ResHeight\030\006 \001(\005\022\022\n\nConfidence\030\007 \001(\002\"\036\n\006P"
    "ointF\022\t\n\001X\030\001 \001(\002\022\t\n\001Y\030\002 \001(\002\";\n\004Rect\022\t\n\001X"
    "\030\001 \001(\005\022\t\n\001Y\030\002 \001(\005\022\r\n\005Width\030\003 \001(\005\022\016\n\006Heig"
    "ht\030\004 \001(\005\"]\n\013RotatedRect\022\017\n\007CenterX\030\001 \001(\002"
    "\022\017\n\007CenterY\030\002 \001(\002\022\r\n\005Width\030\003 \001(\002\022\016\n\006Heig"
    "ht\030\004 \001(\002\022\r\n\005Angle\030\005 \001(\002\"x\n\rCutboardImage"
    "\022$\n\010Cutboard\030\001 \001(\0132\022.dg.model.Cutboard\022\034"
    "\n\003Img\030\002 \001(\0132\017.dg.model.Image\022#\n\004Rect\030\003 \001"
    "(\0132\025.dg.model.RotatedRect\"\?\n\005Color\022\017\n\007Co"
    "lorId\030\001 \001(\005\022\022\n\nConfidence\030\002 \001(\002\022\021\n\tColor"
    "Name\030\003 \001(\t\",\n\rFeatureVector\022\n\n\002Id\030\001 \001(\003\022"
    "\017\n\007Feature\030\002 \001(\t\"\r\n\013NullMessage\"q\n\tAttri"
    "bute\022\023\n\013AttributeId\030\001 \001(\005\022\025\n\rAttributeNa"
    "me\030\002 \001(\t\022\017\n\007ValueId\030\003 \001(\005\022\023\n\013ValueString"
    "\030\004 \001(\t\022\022\n\nConfidence\030\005 \001(\002\"\266\001\n\rFaceAttri"
    "bute\022\023\n\013AttributeId\030\001 \001(\005\022\014\n\004Name\030\002 \001(\t\022"
    "\017\n\007ValueId\030\003 \001(\005\022\022\n\nConfidence\030\004 \001(\002\022\023\n\t"
    "ValueBool\030\t \001(\010H\000\022\022\n\010ValueInt\030\n \001(\005H\000\022\024\n"
    "\nValueFloat\030\013 \001(\002H\000\022\025\n\013ValueString\030\014 \001(\t"
    "H\000B\007\n\005Value\"P\n\005Image\022\n\n\002Id\030\001 \001(\t\022\r\n\005Widt"
    "h\030\002 \001(\005\022\016\n\006Height\030\003 \001(\005\022\013\n\003URI\030\004 \001(\t\022\017\n\007"
    "BinData\030\005 \001(\t\"\321\001\n\017FaceAlignResult\022#\n\tLan"
    "dMarks\030\001 \003(\0132\020.dg.model.PointF\022\026\n\016LandMa"
    "rkScores\030\002 \003(\002\022\033\n\003Box\030\003 \001(\0132\016.dg.model.R"
    "ect\0225\n\006Scores\030\004 \003(\0132%.dg.model.FaceAlign"
    "Result.ScoresEntry\032-\n\013ScoresEntry\022\013\n\003key"
    "\030\001 \001(\t\022\r\n\005value\030\002 \001(\002:\0028\001\"\207\003\n\007RecFace\022\n\n"
    "\002Id\030\001 \001(\003\022\022\n\nConfidence\030\002 \001(\002\022$\n\003Img\030\003 \001"
    "(\0132\027.dg.model.CutboardImage\022.\n\013AlignResu"
    "lt\030\004 \001(\0132\031.dg.model.FaceAlignResult\0223\n\tQ"
    "ualities\030\005 \003(\0132 .dg.model.RecFace.Qualit"
    "iesEntry\022\020\n\010Features\030\006 \001(\t\022+\n\nAttributes"
    "\030\007 \003(\0132\027.dg.model.FaceAttribute\022%\n\014Align"
    "edImage\030\010 \001(\0132\017.dg.model.Image\0229\n\026Transf"
    "ormedAlignResult\030\t \001(\0132\031.dg.model.FaceAl"
    "ignResult\0320\n\016QualitiesEntry\022\013\n\003key\030\001 \001(\t"
    "\022\r\n\005value\030\002 \001(\002:\0028\001\"A\n\021NameAndConfidence"
    "\022\n\n\002Id\030\001 \001(\005\022\014\n\004Name\030\002 \001(\t\022\022\n\nConfidence"
    "\030\003 \001(\002\"b\n\022CategoryAndFeature\022\n\n\002Id\030\001 \001(\005"
    "\022\024\n\014CategoryName\030\002 \001(\t\022*\n\005Items\030\003 \003(\0132\033."
    "dg.model.NameAndConfidence\"N\n\rStorageCon"
    "fig\022\017\n\007Address\030\001 \001(\t\022\036\n\004Type\030\002 \001(\0162\020.dg."
    "model.DBType\022\014\n\004Tags\030\003 \003(\t*k\n\007ObjType\022\024\n"
    "\020OBJ_TYPE_UNKNOWN\020\000\022\022\n\rOBJ_TYPE_FACE\020\200\010\022"
    "\031\n\024OBJ_TYPE_FACE_VECTOR\020\200\030\022\033\n\026OBJ_TYPE_F"
    "ACE_CUTBOARD\020\200(*G\n\013DataFmtType\022\016\n\nUNKNOW"
    "NFMT\020\000\022\010\n\004JSON\020\001\022\014\n\010PROTOBUF\020\002\022\007\n\003CSV\020\003\022"
    "\007\n\003PDF\020\004*_\n\013ThreeStatus\022\026\n\022THREE_STATUS_"
    "FALSE\020\000\022\025\n\021THREE_STATUS_TRUE\020\001\022!\n\024THREE_"
    "STATUS_UNKNOWN\020\377\377\377\377\377\377\377\377\377\001*0\n\006DBType\022\t\n\005K"
    "AFKA\020\000\022\014\n\010POSTGRES\020\001\022\r\n\tFILEIMAGE\020\002b\006pro"
    "to3", 2403);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "common.proto", &protobuf_RegisterTypes);
  SrcMetadata::default_instance_ = new SrcMetadata();
  PingRequest::default_instance_ = new PingRequest();
  PingResponse::default_instance_ = new PingResponse();
  Cutboard::default_instance_ = new Cutboard();
  PointF::default_instance_ = new PointF();
  Rect::default_instance_ = new Rect();
  RotatedRect::default_instance_ = new RotatedRect();
  CutboardImage::default_instance_ = new CutboardImage();
  Color::default_instance_ = new Color();
  FeatureVector::default_instance_ = new FeatureVector();
  NullMessage::default_instance_ = new NullMessage();
  Attribute::default_instance_ = new Attribute();
  FaceAttribute::default_instance_ = new FaceAttribute();
  FaceAttribute_default_oneof_instance_ = new FaceAttributeOneofInstance();
  Image::default_instance_ = new Image();
  FaceAlignResult::default_instance_ = new FaceAlignResult();
  RecFace::default_instance_ = new RecFace();
  NameAndConfidence::default_instance_ = new NameAndConfidence();
  CategoryAndFeature::default_instance_ = new CategoryAndFeature();
  StorageConfig::default_instance_ = new StorageConfig();
  SrcMetadata::default_instance_->InitAsDefaultInstance();
  PingRequest::default_instance_->InitAsDefaultInstance();
  PingResponse::default_instance_->InitAsDefaultInstance();
  Cutboard::default_instance_->InitAsDefaultInstance();
  PointF::default_instance_->InitAsDefaultInstance();
  Rect::default_instance_->InitAsDefaultInstance();
  RotatedRect::default_instance_->InitAsDefaultInstance();
  CutboardImage::default_instance_->InitAsDefaultInstance();
  Color::default_instance_->InitAsDefaultInstance();
  FeatureVector::default_instance_->InitAsDefaultInstance();
  NullMessage::default_instance_->InitAsDefaultInstance();
  Attribute::default_instance_->InitAsDefaultInstance();
  FaceAttribute::default_instance_->InitAsDefaultInstance();
  Image::default_instance_->InitAsDefaultInstance();
  FaceAlignResult::default_instance_->InitAsDefaultInstance();
  RecFace::default_instance_->InitAsDefaultInstance();
  NameAndConfidence::default_instance_->InitAsDefaultInstance();
  CategoryAndFeature::default_instance_->InitAsDefaultInstance();
  StorageConfig::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_common_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_common_2eproto {
  StaticDescriptorInitializer_common_2eproto() {
    protobuf_AddDesc_common_2eproto();
  }
} static_descriptor_initializer_common_2eproto_;
const ::google::protobuf::EnumDescriptor* ObjType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ObjType_descriptor_;
}
bool ObjType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1024:
    case 3072:
    case 5120:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DataFmtType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataFmtType_descriptor_;
}
bool DataFmtType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ThreeStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ThreeStatus_descriptor_;
}
bool ThreeStatus_IsValid(int value) {
  switch(value) {
    case -1:
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DBType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DBType_descriptor_;
}
bool DBType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SrcMetadata::kTimestampFieldNumber;
const int SrcMetadata::kDurationFieldNumber;
const int SrcMetadata::kSensorIdFieldNumber;
const int SrcMetadata::kSensorNameFieldNumber;
const int SrcMetadata::kSensorUrlFieldNumber;
const int SrcMetadata::kRepoIdFieldNumber;
const int SrcMetadata::kRepoInfoFieldNumber;
const int SrcMetadata::kObjTypeFieldNumber;
const int SrcMetadata::kSensorIdStrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SrcMetadata::SrcMetadata()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dg.model.SrcMetadata)
}

void SrcMetadata::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SrcMetadata::SrcMetadata(const SrcMetadata& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dg.model.SrcMetadata)
}

void SrcMetadata::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  timestamp_ = GOOGLE_LONGLONG(0);
  duration_ = 0;
  sensorid_ = 0;
  sensorname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sensorurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  repoid_ = 0;
  repoinfo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  objtype_ = 0;
  sensoridstr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

SrcMetadata::~SrcMetadata() {
  // @@protoc_insertion_point(destructor:dg.model.SrcMetadata)
  SharedDtor();
}

void SrcMetadata::SharedDtor() {
  sensorname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sensorurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  repoinfo_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sensoridstr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void SrcMetadata::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SrcMetadata::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SrcMetadata_descriptor_;
}

const SrcMetadata& SrcMetadata::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

SrcMetadata* SrcMetadata::default_instance_ = NULL;

SrcMetadata* SrcMetadata::New(::google::protobuf::Arena* arena) const {
  SrcMetadata* n = new SrcMetadata;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SrcMetadata::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SrcMetadata*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(timestamp_, sensorid_);
  ZR_(repoid_, objtype_);
  sensorname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sensorurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  repoinfo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sensoridstr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool SrcMetadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dg.model.SrcMetadata)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 Timestamp = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Duration;
        break;
      }

      // optional int32 Duration = 2;
      case 2: {
        if (tag == 16) {
         parse_Duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &duration_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_SensorId;
        break;
      }

      // optional int32 SensorId = 3;
      case 3: {
        if (tag == 24) {
         parse_SensorId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sensorid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_SensorName;
        break;
      }

      // optional string SensorName = 4;
      case 4: {
        if (tag == 34) {
         parse_SensorName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sensorname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sensorname().data(), this->sensorname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "dg.model.SrcMetadata.SensorName"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_SensorUrl;
        break;
      }

      // optional string SensorUrl = 5;
      case 5: {
        if (tag == 42) {
         parse_SensorUrl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sensorurl()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sensorurl().data(), this->sensorurl().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "dg.model.SrcMetadata.SensorUrl"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_RepoId;
        break;
      }

      // optional int32 RepoId = 6;
      case 6: {
        if (tag == 48) {
         parse_RepoId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &repoid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_RepoInfo;
        break;
      }

      // optional string RepoInfo = 7;
      case 7: {
        if (tag == 58) {
         parse_RepoInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_repoinfo()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->repoinfo().data(), this->repoinfo().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "dg.model.SrcMetadata.RepoInfo"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_ObjType;
        break;
      }

      // optional .dg.model.ObjType ObjType = 8;
      case 8: {
        if (tag == 64) {
         parse_ObjType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_objtype(static_cast< ::dg::model::ObjType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_SensorIdStr;
        break;
      }

      // optional string SensorIdStr = 9;
      case 9: {
        if (tag == 74) {
         parse_SensorIdStr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sensoridstr()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sensoridstr().data(), this->sensoridstr().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "dg.model.SrcMetadata.SensorIdStr"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dg.model.SrcMetadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dg.model.SrcMetadata)
  return false;
#undef DO_
}

void SrcMetadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dg.model.SrcMetadata)
  // optional int64 Timestamp = 1;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp(), output);
  }

  // optional int32 Duration = 2;
  if (this->duration() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->duration(), output);
  }

  // optional int32 SensorId = 3;
  if (this->sensorid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->sensorid(), output);
  }

  // optional string SensorName = 4;
  if (this->sensorname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sensorname().data(), this->sensorname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.model.SrcMetadata.SensorName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->sensorname(), output);
  }

  // optional string SensorUrl = 5;
  if (this->sensorurl().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sensorurl().data(), this->sensorurl().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.model.SrcMetadata.SensorUrl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->sensorurl(), output);
  }

  // optional int32 RepoId = 6;
  if (this->repoid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->repoid(), output);
  }

  // optional string RepoInfo = 7;
  if (this->repoinfo().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->repoinfo().data(), this->repoinfo().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.model.SrcMetadata.RepoInfo");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->repoinfo(), output);
  }

  // optional .dg.model.ObjType ObjType = 8;
  if (this->objtype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->objtype(), output);
  }

  // optional string SensorIdStr = 9;
  if (this->sensoridstr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sensoridstr().data(), this->sensoridstr().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.model.SrcMetadata.SensorIdStr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->sensoridstr(), output);
  }

  // @@protoc_insertion_point(serialize_end:dg.model.SrcMetadata)
}

::google::protobuf::uint8* SrcMetadata::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dg.model.SrcMetadata)
  // optional int64 Timestamp = 1;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->timestamp(), target);
  }

  // optional int32 Duration = 2;
  if (this->duration() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->duration(), target);
  }

  // optional int32 SensorId = 3;
  if (this->sensorid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->sensorid(), target);
  }

  // optional string SensorName = 4;
  if (this->sensorname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sensorname().data(), this->sensorname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.model.SrcMetadata.SensorName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->sensorname(), target);
  }

  // optional string SensorUrl = 5;
  if (this->sensorurl().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sensorurl().data(), this->sensorurl().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.model.SrcMetadata.SensorUrl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->sensorurl(), target);
  }

  // optional int32 RepoId = 6;
  if (this->repoid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->repoid(), target);
  }

  // optional string RepoInfo = 7;
  if (this->repoinfo().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->repoinfo().data(), this->repoinfo().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.model.SrcMetadata.RepoInfo");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->repoinfo(), target);
  }

  // optional .dg.model.ObjType ObjType = 8;
  if (this->objtype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->objtype(), target);
  }

  // optional string SensorIdStr = 9;
  if (this->sensoridstr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sensoridstr().data(), this->sensoridstr().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.model.SrcMetadata.SensorIdStr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->sensoridstr(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:dg.model.SrcMetadata)
  return target;
}

int SrcMetadata::ByteSize() const {
  int total_size = 0;

  // optional int64 Timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  // optional int32 Duration = 2;
  if (this->duration() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->duration());
  }

  // optional int32 SensorId = 3;
  if (this->sensorid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sensorid());
  }

  // optional string SensorName = 4;
  if (this->sensorname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sensorname());
  }

  // optional string SensorUrl = 5;
  if (this->sensorurl().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sensorurl());
  }

  // optional int32 RepoId = 6;
  if (this->repoid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->repoid());
  }

  // optional string RepoInfo = 7;
  if (this->repoinfo().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->repoinfo());
  }

  // optional .dg.model.ObjType ObjType = 8;
  if (this->objtype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->objtype());
  }

  // optional string SensorIdStr = 9;
  if (this->sensoridstr().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sensoridstr());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SrcMetadata::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SrcMetadata* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SrcMetadata>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SrcMetadata::MergeFrom(const SrcMetadata& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.duration() != 0) {
    set_duration(from.duration());
  }
  if (from.sensorid() != 0) {
    set_sensorid(from.sensorid());
  }
  if (from.sensorname().size() > 0) {

    sensorname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sensorname_);
  }
  if (from.sensorurl().size() > 0) {

    sensorurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sensorurl_);
  }
  if (from.repoid() != 0) {
    set_repoid(from.repoid());
  }
  if (from.repoinfo().size() > 0) {

    repoinfo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.repoinfo_);
  }
  if (from.objtype() != 0) {
    set_objtype(from.objtype());
  }
  if (from.sensoridstr().size() > 0) {

    sensoridstr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sensoridstr_);
  }
}

void SrcMetadata::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SrcMetadata::CopyFrom(const SrcMetadata& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SrcMetadata::IsInitialized() const {

  return true;
}

void SrcMetadata::Swap(SrcMetadata* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SrcMetadata::InternalSwap(SrcMetadata* other) {
  std::swap(timestamp_, other->timestamp_);
  std::swap(duration_, other->duration_);
  std::swap(sensorid_, other->sensorid_);
  sensorname_.Swap(&other->sensorname_);
  sensorurl_.Swap(&other->sensorurl_);
  std::swap(repoid_, other->repoid_);
  repoinfo_.Swap(&other->repoinfo_);
  std::swap(objtype_, other->objtype_);
  sensoridstr_.Swap(&other->sensoridstr_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SrcMetadata::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SrcMetadata_descriptor_;
  metadata.reflection = SrcMetadata_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SrcMetadata

// optional int64 Timestamp = 1;
void SrcMetadata::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 SrcMetadata::timestamp() const {
  // @@protoc_insertion_point(field_get:dg.model.SrcMetadata.Timestamp)
  return timestamp_;
}
 void SrcMetadata::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:dg.model.SrcMetadata.Timestamp)
}

// optional int32 Duration = 2;
void SrcMetadata::clear_duration() {
  duration_ = 0;
}
 ::google::protobuf::int32 SrcMetadata::duration() const {
  // @@protoc_insertion_point(field_get:dg.model.SrcMetadata.Duration)
  return duration_;
}
 void SrcMetadata::set_duration(::google::protobuf::int32 value) {
  
  duration_ = value;
  // @@protoc_insertion_point(field_set:dg.model.SrcMetadata.Duration)
}

// optional int32 SensorId = 3;
void SrcMetadata::clear_sensorid() {
  sensorid_ = 0;
}
 ::google::protobuf::int32 SrcMetadata::sensorid() const {
  // @@protoc_insertion_point(field_get:dg.model.SrcMetadata.SensorId)
  return sensorid_;
}
 void SrcMetadata::set_sensorid(::google::protobuf::int32 value) {
  
  sensorid_ = value;
  // @@protoc_insertion_point(field_set:dg.model.SrcMetadata.SensorId)
}

// optional string SensorName = 4;
void SrcMetadata::clear_sensorname() {
  sensorname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& SrcMetadata::sensorname() const {
  // @@protoc_insertion_point(field_get:dg.model.SrcMetadata.SensorName)
  return sensorname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SrcMetadata::set_sensorname(const ::std::string& value) {
  
  sensorname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dg.model.SrcMetadata.SensorName)
}
 void SrcMetadata::set_sensorname(const char* value) {
  
  sensorname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dg.model.SrcMetadata.SensorName)
}
 void SrcMetadata::set_sensorname(const char* value, size_t size) {
  
  sensorname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dg.model.SrcMetadata.SensorName)
}
 ::std::string* SrcMetadata::mutable_sensorname() {
  
  // @@protoc_insertion_point(field_mutable:dg.model.SrcMetadata.SensorName)
  return sensorname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SrcMetadata::release_sensorname() {
  
  return sensorname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SrcMetadata::set_allocated_sensorname(::std::string* sensorname) {
  if (sensorname != NULL) {
    
  } else {
    
  }
  sensorname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sensorname);
  // @@protoc_insertion_point(field_set_allocated:dg.model.SrcMetadata.SensorName)
}

// optional string SensorUrl = 5;
void SrcMetadata::clear_sensorurl() {
  sensorurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& SrcMetadata::sensorurl() const {
  // @@protoc_insertion_point(field_get:dg.model.SrcMetadata.SensorUrl)
  return sensorurl_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SrcMetadata::set_sensorurl(const ::std::string& value) {
  
  sensorurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dg.model.SrcMetadata.SensorUrl)
}
 void SrcMetadata::set_sensorurl(const char* value) {
  
  sensorurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dg.model.SrcMetadata.SensorUrl)
}
 void SrcMetadata::set_sensorurl(const char* value, size_t size) {
  
  sensorurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dg.model.SrcMetadata.SensorUrl)
}
 ::std::string* SrcMetadata::mutable_sensorurl() {
  
  // @@protoc_insertion_point(field_mutable:dg.model.SrcMetadata.SensorUrl)
  return sensorurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SrcMetadata::release_sensorurl() {
  
  return sensorurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SrcMetadata::set_allocated_sensorurl(::std::string* sensorurl) {
  if (sensorurl != NULL) {
    
  } else {
    
  }
  sensorurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sensorurl);
  // @@protoc_insertion_point(field_set_allocated:dg.model.SrcMetadata.SensorUrl)
}

// optional int32 RepoId = 6;
void SrcMetadata::clear_repoid() {
  repoid_ = 0;
}
 ::google::protobuf::int32 SrcMetadata::repoid() const {
  // @@protoc_insertion_point(field_get:dg.model.SrcMetadata.RepoId)
  return repoid_;
}
 void SrcMetadata::set_repoid(::google::protobuf::int32 value) {
  
  repoid_ = value;
  // @@protoc_insertion_point(field_set:dg.model.SrcMetadata.RepoId)
}

// optional string RepoInfo = 7;
void SrcMetadata::clear_repoinfo() {
  repoinfo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& SrcMetadata::repoinfo() const {
  // @@protoc_insertion_point(field_get:dg.model.SrcMetadata.RepoInfo)
  return repoinfo_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SrcMetadata::set_repoinfo(const ::std::string& value) {
  
  repoinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dg.model.SrcMetadata.RepoInfo)
}
 void SrcMetadata::set_repoinfo(const char* value) {
  
  repoinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dg.model.SrcMetadata.RepoInfo)
}
 void SrcMetadata::set_repoinfo(const char* value, size_t size) {
  
  repoinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dg.model.SrcMetadata.RepoInfo)
}
 ::std::string* SrcMetadata::mutable_repoinfo() {
  
  // @@protoc_insertion_point(field_mutable:dg.model.SrcMetadata.RepoInfo)
  return repoinfo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SrcMetadata::release_repoinfo() {
  
  return repoinfo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SrcMetadata::set_allocated_repoinfo(::std::string* repoinfo) {
  if (repoinfo != NULL) {
    
  } else {
    
  }
  repoinfo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), repoinfo);
  // @@protoc_insertion_point(field_set_allocated:dg.model.SrcMetadata.RepoInfo)
}

// optional .dg.model.ObjType ObjType = 8;
void SrcMetadata::clear_objtype() {
  objtype_ = 0;
}
 ::dg::model::ObjType SrcMetadata::objtype() const {
  // @@protoc_insertion_point(field_get:dg.model.SrcMetadata.ObjType)
  return static_cast< ::dg::model::ObjType >(objtype_);
}
 void SrcMetadata::set_objtype(::dg::model::ObjType value) {
  
  objtype_ = value;
  // @@protoc_insertion_point(field_set:dg.model.SrcMetadata.ObjType)
}

// optional string SensorIdStr = 9;
void SrcMetadata::clear_sensoridstr() {
  sensoridstr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& SrcMetadata::sensoridstr() const {
  // @@protoc_insertion_point(field_get:dg.model.SrcMetadata.SensorIdStr)
  return sensoridstr_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SrcMetadata::set_sensoridstr(const ::std::string& value) {
  
  sensoridstr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dg.model.SrcMetadata.SensorIdStr)
}
 void SrcMetadata::set_sensoridstr(const char* value) {
  
  sensoridstr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dg.model.SrcMetadata.SensorIdStr)
}
 void SrcMetadata::set_sensoridstr(const char* value, size_t size) {
  
  sensoridstr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dg.model.SrcMetadata.SensorIdStr)
}
 ::std::string* SrcMetadata::mutable_sensoridstr() {
  
  // @@protoc_insertion_point(field_mutable:dg.model.SrcMetadata.SensorIdStr)
  return sensoridstr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SrcMetadata::release_sensoridstr() {
  
  return sensoridstr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SrcMetadata::set_allocated_sensoridstr(::std::string* sensoridstr) {
  if (sensoridstr != NULL) {
    
  } else {
    
  }
  sensoridstr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sensoridstr);
  // @@protoc_insertion_point(field_set_allocated:dg.model.SrcMetadata.SensorIdStr)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PingRequest::PingRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dg.model.PingRequest)
}

void PingRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

PingRequest::PingRequest(const PingRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dg.model.PingRequest)
}

void PingRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

PingRequest::~PingRequest() {
  // @@protoc_insertion_point(destructor:dg.model.PingRequest)
  SharedDtor();
}

void PingRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PingRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PingRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PingRequest_descriptor_;
}

const PingRequest& PingRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

PingRequest* PingRequest::default_instance_ = NULL;

PingRequest* PingRequest::New(::google::protobuf::Arena* arena) const {
  PingRequest* n = new PingRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PingRequest::Clear() {
}

bool PingRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dg.model.PingRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:dg.model.PingRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dg.model.PingRequest)
  return false;
#undef DO_
}

void PingRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dg.model.PingRequest)
  // @@protoc_insertion_point(serialize_end:dg.model.PingRequest)
}

::google::protobuf::uint8* PingRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dg.model.PingRequest)
  // @@protoc_insertion_point(serialize_to_array_end:dg.model.PingRequest)
  return target;
}

int PingRequest::ByteSize() const {
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PingRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PingRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PingRequest>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PingRequest::MergeFrom(const PingRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
}

void PingRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PingRequest::CopyFrom(const PingRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PingRequest::IsInitialized() const {

  return true;
}

void PingRequest::Swap(PingRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PingRequest::InternalSwap(PingRequest* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PingRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PingRequest_descriptor_;
  metadata.reflection = PingRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PingRequest

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PingResponse::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PingResponse::PingResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dg.model.PingResponse)
}

void PingResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

PingResponse::PingResponse(const PingResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dg.model.PingResponse)
}

void PingResponse::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

PingResponse::~PingResponse() {
  // @@protoc_insertion_point(destructor:dg.model.PingResponse)
  SharedDtor();
}

void PingResponse::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void PingResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PingResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PingResponse_descriptor_;
}

const PingResponse& PingResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

PingResponse* PingResponse::default_instance_ = NULL;

PingResponse* PingResponse::New(::google::protobuf::Arena* arena) const {
  PingResponse* n = new PingResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PingResponse::Clear() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool PingResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dg.model.PingResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Message = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "dg.model.PingResponse.Message"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dg.model.PingResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dg.model.PingResponse)
  return false;
#undef DO_
}

void PingResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dg.model.PingResponse)
  // optional string Message = 1;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.model.PingResponse.Message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->message(), output);
  }

  // @@protoc_insertion_point(serialize_end:dg.model.PingResponse)
}

::google::protobuf::uint8* PingResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dg.model.PingResponse)
  // optional string Message = 1;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.model.PingResponse.Message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->message(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:dg.model.PingResponse)
  return target;
}

int PingResponse::ByteSize() const {
  int total_size = 0;

  // optional string Message = 1;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PingResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PingResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PingResponse>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PingResponse::MergeFrom(const PingResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
}

void PingResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PingResponse::CopyFrom(const PingResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PingResponse::IsInitialized() const {

  return true;
}

void PingResponse::Swap(PingResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PingResponse::InternalSwap(PingResponse* other) {
  message_.Swap(&other->message_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PingResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PingResponse_descriptor_;
  metadata.reflection = PingResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PingResponse

// optional string Message = 1;
void PingResponse::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PingResponse::message() const {
  // @@protoc_insertion_point(field_get:dg.model.PingResponse.Message)
  return message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PingResponse::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dg.model.PingResponse.Message)
}
 void PingResponse::set_message(const char* value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dg.model.PingResponse.Message)
}
 void PingResponse::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dg.model.PingResponse.Message)
}
 ::std::string* PingResponse::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:dg.model.PingResponse.Message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PingResponse::release_message() {
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PingResponse::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:dg.model.PingResponse.Message)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Cutboard::kXFieldNumber;
const int Cutboard::kYFieldNumber;
const int Cutboard::kWidthFieldNumber;
const int Cutboard::kHeightFieldNumber;
const int Cutboard::kResWidthFieldNumber;
const int Cutboard::kResHeightFieldNumber;
const int Cutboard::kConfidenceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Cutboard::Cutboard()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dg.model.Cutboard)
}

void Cutboard::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Cutboard::Cutboard(const Cutboard& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dg.model.Cutboard)
}

void Cutboard::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  width_ = 0;
  height_ = 0;
  reswidth_ = 0;
  resheight_ = 0;
  confidence_ = 0;
}

Cutboard::~Cutboard() {
  // @@protoc_insertion_point(destructor:dg.model.Cutboard)
  SharedDtor();
}

void Cutboard::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Cutboard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Cutboard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Cutboard_descriptor_;
}

const Cutboard& Cutboard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

Cutboard* Cutboard::default_instance_ = NULL;

Cutboard* Cutboard::New(::google::protobuf::Arena* arena) const {
  Cutboard* n = new Cutboard;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Cutboard::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Cutboard*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(x_, confidence_);

#undef ZR_HELPER_
#undef ZR_

}

bool Cutboard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dg.model.Cutboard)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 X = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Y;
        break;
      }

      // optional int32 Y = 2;
      case 2: {
        if (tag == 16) {
         parse_Y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Width;
        break;
      }

      // optional int32 Width = 3;
      case 3: {
        if (tag == 24) {
         parse_Width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_Height;
        break;
      }

      // optional int32 Height = 4;
      case 4: {
        if (tag == 32) {
         parse_Height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_ResWidth;
        break;
      }

      // optional int32 ResWidth = 5;
      case 5: {
        if (tag == 40) {
         parse_ResWidth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reswidth_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_ResHeight;
        break;
      }

      // optional int32 ResHeight = 6;
      case 6: {
        if (tag == 48) {
         parse_ResHeight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &resheight_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_Confidence;
        break;
      }

      // optional float Confidence = 7;
      case 7: {
        if (tag == 61) {
         parse_Confidence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &confidence_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dg.model.Cutboard)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dg.model.Cutboard)
  return false;
#undef DO_
}

void Cutboard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dg.model.Cutboard)
  // optional int32 X = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x(), output);
  }

  // optional int32 Y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->y(), output);
  }

  // optional int32 Width = 3;
  if (this->width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->width(), output);
  }

  // optional int32 Height = 4;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->height(), output);
  }

  // optional int32 ResWidth = 5;
  if (this->reswidth() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->reswidth(), output);
  }

  // optional int32 ResHeight = 6;
  if (this->resheight() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->resheight(), output);
  }

  // optional float Confidence = 7;
  if (this->confidence() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->confidence(), output);
  }

  // @@protoc_insertion_point(serialize_end:dg.model.Cutboard)
}

::google::protobuf::uint8* Cutboard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dg.model.Cutboard)
  // optional int32 X = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->x(), target);
  }

  // optional int32 Y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->y(), target);
  }

  // optional int32 Width = 3;
  if (this->width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->width(), target);
  }

  // optional int32 Height = 4;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->height(), target);
  }

  // optional int32 ResWidth = 5;
  if (this->reswidth() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->reswidth(), target);
  }

  // optional int32 ResHeight = 6;
  if (this->resheight() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->resheight(), target);
  }

  // optional float Confidence = 7;
  if (this->confidence() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->confidence(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:dg.model.Cutboard)
  return target;
}

int Cutboard::ByteSize() const {
  int total_size = 0;

  // optional int32 X = 1;
  if (this->x() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->x());
  }

  // optional int32 Y = 2;
  if (this->y() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->y());
  }

  // optional int32 Width = 3;
  if (this->width() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->width());
  }

  // optional int32 Height = 4;
  if (this->height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->height());
  }

  // optional int32 ResWidth = 5;
  if (this->reswidth() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->reswidth());
  }

  // optional int32 ResHeight = 6;
  if (this->resheight() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->resheight());
  }

  // optional float Confidence = 7;
  if (this->confidence() != 0) {
    total_size += 1 + 4;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Cutboard::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Cutboard* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Cutboard>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Cutboard::MergeFrom(const Cutboard& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.width() != 0) {
    set_width(from.width());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
  if (from.reswidth() != 0) {
    set_reswidth(from.reswidth());
  }
  if (from.resheight() != 0) {
    set_resheight(from.resheight());
  }
  if (from.confidence() != 0) {
    set_confidence(from.confidence());
  }
}

void Cutboard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Cutboard::CopyFrom(const Cutboard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Cutboard::IsInitialized() const {

  return true;
}

void Cutboard::Swap(Cutboard* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Cutboard::InternalSwap(Cutboard* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(width_, other->width_);
  std::swap(height_, other->height_);
  std::swap(reswidth_, other->reswidth_);
  std::swap(resheight_, other->resheight_);
  std::swap(confidence_, other->confidence_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Cutboard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Cutboard_descriptor_;
  metadata.reflection = Cutboard_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Cutboard

// optional int32 X = 1;
void Cutboard::clear_x() {
  x_ = 0;
}
 ::google::protobuf::int32 Cutboard::x() const {
  // @@protoc_insertion_point(field_get:dg.model.Cutboard.X)
  return x_;
}
 void Cutboard::set_x(::google::protobuf::int32 value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:dg.model.Cutboard.X)
}

// optional int32 Y = 2;
void Cutboard::clear_y() {
  y_ = 0;
}
 ::google::protobuf::int32 Cutboard::y() const {
  // @@protoc_insertion_point(field_get:dg.model.Cutboard.Y)
  return y_;
}
 void Cutboard::set_y(::google::protobuf::int32 value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:dg.model.Cutboard.Y)
}

// optional int32 Width = 3;
void Cutboard::clear_width() {
  width_ = 0;
}
 ::google::protobuf::int32 Cutboard::width() const {
  // @@protoc_insertion_point(field_get:dg.model.Cutboard.Width)
  return width_;
}
 void Cutboard::set_width(::google::protobuf::int32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:dg.model.Cutboard.Width)
}

// optional int32 Height = 4;
void Cutboard::clear_height() {
  height_ = 0;
}
 ::google::protobuf::int32 Cutboard::height() const {
  // @@protoc_insertion_point(field_get:dg.model.Cutboard.Height)
  return height_;
}
 void Cutboard::set_height(::google::protobuf::int32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:dg.model.Cutboard.Height)
}

// optional int32 ResWidth = 5;
void Cutboard::clear_reswidth() {
  reswidth_ = 0;
}
 ::google::protobuf::int32 Cutboard::reswidth() const {
  // @@protoc_insertion_point(field_get:dg.model.Cutboard.ResWidth)
  return reswidth_;
}
 void Cutboard::set_reswidth(::google::protobuf::int32 value) {
  
  reswidth_ = value;
  // @@protoc_insertion_point(field_set:dg.model.Cutboard.ResWidth)
}

// optional int32 ResHeight = 6;
void Cutboard::clear_resheight() {
  resheight_ = 0;
}
 ::google::protobuf::int32 Cutboard::resheight() const {
  // @@protoc_insertion_point(field_get:dg.model.Cutboard.ResHeight)
  return resheight_;
}
 void Cutboard::set_resheight(::google::protobuf::int32 value) {
  
  resheight_ = value;
  // @@protoc_insertion_point(field_set:dg.model.Cutboard.ResHeight)
}

// optional float Confidence = 7;
void Cutboard::clear_confidence() {
  confidence_ = 0;
}
 float Cutboard::confidence() const {
  // @@protoc_insertion_point(field_get:dg.model.Cutboard.Confidence)
  return confidence_;
}
 void Cutboard::set_confidence(float value) {
  
  confidence_ = value;
  // @@protoc_insertion_point(field_set:dg.model.Cutboard.Confidence)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PointF::kXFieldNumber;
const int PointF::kYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PointF::PointF()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dg.model.PointF)
}

void PointF::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

PointF::PointF(const PointF& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dg.model.PointF)
}

void PointF::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
}

PointF::~PointF() {
  // @@protoc_insertion_point(destructor:dg.model.PointF)
  SharedDtor();
}

void PointF::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PointF::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PointF::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PointF_descriptor_;
}

const PointF& PointF::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

PointF* PointF::default_instance_ = NULL;

PointF* PointF::New(::google::protobuf::Arena* arena) const {
  PointF* n = new PointF;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PointF::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PointF*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(x_, y_);

#undef ZR_HELPER_
#undef ZR_

}

bool PointF::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dg.model.PointF)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float X = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_Y;
        break;
      }

      // optional float Y = 2;
      case 2: {
        if (tag == 21) {
         parse_Y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dg.model.PointF)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dg.model.PointF)
  return false;
#undef DO_
}

void PointF::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dg.model.PointF)
  // optional float X = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // optional float Y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // @@protoc_insertion_point(serialize_end:dg.model.PointF)
}

::google::protobuf::uint8* PointF::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dg.model.PointF)
  // optional float X = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // optional float Y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:dg.model.PointF)
  return target;
}

int PointF::ByteSize() const {
  int total_size = 0;

  // optional float X = 1;
  if (this->x() != 0) {
    total_size += 1 + 4;
  }

  // optional float Y = 2;
  if (this->y() != 0) {
    total_size += 1 + 4;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PointF::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PointF* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PointF>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PointF::MergeFrom(const PointF& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
}

void PointF::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PointF::CopyFrom(const PointF& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PointF::IsInitialized() const {

  return true;
}

void PointF::Swap(PointF* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PointF::InternalSwap(PointF* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PointF::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PointF_descriptor_;
  metadata.reflection = PointF_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PointF

// optional float X = 1;
void PointF::clear_x() {
  x_ = 0;
}
 float PointF::x() const {
  // @@protoc_insertion_point(field_get:dg.model.PointF.X)
  return x_;
}
 void PointF::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:dg.model.PointF.X)
}

// optional float Y = 2;
void PointF::clear_y() {
  y_ = 0;
}
 float PointF::y() const {
  // @@protoc_insertion_point(field_get:dg.model.PointF.Y)
  return y_;
}
 void PointF::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:dg.model.PointF.Y)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Rect::kXFieldNumber;
const int Rect::kYFieldNumber;
const int Rect::kWidthFieldNumber;
const int Rect::kHeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Rect::Rect()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dg.model.Rect)
}

void Rect::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Rect::Rect(const Rect& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dg.model.Rect)
}

void Rect::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  width_ = 0;
  height_ = 0;
}

Rect::~Rect() {
  // @@protoc_insertion_point(destructor:dg.model.Rect)
  SharedDtor();
}

void Rect::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Rect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Rect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Rect_descriptor_;
}

const Rect& Rect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

Rect* Rect::default_instance_ = NULL;

Rect* Rect::New(::google::protobuf::Arena* arena) const {
  Rect* n = new Rect;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Rect::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Rect*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(x_, height_);

#undef ZR_HELPER_
#undef ZR_

}

bool Rect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dg.model.Rect)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 X = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Y;
        break;
      }

      // optional int32 Y = 2;
      case 2: {
        if (tag == 16) {
         parse_Y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Width;
        break;
      }

      // optional int32 Width = 3;
      case 3: {
        if (tag == 24) {
         parse_Width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_Height;
        break;
      }

      // optional int32 Height = 4;
      case 4: {
        if (tag == 32) {
         parse_Height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dg.model.Rect)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dg.model.Rect)
  return false;
#undef DO_
}

void Rect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dg.model.Rect)
  // optional int32 X = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x(), output);
  }

  // optional int32 Y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->y(), output);
  }

  // optional int32 Width = 3;
  if (this->width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->width(), output);
  }

  // optional int32 Height = 4;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->height(), output);
  }

  // @@protoc_insertion_point(serialize_end:dg.model.Rect)
}

::google::protobuf::uint8* Rect::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dg.model.Rect)
  // optional int32 X = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->x(), target);
  }

  // optional int32 Y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->y(), target);
  }

  // optional int32 Width = 3;
  if (this->width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->width(), target);
  }

  // optional int32 Height = 4;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->height(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:dg.model.Rect)
  return target;
}

int Rect::ByteSize() const {
  int total_size = 0;

  // optional int32 X = 1;
  if (this->x() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->x());
  }

  // optional int32 Y = 2;
  if (this->y() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->y());
  }

  // optional int32 Width = 3;
  if (this->width() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->width());
  }

  // optional int32 Height = 4;
  if (this->height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->height());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Rect::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Rect* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Rect>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Rect::MergeFrom(const Rect& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.width() != 0) {
    set_width(from.width());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
}

void Rect::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rect::CopyFrom(const Rect& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rect::IsInitialized() const {

  return true;
}

void Rect::Swap(Rect* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Rect::InternalSwap(Rect* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(width_, other->width_);
  std::swap(height_, other->height_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Rect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Rect_descriptor_;
  metadata.reflection = Rect_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Rect

// optional int32 X = 1;
void Rect::clear_x() {
  x_ = 0;
}
 ::google::protobuf::int32 Rect::x() const {
  // @@protoc_insertion_point(field_get:dg.model.Rect.X)
  return x_;
}
 void Rect::set_x(::google::protobuf::int32 value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:dg.model.Rect.X)
}

// optional int32 Y = 2;
void Rect::clear_y() {
  y_ = 0;
}
 ::google::protobuf::int32 Rect::y() const {
  // @@protoc_insertion_point(field_get:dg.model.Rect.Y)
  return y_;
}
 void Rect::set_y(::google::protobuf::int32 value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:dg.model.Rect.Y)
}

// optional int32 Width = 3;
void Rect::clear_width() {
  width_ = 0;
}
 ::google::protobuf::int32 Rect::width() const {
  // @@protoc_insertion_point(field_get:dg.model.Rect.Width)
  return width_;
}
 void Rect::set_width(::google::protobuf::int32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:dg.model.Rect.Width)
}

// optional int32 Height = 4;
void Rect::clear_height() {
  height_ = 0;
}
 ::google::protobuf::int32 Rect::height() const {
  // @@protoc_insertion_point(field_get:dg.model.Rect.Height)
  return height_;
}
 void Rect::set_height(::google::protobuf::int32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:dg.model.Rect.Height)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RotatedRect::kCenterXFieldNumber;
const int RotatedRect::kCenterYFieldNumber;
const int RotatedRect::kWidthFieldNumber;
const int RotatedRect::kHeightFieldNumber;
const int RotatedRect::kAngleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RotatedRect::RotatedRect()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dg.model.RotatedRect)
}

void RotatedRect::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

RotatedRect::RotatedRect(const RotatedRect& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dg.model.RotatedRect)
}

void RotatedRect::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  centerx_ = 0;
  centery_ = 0;
  width_ = 0;
  height_ = 0;
  angle_ = 0;
}

RotatedRect::~RotatedRect() {
  // @@protoc_insertion_point(destructor:dg.model.RotatedRect)
  SharedDtor();
}

void RotatedRect::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RotatedRect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RotatedRect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RotatedRect_descriptor_;
}

const RotatedRect& RotatedRect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

RotatedRect* RotatedRect::default_instance_ = NULL;

RotatedRect* RotatedRect::New(::google::protobuf::Arena* arena) const {
  RotatedRect* n = new RotatedRect;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RotatedRect::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RotatedRect*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(centerx_, angle_);

#undef ZR_HELPER_
#undef ZR_

}

bool RotatedRect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dg.model.RotatedRect)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float CenterX = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &centerx_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_CenterY;
        break;
      }

      // optional float CenterY = 2;
      case 2: {
        if (tag == 21) {
         parse_CenterY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &centery_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_Width;
        break;
      }

      // optional float Width = 3;
      case 3: {
        if (tag == 29) {
         parse_Width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &width_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_Height;
        break;
      }

      // optional float Height = 4;
      case 4: {
        if (tag == 37) {
         parse_Height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &height_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_Angle;
        break;
      }

      // optional float Angle = 5;
      case 5: {
        if (tag == 45) {
         parse_Angle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &angle_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dg.model.RotatedRect)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dg.model.RotatedRect)
  return false;
#undef DO_
}

void RotatedRect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dg.model.RotatedRect)
  // optional float CenterX = 1;
  if (this->centerx() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->centerx(), output);
  }

  // optional float CenterY = 2;
  if (this->centery() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->centery(), output);
  }

  // optional float Width = 3;
  if (this->width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->width(), output);
  }

  // optional float Height = 4;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->height(), output);
  }

  // optional float Angle = 5;
  if (this->angle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->angle(), output);
  }

  // @@protoc_insertion_point(serialize_end:dg.model.RotatedRect)
}

::google::protobuf::uint8* RotatedRect::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dg.model.RotatedRect)
  // optional float CenterX = 1;
  if (this->centerx() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->centerx(), target);
  }

  // optional float CenterY = 2;
  if (this->centery() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->centery(), target);
  }

  // optional float Width = 3;
  if (this->width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->width(), target);
  }

  // optional float Height = 4;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->height(), target);
  }

  // optional float Angle = 5;
  if (this->angle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->angle(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:dg.model.RotatedRect)
  return target;
}

int RotatedRect::ByteSize() const {
  int total_size = 0;

  // optional float CenterX = 1;
  if (this->centerx() != 0) {
    total_size += 1 + 4;
  }

  // optional float CenterY = 2;
  if (this->centery() != 0) {
    total_size += 1 + 4;
  }

  // optional float Width = 3;
  if (this->width() != 0) {
    total_size += 1 + 4;
  }

  // optional float Height = 4;
  if (this->height() != 0) {
    total_size += 1 + 4;
  }

  // optional float Angle = 5;
  if (this->angle() != 0) {
    total_size += 1 + 4;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RotatedRect::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RotatedRect* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RotatedRect>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RotatedRect::MergeFrom(const RotatedRect& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.centerx() != 0) {
    set_centerx(from.centerx());
  }
  if (from.centery() != 0) {
    set_centery(from.centery());
  }
  if (from.width() != 0) {
    set_width(from.width());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
  if (from.angle() != 0) {
    set_angle(from.angle());
  }
}

void RotatedRect::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RotatedRect::CopyFrom(const RotatedRect& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RotatedRect::IsInitialized() const {

  return true;
}

void RotatedRect::Swap(RotatedRect* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RotatedRect::InternalSwap(RotatedRect* other) {
  std::swap(centerx_, other->centerx_);
  std::swap(centery_, other->centery_);
  std::swap(width_, other->width_);
  std::swap(height_, other->height_);
  std::swap(angle_, other->angle_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RotatedRect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RotatedRect_descriptor_;
  metadata.reflection = RotatedRect_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RotatedRect

// optional float CenterX = 1;
void RotatedRect::clear_centerx() {
  centerx_ = 0;
}
 float RotatedRect::centerx() const {
  // @@protoc_insertion_point(field_get:dg.model.RotatedRect.CenterX)
  return centerx_;
}
 void RotatedRect::set_centerx(float value) {
  
  centerx_ = value;
  // @@protoc_insertion_point(field_set:dg.model.RotatedRect.CenterX)
}

// optional float CenterY = 2;
void RotatedRect::clear_centery() {
  centery_ = 0;
}
 float RotatedRect::centery() const {
  // @@protoc_insertion_point(field_get:dg.model.RotatedRect.CenterY)
  return centery_;
}
 void RotatedRect::set_centery(float value) {
  
  centery_ = value;
  // @@protoc_insertion_point(field_set:dg.model.RotatedRect.CenterY)
}

// optional float Width = 3;
void RotatedRect::clear_width() {
  width_ = 0;
}
 float RotatedRect::width() const {
  // @@protoc_insertion_point(field_get:dg.model.RotatedRect.Width)
  return width_;
}
 void RotatedRect::set_width(float value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:dg.model.RotatedRect.Width)
}

// optional float Height = 4;
void RotatedRect::clear_height() {
  height_ = 0;
}
 float RotatedRect::height() const {
  // @@protoc_insertion_point(field_get:dg.model.RotatedRect.Height)
  return height_;
}
 void RotatedRect::set_height(float value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:dg.model.RotatedRect.Height)
}

// optional float Angle = 5;
void RotatedRect::clear_angle() {
  angle_ = 0;
}
 float RotatedRect::angle() const {
  // @@protoc_insertion_point(field_get:dg.model.RotatedRect.Angle)
  return angle_;
}
 void RotatedRect::set_angle(float value) {
  
  angle_ = value;
  // @@protoc_insertion_point(field_set:dg.model.RotatedRect.Angle)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CutboardImage::kCutboardFieldNumber;
const int CutboardImage::kImgFieldNumber;
const int CutboardImage::kRectFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CutboardImage::CutboardImage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dg.model.CutboardImage)
}

void CutboardImage::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  cutboard_ = const_cast< ::dg::model::Cutboard*>(&::dg::model::Cutboard::default_instance());
  img_ = const_cast< ::dg::model::Image*>(&::dg::model::Image::default_instance());
  rect_ = const_cast< ::dg::model::RotatedRect*>(&::dg::model::RotatedRect::default_instance());
}

CutboardImage::CutboardImage(const CutboardImage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dg.model.CutboardImage)
}

void CutboardImage::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  cutboard_ = NULL;
  img_ = NULL;
  rect_ = NULL;
}

CutboardImage::~CutboardImage() {
  // @@protoc_insertion_point(destructor:dg.model.CutboardImage)
  SharedDtor();
}

void CutboardImage::SharedDtor() {
  if (this != default_instance_) {
    delete cutboard_;
    delete img_;
    delete rect_;
  }
}

void CutboardImage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CutboardImage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CutboardImage_descriptor_;
}

const CutboardImage& CutboardImage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

CutboardImage* CutboardImage::default_instance_ = NULL;

CutboardImage* CutboardImage::New(::google::protobuf::Arena* arena) const {
  CutboardImage* n = new CutboardImage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CutboardImage::Clear() {
  if (GetArenaNoVirtual() == NULL && cutboard_ != NULL) delete cutboard_;
  cutboard_ = NULL;
  if (GetArenaNoVirtual() == NULL && img_ != NULL) delete img_;
  img_ = NULL;
  if (GetArenaNoVirtual() == NULL && rect_ != NULL) delete rect_;
  rect_ = NULL;
}

bool CutboardImage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dg.model.CutboardImage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .dg.model.Cutboard Cutboard = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cutboard()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Img;
        break;
      }

      // optional .dg.model.Image Img = 2;
      case 2: {
        if (tag == 18) {
         parse_Img:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_img()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Rect;
        break;
      }

      // optional .dg.model.RotatedRect Rect = 3;
      case 3: {
        if (tag == 26) {
         parse_Rect:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rect()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dg.model.CutboardImage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dg.model.CutboardImage)
  return false;
#undef DO_
}

void CutboardImage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dg.model.CutboardImage)
  // optional .dg.model.Cutboard Cutboard = 1;
  if (this->has_cutboard()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->cutboard_, output);
  }

  // optional .dg.model.Image Img = 2;
  if (this->has_img()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->img_, output);
  }

  // optional .dg.model.RotatedRect Rect = 3;
  if (this->has_rect()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->rect_, output);
  }

  // @@protoc_insertion_point(serialize_end:dg.model.CutboardImage)
}

::google::protobuf::uint8* CutboardImage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dg.model.CutboardImage)
  // optional .dg.model.Cutboard Cutboard = 1;
  if (this->has_cutboard()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->cutboard_, target);
  }

  // optional .dg.model.Image Img = 2;
  if (this->has_img()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->img_, target);
  }

  // optional .dg.model.RotatedRect Rect = 3;
  if (this->has_rect()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *this->rect_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:dg.model.CutboardImage)
  return target;
}

int CutboardImage::ByteSize() const {
  int total_size = 0;

  // optional .dg.model.Cutboard Cutboard = 1;
  if (this->has_cutboard()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->cutboard_);
  }

  // optional .dg.model.Image Img = 2;
  if (this->has_img()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->img_);
  }

  // optional .dg.model.RotatedRect Rect = 3;
  if (this->has_rect()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->rect_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CutboardImage::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CutboardImage* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CutboardImage>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CutboardImage::MergeFrom(const CutboardImage& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_cutboard()) {
    mutable_cutboard()->::dg::model::Cutboard::MergeFrom(from.cutboard());
  }
  if (from.has_img()) {
    mutable_img()->::dg::model::Image::MergeFrom(from.img());
  }
  if (from.has_rect()) {
    mutable_rect()->::dg::model::RotatedRect::MergeFrom(from.rect());
  }
}

void CutboardImage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CutboardImage::CopyFrom(const CutboardImage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CutboardImage::IsInitialized() const {

  return true;
}

void CutboardImage::Swap(CutboardImage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CutboardImage::InternalSwap(CutboardImage* other) {
  std::swap(cutboard_, other->cutboard_);
  std::swap(img_, other->img_);
  std::swap(rect_, other->rect_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CutboardImage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CutboardImage_descriptor_;
  metadata.reflection = CutboardImage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CutboardImage

// optional .dg.model.Cutboard Cutboard = 1;
bool CutboardImage::has_cutboard() const {
  return !_is_default_instance_ && cutboard_ != NULL;
}
void CutboardImage::clear_cutboard() {
  if (GetArenaNoVirtual() == NULL && cutboard_ != NULL) delete cutboard_;
  cutboard_ = NULL;
}
const ::dg::model::Cutboard& CutboardImage::cutboard() const {
  // @@protoc_insertion_point(field_get:dg.model.CutboardImage.Cutboard)
  return cutboard_ != NULL ? *cutboard_ : *default_instance_->cutboard_;
}
::dg::model::Cutboard* CutboardImage::mutable_cutboard() {
  
  if (cutboard_ == NULL) {
    cutboard_ = new ::dg::model::Cutboard;
  }
  // @@protoc_insertion_point(field_mutable:dg.model.CutboardImage.Cutboard)
  return cutboard_;
}
::dg::model::Cutboard* CutboardImage::release_cutboard() {
  
  ::dg::model::Cutboard* temp = cutboard_;
  cutboard_ = NULL;
  return temp;
}
void CutboardImage::set_allocated_cutboard(::dg::model::Cutboard* cutboard) {
  delete cutboard_;
  cutboard_ = cutboard;
  if (cutboard) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dg.model.CutboardImage.Cutboard)
}

// optional .dg.model.Image Img = 2;
bool CutboardImage::has_img() const {
  return !_is_default_instance_ && img_ != NULL;
}
void CutboardImage::clear_img() {
  if (GetArenaNoVirtual() == NULL && img_ != NULL) delete img_;
  img_ = NULL;
}
const ::dg::model::Image& CutboardImage::img() const {
  // @@protoc_insertion_point(field_get:dg.model.CutboardImage.Img)
  return img_ != NULL ? *img_ : *default_instance_->img_;
}
::dg::model::Image* CutboardImage::mutable_img() {
  
  if (img_ == NULL) {
    img_ = new ::dg::model::Image;
  }
  // @@protoc_insertion_point(field_mutable:dg.model.CutboardImage.Img)
  return img_;
}
::dg::model::Image* CutboardImage::release_img() {
  
  ::dg::model::Image* temp = img_;
  img_ = NULL;
  return temp;
}
void CutboardImage::set_allocated_img(::dg::model::Image* img) {
  delete img_;
  img_ = img;
  if (img) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dg.model.CutboardImage.Img)
}

// optional .dg.model.RotatedRect Rect = 3;
bool CutboardImage::has_rect() const {
  return !_is_default_instance_ && rect_ != NULL;
}
void CutboardImage::clear_rect() {
  if (GetArenaNoVirtual() == NULL && rect_ != NULL) delete rect_;
  rect_ = NULL;
}
const ::dg::model::RotatedRect& CutboardImage::rect() const {
  // @@protoc_insertion_point(field_get:dg.model.CutboardImage.Rect)
  return rect_ != NULL ? *rect_ : *default_instance_->rect_;
}
::dg::model::RotatedRect* CutboardImage::mutable_rect() {
  
  if (rect_ == NULL) {
    rect_ = new ::dg::model::RotatedRect;
  }
  // @@protoc_insertion_point(field_mutable:dg.model.CutboardImage.Rect)
  return rect_;
}
::dg::model::RotatedRect* CutboardImage::release_rect() {
  
  ::dg::model::RotatedRect* temp = rect_;
  rect_ = NULL;
  return temp;
}
void CutboardImage::set_allocated_rect(::dg::model::RotatedRect* rect) {
  delete rect_;
  rect_ = rect;
  if (rect) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dg.model.CutboardImage.Rect)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Color::kColorIdFieldNumber;
const int Color::kConfidenceFieldNumber;
const int Color::kColorNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Color::Color()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dg.model.Color)
}

void Color::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Color::Color(const Color& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dg.model.Color)
}

void Color::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  colorid_ = 0;
  confidence_ = 0;
  colorname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Color::~Color() {
  // @@protoc_insertion_point(destructor:dg.model.Color)
  SharedDtor();
}

void Color::SharedDtor() {
  colorname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Color::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Color::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Color_descriptor_;
}

const Color& Color::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

Color* Color::default_instance_ = NULL;

Color* Color::New(::google::protobuf::Arena* arena) const {
  Color* n = new Color;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Color::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Color*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(colorid_, confidence_);
  colorname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool Color::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dg.model.Color)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ColorId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &colorid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_Confidence;
        break;
      }

      // optional float Confidence = 2;
      case 2: {
        if (tag == 21) {
         parse_Confidence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &confidence_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ColorName;
        break;
      }

      // optional string ColorName = 3;
      case 3: {
        if (tag == 26) {
         parse_ColorName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_colorname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->colorname().data(), this->colorname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "dg.model.Color.ColorName"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dg.model.Color)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dg.model.Color)
  return false;
#undef DO_
}

void Color::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dg.model.Color)
  // optional int32 ColorId = 1;
  if (this->colorid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->colorid(), output);
  }

  // optional float Confidence = 2;
  if (this->confidence() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->confidence(), output);
  }

  // optional string ColorName = 3;
  if (this->colorname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->colorname().data(), this->colorname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.model.Color.ColorName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->colorname(), output);
  }

  // @@protoc_insertion_point(serialize_end:dg.model.Color)
}

::google::protobuf::uint8* Color::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dg.model.Color)
  // optional int32 ColorId = 1;
  if (this->colorid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->colorid(), target);
  }

  // optional float Confidence = 2;
  if (this->confidence() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->confidence(), target);
  }

  // optional string ColorName = 3;
  if (this->colorname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->colorname().data(), this->colorname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.model.Color.ColorName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->colorname(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:dg.model.Color)
  return target;
}

int Color::ByteSize() const {
  int total_size = 0;

  // optional int32 ColorId = 1;
  if (this->colorid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->colorid());
  }

  // optional float Confidence = 2;
  if (this->confidence() != 0) {
    total_size += 1 + 4;
  }

  // optional string ColorName = 3;
  if (this->colorname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->colorname());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Color::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Color* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Color>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Color::MergeFrom(const Color& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.colorid() != 0) {
    set_colorid(from.colorid());
  }
  if (from.confidence() != 0) {
    set_confidence(from.confidence());
  }
  if (from.colorname().size() > 0) {

    colorname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.colorname_);
  }
}

void Color::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Color::CopyFrom(const Color& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Color::IsInitialized() const {

  return true;
}

void Color::Swap(Color* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Color::InternalSwap(Color* other) {
  std::swap(colorid_, other->colorid_);
  std::swap(confidence_, other->confidence_);
  colorname_.Swap(&other->colorname_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Color::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Color_descriptor_;
  metadata.reflection = Color_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Color

// optional int32 ColorId = 1;
void Color::clear_colorid() {
  colorid_ = 0;
}
 ::google::protobuf::int32 Color::colorid() const {
  // @@protoc_insertion_point(field_get:dg.model.Color.ColorId)
  return colorid_;
}
 void Color::set_colorid(::google::protobuf::int32 value) {
  
  colorid_ = value;
  // @@protoc_insertion_point(field_set:dg.model.Color.ColorId)
}

// optional float Confidence = 2;
void Color::clear_confidence() {
  confidence_ = 0;
}
 float Color::confidence() const {
  // @@protoc_insertion_point(field_get:dg.model.Color.Confidence)
  return confidence_;
}
 void Color::set_confidence(float value) {
  
  confidence_ = value;
  // @@protoc_insertion_point(field_set:dg.model.Color.Confidence)
}

// optional string ColorName = 3;
void Color::clear_colorname() {
  colorname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Color::colorname() const {
  // @@protoc_insertion_point(field_get:dg.model.Color.ColorName)
  return colorname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Color::set_colorname(const ::std::string& value) {
  
  colorname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dg.model.Color.ColorName)
}
 void Color::set_colorname(const char* value) {
  
  colorname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dg.model.Color.ColorName)
}
 void Color::set_colorname(const char* value, size_t size) {
  
  colorname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dg.model.Color.ColorName)
}
 ::std::string* Color::mutable_colorname() {
  
  // @@protoc_insertion_point(field_mutable:dg.model.Color.ColorName)
  return colorname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Color::release_colorname() {
  
  return colorname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Color::set_allocated_colorname(::std::string* colorname) {
  if (colorname != NULL) {
    
  } else {
    
  }
  colorname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), colorname);
  // @@protoc_insertion_point(field_set_allocated:dg.model.Color.ColorName)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FeatureVector::kIdFieldNumber;
const int FeatureVector::kFeatureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FeatureVector::FeatureVector()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dg.model.FeatureVector)
}

void FeatureVector::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

FeatureVector::FeatureVector(const FeatureVector& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dg.model.FeatureVector)
}

void FeatureVector::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  feature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

FeatureVector::~FeatureVector() {
  // @@protoc_insertion_point(destructor:dg.model.FeatureVector)
  SharedDtor();
}

void FeatureVector::SharedDtor() {
  feature_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void FeatureVector::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FeatureVector::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FeatureVector_descriptor_;
}

const FeatureVector& FeatureVector::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

FeatureVector* FeatureVector::default_instance_ = NULL;

FeatureVector* FeatureVector::New(::google::protobuf::Arena* arena) const {
  FeatureVector* n = new FeatureVector;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FeatureVector::Clear() {
  id_ = GOOGLE_LONGLONG(0);
  feature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool FeatureVector::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dg.model.FeatureVector)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 Id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Feature;
        break;
      }

      // optional string Feature = 2;
      case 2: {
        if (tag == 18) {
         parse_Feature:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_feature()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->feature().data(), this->feature().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "dg.model.FeatureVector.Feature"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dg.model.FeatureVector)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dg.model.FeatureVector)
  return false;
#undef DO_
}

void FeatureVector::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dg.model.FeatureVector)
  // optional int64 Id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional string Feature = 2;
  if (this->feature().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->feature().data(), this->feature().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.model.FeatureVector.Feature");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->feature(), output);
  }

  // @@protoc_insertion_point(serialize_end:dg.model.FeatureVector)
}

::google::protobuf::uint8* FeatureVector::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dg.model.FeatureVector)
  // optional int64 Id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional string Feature = 2;
  if (this->feature().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->feature().data(), this->feature().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.model.FeatureVector.Feature");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->feature(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:dg.model.FeatureVector)
  return target;
}

int FeatureVector::ByteSize() const {
  int total_size = 0;

  // optional int64 Id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());
  }

  // optional string Feature = 2;
  if (this->feature().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->feature());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FeatureVector::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const FeatureVector* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const FeatureVector>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FeatureVector::MergeFrom(const FeatureVector& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.feature().size() > 0) {

    feature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.feature_);
  }
}

void FeatureVector::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FeatureVector::CopyFrom(const FeatureVector& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeatureVector::IsInitialized() const {

  return true;
}

void FeatureVector::Swap(FeatureVector* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FeatureVector::InternalSwap(FeatureVector* other) {
  std::swap(id_, other->id_);
  feature_.Swap(&other->feature_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FeatureVector::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FeatureVector_descriptor_;
  metadata.reflection = FeatureVector_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FeatureVector

// optional int64 Id = 1;
void FeatureVector::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 FeatureVector::id() const {
  // @@protoc_insertion_point(field_get:dg.model.FeatureVector.Id)
  return id_;
}
 void FeatureVector::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:dg.model.FeatureVector.Id)
}

// optional string Feature = 2;
void FeatureVector::clear_feature() {
  feature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& FeatureVector::feature() const {
  // @@protoc_insertion_point(field_get:dg.model.FeatureVector.Feature)
  return feature_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FeatureVector::set_feature(const ::std::string& value) {
  
  feature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dg.model.FeatureVector.Feature)
}
 void FeatureVector::set_feature(const char* value) {
  
  feature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dg.model.FeatureVector.Feature)
}
 void FeatureVector::set_feature(const char* value, size_t size) {
  
  feature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dg.model.FeatureVector.Feature)
}
 ::std::string* FeatureVector::mutable_feature() {
  
  // @@protoc_insertion_point(field_mutable:dg.model.FeatureVector.Feature)
  return feature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* FeatureVector::release_feature() {
  
  return feature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FeatureVector::set_allocated_feature(::std::string* feature) {
  if (feature != NULL) {
    
  } else {
    
  }
  feature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), feature);
  // @@protoc_insertion_point(field_set_allocated:dg.model.FeatureVector.Feature)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NullMessage::NullMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dg.model.NullMessage)
}

void NullMessage::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

NullMessage::NullMessage(const NullMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dg.model.NullMessage)
}

void NullMessage::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

NullMessage::~NullMessage() {
  // @@protoc_insertion_point(destructor:dg.model.NullMessage)
  SharedDtor();
}

void NullMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NullMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NullMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NullMessage_descriptor_;
}

const NullMessage& NullMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

NullMessage* NullMessage::default_instance_ = NULL;

NullMessage* NullMessage::New(::google::protobuf::Arena* arena) const {
  NullMessage* n = new NullMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NullMessage::Clear() {
}

bool NullMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dg.model.NullMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:dg.model.NullMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dg.model.NullMessage)
  return false;
#undef DO_
}

void NullMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dg.model.NullMessage)
  // @@protoc_insertion_point(serialize_end:dg.model.NullMessage)
}

::google::protobuf::uint8* NullMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dg.model.NullMessage)
  // @@protoc_insertion_point(serialize_to_array_end:dg.model.NullMessage)
  return target;
}

int NullMessage::ByteSize() const {
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NullMessage::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const NullMessage* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const NullMessage>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NullMessage::MergeFrom(const NullMessage& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
}

void NullMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NullMessage::CopyFrom(const NullMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NullMessage::IsInitialized() const {

  return true;
}

void NullMessage::Swap(NullMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NullMessage::InternalSwap(NullMessage* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NullMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NullMessage_descriptor_;
  metadata.reflection = NullMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NullMessage

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Attribute::kAttributeIdFieldNumber;
const int Attribute::kAttributeNameFieldNumber;
const int Attribute::kValueIdFieldNumber;
const int Attribute::kValueStringFieldNumber;
const int Attribute::kConfidenceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Attribute::Attribute()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dg.model.Attribute)
}

void Attribute::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Attribute::Attribute(const Attribute& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dg.model.Attribute)
}

void Attribute::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  attributeid_ = 0;
  attributename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  valueid_ = 0;
  valuestring_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  confidence_ = 0;
}

Attribute::~Attribute() {
  // @@protoc_insertion_point(destructor:dg.model.Attribute)
  SharedDtor();
}

void Attribute::SharedDtor() {
  attributename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  valuestring_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Attribute::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Attribute::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Attribute_descriptor_;
}

const Attribute& Attribute::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

Attribute* Attribute::default_instance_ = NULL;

Attribute* Attribute::New(::google::protobuf::Arena* arena) const {
  Attribute* n = new Attribute;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Attribute::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Attribute*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(attributeid_, valueid_);
  attributename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  valuestring_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  confidence_ = 0;

#undef ZR_HELPER_
#undef ZR_

}

bool Attribute::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dg.model.Attribute)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 AttributeId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attributeid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_AttributeName;
        break;
      }

      // optional string AttributeName = 2;
      case 2: {
        if (tag == 18) {
         parse_AttributeName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_attributename()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->attributename().data(), this->attributename().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "dg.model.Attribute.AttributeName"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ValueId;
        break;
      }

      // optional int32 ValueId = 3;
      case 3: {
        if (tag == 24) {
         parse_ValueId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &valueid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_ValueString;
        break;
      }

      // optional string ValueString = 4;
      case 4: {
        if (tag == 34) {
         parse_ValueString:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_valuestring()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->valuestring().data(), this->valuestring().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "dg.model.Attribute.ValueString"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_Confidence;
        break;
      }

      // optional float Confidence = 5;
      case 5: {
        if (tag == 45) {
         parse_Confidence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &confidence_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dg.model.Attribute)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dg.model.Attribute)
  return false;
#undef DO_
}

void Attribute::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dg.model.Attribute)
  // optional int32 AttributeId = 1;
  if (this->attributeid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->attributeid(), output);
  }

  // optional string AttributeName = 2;
  if (this->attributename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->attributename().data(), this->attributename().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.model.Attribute.AttributeName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->attributename(), output);
  }

  // optional int32 ValueId = 3;
  if (this->valueid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->valueid(), output);
  }

  // optional string ValueString = 4;
  if (this->valuestring().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->valuestring().data(), this->valuestring().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.model.Attribute.ValueString");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->valuestring(), output);
  }

  // optional float Confidence = 5;
  if (this->confidence() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->confidence(), output);
  }

  // @@protoc_insertion_point(serialize_end:dg.model.Attribute)
}

::google::protobuf::uint8* Attribute::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dg.model.Attribute)
  // optional int32 AttributeId = 1;
  if (this->attributeid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->attributeid(), target);
  }

  // optional string AttributeName = 2;
  if (this->attributename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->attributename().data(), this->attributename().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.model.Attribute.AttributeName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->attributename(), target);
  }

  // optional int32 ValueId = 3;
  if (this->valueid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->valueid(), target);
  }

  // optional string ValueString = 4;
  if (this->valuestring().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->valuestring().data(), this->valuestring().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.model.Attribute.ValueString");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->valuestring(), target);
  }

  // optional float Confidence = 5;
  if (this->confidence() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->confidence(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:dg.model.Attribute)
  return target;
}

int Attribute::ByteSize() const {
  int total_size = 0;

  // optional int32 AttributeId = 1;
  if (this->attributeid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->attributeid());
  }

  // optional string AttributeName = 2;
  if (this->attributename().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->attributename());
  }

  // optional int32 ValueId = 3;
  if (this->valueid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->valueid());
  }

  // optional string ValueString = 4;
  if (this->valuestring().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->valuestring());
  }

  // optional float Confidence = 5;
  if (this->confidence() != 0) {
    total_size += 1 + 4;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Attribute::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Attribute* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Attribute>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Attribute::MergeFrom(const Attribute& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.attributeid() != 0) {
    set_attributeid(from.attributeid());
  }
  if (from.attributename().size() > 0) {

    attributename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attributename_);
  }
  if (from.valueid() != 0) {
    set_valueid(from.valueid());
  }
  if (from.valuestring().size() > 0) {

    valuestring_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.valuestring_);
  }
  if (from.confidence() != 0) {
    set_confidence(from.confidence());
  }
}

void Attribute::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Attribute::CopyFrom(const Attribute& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Attribute::IsInitialized() const {

  return true;
}

void Attribute::Swap(Attribute* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Attribute::InternalSwap(Attribute* other) {
  std::swap(attributeid_, other->attributeid_);
  attributename_.Swap(&other->attributename_);
  std::swap(valueid_, other->valueid_);
  valuestring_.Swap(&other->valuestring_);
  std::swap(confidence_, other->confidence_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Attribute::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Attribute_descriptor_;
  metadata.reflection = Attribute_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Attribute

// optional int32 AttributeId = 1;
void Attribute::clear_attributeid() {
  attributeid_ = 0;
}
 ::google::protobuf::int32 Attribute::attributeid() const {
  // @@protoc_insertion_point(field_get:dg.model.Attribute.AttributeId)
  return attributeid_;
}
 void Attribute::set_attributeid(::google::protobuf::int32 value) {
  
  attributeid_ = value;
  // @@protoc_insertion_point(field_set:dg.model.Attribute.AttributeId)
}

// optional string AttributeName = 2;
void Attribute::clear_attributename() {
  attributename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Attribute::attributename() const {
  // @@protoc_insertion_point(field_get:dg.model.Attribute.AttributeName)
  return attributename_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Attribute::set_attributename(const ::std::string& value) {
  
  attributename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dg.model.Attribute.AttributeName)
}
 void Attribute::set_attributename(const char* value) {
  
  attributename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dg.model.Attribute.AttributeName)
}
 void Attribute::set_attributename(const char* value, size_t size) {
  
  attributename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dg.model.Attribute.AttributeName)
}
 ::std::string* Attribute::mutable_attributename() {
  
  // @@protoc_insertion_point(field_mutable:dg.model.Attribute.AttributeName)
  return attributename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Attribute::release_attributename() {
  
  return attributename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Attribute::set_allocated_attributename(::std::string* attributename) {
  if (attributename != NULL) {
    
  } else {
    
  }
  attributename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), attributename);
  // @@protoc_insertion_point(field_set_allocated:dg.model.Attribute.AttributeName)
}

// optional int32 ValueId = 3;
void Attribute::clear_valueid() {
  valueid_ = 0;
}
 ::google::protobuf::int32 Attribute::valueid() const {
  // @@protoc_insertion_point(field_get:dg.model.Attribute.ValueId)
  return valueid_;
}
 void Attribute::set_valueid(::google::protobuf::int32 value) {
  
  valueid_ = value;
  // @@protoc_insertion_point(field_set:dg.model.Attribute.ValueId)
}

// optional string ValueString = 4;
void Attribute::clear_valuestring() {
  valuestring_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Attribute::valuestring() const {
  // @@protoc_insertion_point(field_get:dg.model.Attribute.ValueString)
  return valuestring_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Attribute::set_valuestring(const ::std::string& value) {
  
  valuestring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dg.model.Attribute.ValueString)
}
 void Attribute::set_valuestring(const char* value) {
  
  valuestring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dg.model.Attribute.ValueString)
}
 void Attribute::set_valuestring(const char* value, size_t size) {
  
  valuestring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dg.model.Attribute.ValueString)
}
 ::std::string* Attribute::mutable_valuestring() {
  
  // @@protoc_insertion_point(field_mutable:dg.model.Attribute.ValueString)
  return valuestring_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Attribute::release_valuestring() {
  
  return valuestring_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Attribute::set_allocated_valuestring(::std::string* valuestring) {
  if (valuestring != NULL) {
    
  } else {
    
  }
  valuestring_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), valuestring);
  // @@protoc_insertion_point(field_set_allocated:dg.model.Attribute.ValueString)
}

// optional float Confidence = 5;
void Attribute::clear_confidence() {
  confidence_ = 0;
}
 float Attribute::confidence() const {
  // @@protoc_insertion_point(field_get:dg.model.Attribute.Confidence)
  return confidence_;
}
 void Attribute::set_confidence(float value) {
  
  confidence_ = value;
  // @@protoc_insertion_point(field_set:dg.model.Attribute.Confidence)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FaceAttribute::kAttributeIdFieldNumber;
const int FaceAttribute::kNameFieldNumber;
const int FaceAttribute::kValueIdFieldNumber;
const int FaceAttribute::kConfidenceFieldNumber;
const int FaceAttribute::kValueBoolFieldNumber;
const int FaceAttribute::kValueIntFieldNumber;
const int FaceAttribute::kValueFloatFieldNumber;
const int FaceAttribute::kValueStringFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FaceAttribute::FaceAttribute()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dg.model.FaceAttribute)
}

void FaceAttribute::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  FaceAttribute_default_oneof_instance_->valuebool_ = false;
  FaceAttribute_default_oneof_instance_->valueint_ = 0;
  FaceAttribute_default_oneof_instance_->valuefloat_ = 0;
  FaceAttribute_default_oneof_instance_->valuestring_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

FaceAttribute::FaceAttribute(const FaceAttribute& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dg.model.FaceAttribute)
}

void FaceAttribute::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  attributeid_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  valueid_ = 0;
  confidence_ = 0;
  clear_has_Value();
}

FaceAttribute::~FaceAttribute() {
  // @@protoc_insertion_point(destructor:dg.model.FaceAttribute)
  SharedDtor();
}

void FaceAttribute::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_Value()) {
    clear_Value();
  }
  if (this != default_instance_) {
  }
}

void FaceAttribute::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FaceAttribute::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FaceAttribute_descriptor_;
}

const FaceAttribute& FaceAttribute::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

FaceAttribute* FaceAttribute::default_instance_ = NULL;

FaceAttribute* FaceAttribute::New(::google::protobuf::Arena* arena) const {
  FaceAttribute* n = new FaceAttribute;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FaceAttribute::clear_Value() {
  switch(Value_case()) {
    case kValueBool: {
      // No need to clear
      break;
    }
    case kValueInt: {
      // No need to clear
      break;
    }
    case kValueFloat: {
      // No need to clear
      break;
    }
    case kValueString: {
      Value_.valuestring_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUE_NOT_SET;
}


void FaceAttribute::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<FaceAttribute*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(attributeid_, confidence_);
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

  clear_Value();
}

bool FaceAttribute::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dg.model.FaceAttribute)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 AttributeId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attributeid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Name;
        break;
      }

      // optional string Name = 2;
      case 2: {
        if (tag == 18) {
         parse_Name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "dg.model.FaceAttribute.Name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ValueId;
        break;
      }

      // optional int32 ValueId = 3;
      case 3: {
        if (tag == 24) {
         parse_ValueId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &valueid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_Confidence;
        break;
      }

      // optional float Confidence = 4;
      case 4: {
        if (tag == 37) {
         parse_Confidence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &confidence_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_ValueBool;
        break;
      }

      // optional bool ValueBool = 9;
      case 9: {
        if (tag == 72) {
         parse_ValueBool:
          clear_Value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &Value_.valuebool_)));
          set_has_valuebool();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_ValueInt;
        break;
      }

      // optional int32 ValueInt = 10;
      case 10: {
        if (tag == 80) {
         parse_ValueInt:
          clear_Value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &Value_.valueint_)));
          set_has_valueint();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(93)) goto parse_ValueFloat;
        break;
      }

      // optional float ValueFloat = 11;
      case 11: {
        if (tag == 93) {
         parse_ValueFloat:
          clear_Value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &Value_.valuefloat_)));
          set_has_valuefloat();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_ValueString;
        break;
      }

      // optional string ValueString = 12;
      case 12: {
        if (tag == 98) {
         parse_ValueString:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_valuestring()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->valuestring().data(), this->valuestring().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "dg.model.FaceAttribute.ValueString"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dg.model.FaceAttribute)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dg.model.FaceAttribute)
  return false;
#undef DO_
}

void FaceAttribute::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dg.model.FaceAttribute)
  // optional int32 AttributeId = 1;
  if (this->attributeid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->attributeid(), output);
  }

  // optional string Name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.model.FaceAttribute.Name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional int32 ValueId = 3;
  if (this->valueid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->valueid(), output);
  }

  // optional float Confidence = 4;
  if (this->confidence() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->confidence(), output);
  }

  // optional bool ValueBool = 9;
  if (has_valuebool()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->valuebool(), output);
  }

  // optional int32 ValueInt = 10;
  if (has_valueint()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->valueint(), output);
  }

  // optional float ValueFloat = 11;
  if (has_valuefloat()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->valuefloat(), output);
  }

  // optional string ValueString = 12;
  if (has_valuestring()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->valuestring().data(), this->valuestring().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.model.FaceAttribute.ValueString");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->valuestring(), output);
  }

  // @@protoc_insertion_point(serialize_end:dg.model.FaceAttribute)
}

::google::protobuf::uint8* FaceAttribute::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dg.model.FaceAttribute)
  // optional int32 AttributeId = 1;
  if (this->attributeid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->attributeid(), target);
  }

  // optional string Name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.model.FaceAttribute.Name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional int32 ValueId = 3;
  if (this->valueid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->valueid(), target);
  }

  // optional float Confidence = 4;
  if (this->confidence() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->confidence(), target);
  }

  // optional bool ValueBool = 9;
  if (has_valuebool()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->valuebool(), target);
  }

  // optional int32 ValueInt = 10;
  if (has_valueint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->valueint(), target);
  }

  // optional float ValueFloat = 11;
  if (has_valuefloat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->valuefloat(), target);
  }

  // optional string ValueString = 12;
  if (has_valuestring()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->valuestring().data(), this->valuestring().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.model.FaceAttribute.ValueString");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->valuestring(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:dg.model.FaceAttribute)
  return target;
}

int FaceAttribute::ByteSize() const {
  int total_size = 0;

  // optional int32 AttributeId = 1;
  if (this->attributeid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->attributeid());
  }

  // optional string Name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional int32 ValueId = 3;
  if (this->valueid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->valueid());
  }

  // optional float Confidence = 4;
  if (this->confidence() != 0) {
    total_size += 1 + 4;
  }

  switch (Value_case()) {
    // optional bool ValueBool = 9;
    case kValueBool: {
      total_size += 1 + 1;
      break;
    }
    // optional int32 ValueInt = 10;
    case kValueInt: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->valueint());
      break;
    }
    // optional float ValueFloat = 11;
    case kValueFloat: {
      total_size += 1 + 4;
      break;
    }
    // optional string ValueString = 12;
    case kValueString: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->valuestring());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FaceAttribute::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const FaceAttribute* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const FaceAttribute>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FaceAttribute::MergeFrom(const FaceAttribute& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  switch (from.Value_case()) {
    case kValueBool: {
      set_valuebool(from.valuebool());
      break;
    }
    case kValueInt: {
      set_valueint(from.valueint());
      break;
    }
    case kValueFloat: {
      set_valuefloat(from.valuefloat());
      break;
    }
    case kValueString: {
      set_valuestring(from.valuestring());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  if (from.attributeid() != 0) {
    set_attributeid(from.attributeid());
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.valueid() != 0) {
    set_valueid(from.valueid());
  }
  if (from.confidence() != 0) {
    set_confidence(from.confidence());
  }
}

void FaceAttribute::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FaceAttribute::CopyFrom(const FaceAttribute& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FaceAttribute::IsInitialized() const {

  return true;
}

void FaceAttribute::Swap(FaceAttribute* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FaceAttribute::InternalSwap(FaceAttribute* other) {
  std::swap(attributeid_, other->attributeid_);
  name_.Swap(&other->name_);
  std::swap(valueid_, other->valueid_);
  std::swap(confidence_, other->confidence_);
  std::swap(Value_, other->Value_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FaceAttribute::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FaceAttribute_descriptor_;
  metadata.reflection = FaceAttribute_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FaceAttribute

// optional int32 AttributeId = 1;
void FaceAttribute::clear_attributeid() {
  attributeid_ = 0;
}
 ::google::protobuf::int32 FaceAttribute::attributeid() const {
  // @@protoc_insertion_point(field_get:dg.model.FaceAttribute.AttributeId)
  return attributeid_;
}
 void FaceAttribute::set_attributeid(::google::protobuf::int32 value) {
  
  attributeid_ = value;
  // @@protoc_insertion_point(field_set:dg.model.FaceAttribute.AttributeId)
}

// optional string Name = 2;
void FaceAttribute::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& FaceAttribute::name() const {
  // @@protoc_insertion_point(field_get:dg.model.FaceAttribute.Name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FaceAttribute::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dg.model.FaceAttribute.Name)
}
 void FaceAttribute::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dg.model.FaceAttribute.Name)
}
 void FaceAttribute::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dg.model.FaceAttribute.Name)
}
 ::std::string* FaceAttribute::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:dg.model.FaceAttribute.Name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* FaceAttribute::release_name() {
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FaceAttribute::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:dg.model.FaceAttribute.Name)
}

// optional int32 ValueId = 3;
void FaceAttribute::clear_valueid() {
  valueid_ = 0;
}
 ::google::protobuf::int32 FaceAttribute::valueid() const {
  // @@protoc_insertion_point(field_get:dg.model.FaceAttribute.ValueId)
  return valueid_;
}
 void FaceAttribute::set_valueid(::google::protobuf::int32 value) {
  
  valueid_ = value;
  // @@protoc_insertion_point(field_set:dg.model.FaceAttribute.ValueId)
}

// optional float Confidence = 4;
void FaceAttribute::clear_confidence() {
  confidence_ = 0;
}
 float FaceAttribute::confidence() const {
  // @@protoc_insertion_point(field_get:dg.model.FaceAttribute.Confidence)
  return confidence_;
}
 void FaceAttribute::set_confidence(float value) {
  
  confidence_ = value;
  // @@protoc_insertion_point(field_set:dg.model.FaceAttribute.Confidence)
}

// optional bool ValueBool = 9;
bool FaceAttribute::has_valuebool() const {
  return Value_case() == kValueBool;
}
void FaceAttribute::set_has_valuebool() {
  _oneof_case_[0] = kValueBool;
}
void FaceAttribute::clear_valuebool() {
  if (has_valuebool()) {
    Value_.valuebool_ = false;
    clear_has_Value();
  }
}
 bool FaceAttribute::valuebool() const {
  // @@protoc_insertion_point(field_get:dg.model.FaceAttribute.ValueBool)
  if (has_valuebool()) {
    return Value_.valuebool_;
  }
  return false;
}
 void FaceAttribute::set_valuebool(bool value) {
  if (!has_valuebool()) {
    clear_Value();
    set_has_valuebool();
  }
  Value_.valuebool_ = value;
  // @@protoc_insertion_point(field_set:dg.model.FaceAttribute.ValueBool)
}

// optional int32 ValueInt = 10;
bool FaceAttribute::has_valueint() const {
  return Value_case() == kValueInt;
}
void FaceAttribute::set_has_valueint() {
  _oneof_case_[0] = kValueInt;
}
void FaceAttribute::clear_valueint() {
  if (has_valueint()) {
    Value_.valueint_ = 0;
    clear_has_Value();
  }
}
 ::google::protobuf::int32 FaceAttribute::valueint() const {
  // @@protoc_insertion_point(field_get:dg.model.FaceAttribute.ValueInt)
  if (has_valueint()) {
    return Value_.valueint_;
  }
  return 0;
}
 void FaceAttribute::set_valueint(::google::protobuf::int32 value) {
  if (!has_valueint()) {
    clear_Value();
    set_has_valueint();
  }
  Value_.valueint_ = value;
  // @@protoc_insertion_point(field_set:dg.model.FaceAttribute.ValueInt)
}

// optional float ValueFloat = 11;
bool FaceAttribute::has_valuefloat() const {
  return Value_case() == kValueFloat;
}
void FaceAttribute::set_has_valuefloat() {
  _oneof_case_[0] = kValueFloat;
}
void FaceAttribute::clear_valuefloat() {
  if (has_valuefloat()) {
    Value_.valuefloat_ = 0;
    clear_has_Value();
  }
}
 float FaceAttribute::valuefloat() const {
  // @@protoc_insertion_point(field_get:dg.model.FaceAttribute.ValueFloat)
  if (has_valuefloat()) {
    return Value_.valuefloat_;
  }
  return 0;
}
 void FaceAttribute::set_valuefloat(float value) {
  if (!has_valuefloat()) {
    clear_Value();
    set_has_valuefloat();
  }
  Value_.valuefloat_ = value;
  // @@protoc_insertion_point(field_set:dg.model.FaceAttribute.ValueFloat)
}

// optional string ValueString = 12;
bool FaceAttribute::has_valuestring() const {
  return Value_case() == kValueString;
}
void FaceAttribute::set_has_valuestring() {
  _oneof_case_[0] = kValueString;
}
void FaceAttribute::clear_valuestring() {
  if (has_valuestring()) {
    Value_.valuestring_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_Value();
  }
}
 const ::std::string& FaceAttribute::valuestring() const {
  // @@protoc_insertion_point(field_get:dg.model.FaceAttribute.ValueString)
  if (has_valuestring()) {
    return Value_.valuestring_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
 void FaceAttribute::set_valuestring(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:dg.model.FaceAttribute.ValueString)
  if (!has_valuestring()) {
    clear_Value();
    set_has_valuestring();
    Value_.valuestring_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  Value_.valuestring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dg.model.FaceAttribute.ValueString)
}
 void FaceAttribute::set_valuestring(const char* value) {
  if (!has_valuestring()) {
    clear_Value();
    set_has_valuestring();
    Value_.valuestring_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  Value_.valuestring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dg.model.FaceAttribute.ValueString)
}
 void FaceAttribute::set_valuestring(const char* value, size_t size) {
  if (!has_valuestring()) {
    clear_Value();
    set_has_valuestring();
    Value_.valuestring_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  Value_.valuestring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dg.model.FaceAttribute.ValueString)
}
 ::std::string* FaceAttribute::mutable_valuestring() {
  if (!has_valuestring()) {
    clear_Value();
    set_has_valuestring();
    Value_.valuestring_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:dg.model.FaceAttribute.ValueString)
  return Value_.valuestring_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* FaceAttribute::release_valuestring() {
  if (has_valuestring()) {
    clear_has_Value();
    return Value_.valuestring_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
 void FaceAttribute::set_allocated_valuestring(::std::string* valuestring) {
  if (!has_valuestring()) {
    Value_.valuestring_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_Value();
  if (valuestring != NULL) {
    set_has_valuestring();
    Value_.valuestring_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        valuestring);
  }
  // @@protoc_insertion_point(field_set_allocated:dg.model.FaceAttribute.ValueString)
}

bool FaceAttribute::has_Value() const {
  return Value_case() != VALUE_NOT_SET;
}
void FaceAttribute::clear_has_Value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
FaceAttribute::ValueCase FaceAttribute::Value_case() const {
  return FaceAttribute::ValueCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Image::kIdFieldNumber;
const int Image::kWidthFieldNumber;
const int Image::kHeightFieldNumber;
const int Image::kURIFieldNumber;
const int Image::kBinDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Image::Image()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dg.model.Image)
}

void Image::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Image::Image(const Image& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dg.model.Image)
}

void Image::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  width_ = 0;
  height_ = 0;
  uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bindata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Image::~Image() {
  // @@protoc_insertion_point(destructor:dg.model.Image)
  SharedDtor();
}

void Image::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uri_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bindata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Image::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Image::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Image_descriptor_;
}

const Image& Image::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

Image* Image::default_instance_ = NULL;

Image* Image::New(::google::protobuf::Arena* arena) const {
  Image* n = new Image;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Image::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Image*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(width_, height_);
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bindata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool Image::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dg.model.Image)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "dg.model.Image.Id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Width;
        break;
      }

      // optional int32 Width = 2;
      case 2: {
        if (tag == 16) {
         parse_Width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Height;
        break;
      }

      // optional int32 Height = 3;
      case 3: {
        if (tag == 24) {
         parse_Height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_URI;
        break;
      }

      // optional string URI = 4;
      case 4: {
        if (tag == 34) {
         parse_URI:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uri()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->uri().data(), this->uri().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "dg.model.Image.URI"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_BinData;
        break;
      }

      // optional string BinData = 5;
      case 5: {
        if (tag == 42) {
         parse_BinData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bindata()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->bindata().data(), this->bindata().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "dg.model.Image.BinData"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dg.model.Image)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dg.model.Image)
  return false;
#undef DO_
}

void Image::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dg.model.Image)
  // optional string Id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.model.Image.Id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional int32 Width = 2;
  if (this->width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->width(), output);
  }

  // optional int32 Height = 3;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->height(), output);
  }

  // optional string URI = 4;
  if (this->uri().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uri().data(), this->uri().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.model.Image.URI");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->uri(), output);
  }

  // optional string BinData = 5;
  if (this->bindata().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bindata().data(), this->bindata().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.model.Image.BinData");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->bindata(), output);
  }

  // @@protoc_insertion_point(serialize_end:dg.model.Image)
}

::google::protobuf::uint8* Image::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dg.model.Image)
  // optional string Id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.model.Image.Id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional int32 Width = 2;
  if (this->width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->width(), target);
  }

  // optional int32 Height = 3;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->height(), target);
  }

  // optional string URI = 4;
  if (this->uri().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uri().data(), this->uri().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.model.Image.URI");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->uri(), target);
  }

  // optional string BinData = 5;
  if (this->bindata().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bindata().data(), this->bindata().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.model.Image.BinData");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->bindata(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:dg.model.Image)
  return target;
}

int Image::ByteSize() const {
  int total_size = 0;

  // optional string Id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // optional int32 Width = 2;
  if (this->width() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->width());
  }

  // optional int32 Height = 3;
  if (this->height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->height());
  }

  // optional string URI = 4;
  if (this->uri().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uri());
  }

  // optional string BinData = 5;
  if (this->bindata().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->bindata());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Image::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Image* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Image>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Image::MergeFrom(const Image& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.width() != 0) {
    set_width(from.width());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
  if (from.uri().size() > 0) {

    uri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uri_);
  }
  if (from.bindata().size() > 0) {

    bindata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bindata_);
  }
}

void Image::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Image::CopyFrom(const Image& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Image::IsInitialized() const {

  return true;
}

void Image::Swap(Image* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Image::InternalSwap(Image* other) {
  id_.Swap(&other->id_);
  std::swap(width_, other->width_);
  std::swap(height_, other->height_);
  uri_.Swap(&other->uri_);
  bindata_.Swap(&other->bindata_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Image::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Image_descriptor_;
  metadata.reflection = Image_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Image

// optional string Id = 1;
void Image::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Image::id() const {
  // @@protoc_insertion_point(field_get:dg.model.Image.Id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Image::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dg.model.Image.Id)
}
 void Image::set_id(const char* value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dg.model.Image.Id)
}
 void Image::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dg.model.Image.Id)
}
 ::std::string* Image::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:dg.model.Image.Id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Image::release_id() {
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Image::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:dg.model.Image.Id)
}

// optional int32 Width = 2;
void Image::clear_width() {
  width_ = 0;
}
 ::google::protobuf::int32 Image::width() const {
  // @@protoc_insertion_point(field_get:dg.model.Image.Width)
  return width_;
}
 void Image::set_width(::google::protobuf::int32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:dg.model.Image.Width)
}

// optional int32 Height = 3;
void Image::clear_height() {
  height_ = 0;
}
 ::google::protobuf::int32 Image::height() const {
  // @@protoc_insertion_point(field_get:dg.model.Image.Height)
  return height_;
}
 void Image::set_height(::google::protobuf::int32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:dg.model.Image.Height)
}

// optional string URI = 4;
void Image::clear_uri() {
  uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Image::uri() const {
  // @@protoc_insertion_point(field_get:dg.model.Image.URI)
  return uri_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Image::set_uri(const ::std::string& value) {
  
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dg.model.Image.URI)
}
 void Image::set_uri(const char* value) {
  
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dg.model.Image.URI)
}
 void Image::set_uri(const char* value, size_t size) {
  
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dg.model.Image.URI)
}
 ::std::string* Image::mutable_uri() {
  
  // @@protoc_insertion_point(field_mutable:dg.model.Image.URI)
  return uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Image::release_uri() {
  
  return uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Image::set_allocated_uri(::std::string* uri) {
  if (uri != NULL) {
    
  } else {
    
  }
  uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uri);
  // @@protoc_insertion_point(field_set_allocated:dg.model.Image.URI)
}

// optional string BinData = 5;
void Image::clear_bindata() {
  bindata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Image::bindata() const {
  // @@protoc_insertion_point(field_get:dg.model.Image.BinData)
  return bindata_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Image::set_bindata(const ::std::string& value) {
  
  bindata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dg.model.Image.BinData)
}
 void Image::set_bindata(const char* value) {
  
  bindata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dg.model.Image.BinData)
}
 void Image::set_bindata(const char* value, size_t size) {
  
  bindata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dg.model.Image.BinData)
}
 ::std::string* Image::mutable_bindata() {
  
  // @@protoc_insertion_point(field_mutable:dg.model.Image.BinData)
  return bindata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Image::release_bindata() {
  
  return bindata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Image::set_allocated_bindata(::std::string* bindata) {
  if (bindata != NULL) {
    
  } else {
    
  }
  bindata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bindata);
  // @@protoc_insertion_point(field_set_allocated:dg.model.Image.BinData)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FaceAlignResult::kLandMarksFieldNumber;
const int FaceAlignResult::kLandMarkScoresFieldNumber;
const int FaceAlignResult::kBoxFieldNumber;
const int FaceAlignResult::kScoresFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FaceAlignResult::FaceAlignResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dg.model.FaceAlignResult)
}

void FaceAlignResult::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  box_ = const_cast< ::dg::model::Rect*>(&::dg::model::Rect::default_instance());
}

FaceAlignResult::FaceAlignResult(const FaceAlignResult& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dg.model.FaceAlignResult)
}

void FaceAlignResult::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  box_ = NULL;
  scores_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  scores_.SetEntryDescriptor(
      &::dg::model::FaceAlignResult_ScoresEntry_descriptor_);
}

FaceAlignResult::~FaceAlignResult() {
  // @@protoc_insertion_point(destructor:dg.model.FaceAlignResult)
  SharedDtor();
}

void FaceAlignResult::SharedDtor() {
  if (this != default_instance_) {
    delete box_;
  }
}

void FaceAlignResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FaceAlignResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FaceAlignResult_descriptor_;
}

const FaceAlignResult& FaceAlignResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

FaceAlignResult* FaceAlignResult::default_instance_ = NULL;

FaceAlignResult* FaceAlignResult::New(::google::protobuf::Arena* arena) const {
  FaceAlignResult* n = new FaceAlignResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FaceAlignResult::Clear() {
  if (GetArenaNoVirtual() == NULL && box_ != NULL) delete box_;
  box_ = NULL;
  landmarks_.Clear();
  landmarkscores_.Clear();
  scores_.Clear();
}

bool FaceAlignResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dg.model.FaceAlignResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .dg.model.PointF LandMarks = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_LandMarks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_landmarks()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_LandMarks;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(18)) goto parse_LandMarkScores;
        break;
      }

      // repeated float LandMarkScores = 2;
      case 2: {
        if (tag == 18) {
         parse_LandMarkScores:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_landmarkscores())));
        } else if (tag == 21) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 18, input, this->mutable_landmarkscores())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Box;
        break;
      }

      // optional .dg.model.Rect Box = 3;
      case 3: {
        if (tag == 26) {
         parse_Box:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_box()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_Scores;
        break;
      }

      // map<string, float> Scores = 4;
      case 4: {
        if (tag == 34) {
         parse_Scores:
          DO_(input->IncrementRecursionDepth());
         parse_loop_Scores:
          ::google::protobuf::scoped_ptr<FaceAlignResult_ScoresEntry> entry(scores_.NewEntry());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, entry.get()));
          (*mutable_scores())[entry->key()] = *entry->mutable_value();
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            entry->key().data(), entry->key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "dg.model.FaceAlignResult.ScoresEntry.key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_Scores;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dg.model.FaceAlignResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dg.model.FaceAlignResult)
  return false;
#undef DO_
}

void FaceAlignResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dg.model.FaceAlignResult)
  // repeated .dg.model.PointF LandMarks = 1;
  for (unsigned int i = 0, n = this->landmarks_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->landmarks(i), output);
  }

  // repeated float LandMarkScores = 2;
  if (this->landmarkscores_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_landmarkscores_cached_byte_size_);
  }
  for (int i = 0; i < this->landmarkscores_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->landmarkscores(i), output);
  }

  // optional .dg.model.Rect Box = 3;
  if (this->has_box()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->box_, output);
  }

  // map<string, float> Scores = 4;
  {
    ::google::protobuf::scoped_ptr<FaceAlignResult_ScoresEntry> entry;
    for (::google::protobuf::Map< ::std::string, float >::const_iterator
        it = this->scores().begin();
        it != this->scores().end(); ++it) {
      entry.reset(scores_.NewEntryWrapper(it->first, it->second));
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
          4, *entry, output);
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        it->first.data(), it->first.length(),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "dg.model.FaceAlignResult.ScoresEntry.key");
    }
  }

  // @@protoc_insertion_point(serialize_end:dg.model.FaceAlignResult)
}

::google::protobuf::uint8* FaceAlignResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dg.model.FaceAlignResult)
  // repeated .dg.model.PointF LandMarks = 1;
  for (unsigned int i = 0, n = this->landmarks_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->landmarks(i), target);
  }

  // repeated float LandMarkScores = 2;
  if (this->landmarkscores_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _landmarkscores_cached_byte_size_, target);
  }
  for (int i = 0; i < this->landmarkscores_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->landmarkscores(i), target);
  }

  // optional .dg.model.Rect Box = 3;
  if (this->has_box()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *this->box_, target);
  }

  // map<string, float> Scores = 4;
  {
    ::google::protobuf::scoped_ptr<FaceAlignResult_ScoresEntry> entry;
    for (::google::protobuf::Map< ::std::string, float >::const_iterator
        it = this->scores().begin();
        it != this->scores().end(); ++it) {
      entry.reset(scores_.NewEntryWrapper(it->first, it->second));
      target = ::google::protobuf::internal::WireFormatLite::
          WriteMessageNoVirtualToArray(
              4, *entry, target);
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        it->first.data(), it->first.length(),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "dg.model.FaceAlignResult.ScoresEntry.key");
    }
  }

  // @@protoc_insertion_point(serialize_to_array_end:dg.model.FaceAlignResult)
  return target;
}

int FaceAlignResult::ByteSize() const {
  int total_size = 0;

  // optional .dg.model.Rect Box = 3;
  if (this->has_box()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->box_);
  }

  // repeated .dg.model.PointF LandMarks = 1;
  total_size += 1 * this->landmarks_size();
  for (int i = 0; i < this->landmarks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->landmarks(i));
  }

  // repeated float LandMarkScores = 2;
  {
    int data_size = 0;
    data_size = 4 * this->landmarkscores_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _landmarkscores_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // map<string, float> Scores = 4;
  total_size += 1 * this->scores_size();
  {
    ::google::protobuf::scoped_ptr<FaceAlignResult_ScoresEntry> entry;
    for (::google::protobuf::Map< ::std::string, float >::const_iterator
        it = this->scores().begin();
        it != this->scores().end(); ++it) {
      entry.reset(scores_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FaceAlignResult::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const FaceAlignResult* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const FaceAlignResult>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FaceAlignResult::MergeFrom(const FaceAlignResult& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  landmarks_.MergeFrom(from.landmarks_);
  landmarkscores_.MergeFrom(from.landmarkscores_);
  scores_.MergeFrom(from.scores_);
  if (from.has_box()) {
    mutable_box()->::dg::model::Rect::MergeFrom(from.box());
  }
}

void FaceAlignResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FaceAlignResult::CopyFrom(const FaceAlignResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FaceAlignResult::IsInitialized() const {

  return true;
}

void FaceAlignResult::Swap(FaceAlignResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FaceAlignResult::InternalSwap(FaceAlignResult* other) {
  landmarks_.UnsafeArenaSwap(&other->landmarks_);
  landmarkscores_.UnsafeArenaSwap(&other->landmarkscores_);
  std::swap(box_, other->box_);
  scores_.Swap(&other->scores_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FaceAlignResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FaceAlignResult_descriptor_;
  metadata.reflection = FaceAlignResult_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FaceAlignResult

// repeated .dg.model.PointF LandMarks = 1;
int FaceAlignResult::landmarks_size() const {
  return landmarks_.size();
}
void FaceAlignResult::clear_landmarks() {
  landmarks_.Clear();
}
const ::dg::model::PointF& FaceAlignResult::landmarks(int index) const {
  // @@protoc_insertion_point(field_get:dg.model.FaceAlignResult.LandMarks)
  return landmarks_.Get(index);
}
::dg::model::PointF* FaceAlignResult::mutable_landmarks(int index) {
  // @@protoc_insertion_point(field_mutable:dg.model.FaceAlignResult.LandMarks)
  return landmarks_.Mutable(index);
}
::dg::model::PointF* FaceAlignResult::add_landmarks() {
  // @@protoc_insertion_point(field_add:dg.model.FaceAlignResult.LandMarks)
  return landmarks_.Add();
}
::google::protobuf::RepeatedPtrField< ::dg::model::PointF >*
FaceAlignResult::mutable_landmarks() {
  // @@protoc_insertion_point(field_mutable_list:dg.model.FaceAlignResult.LandMarks)
  return &landmarks_;
}
const ::google::protobuf::RepeatedPtrField< ::dg::model::PointF >&
FaceAlignResult::landmarks() const {
  // @@protoc_insertion_point(field_list:dg.model.FaceAlignResult.LandMarks)
  return landmarks_;
}

// repeated float LandMarkScores = 2;
int FaceAlignResult::landmarkscores_size() const {
  return landmarkscores_.size();
}
void FaceAlignResult::clear_landmarkscores() {
  landmarkscores_.Clear();
}
 float FaceAlignResult::landmarkscores(int index) const {
  // @@protoc_insertion_point(field_get:dg.model.FaceAlignResult.LandMarkScores)
  return landmarkscores_.Get(index);
}
 void FaceAlignResult::set_landmarkscores(int index, float value) {
  landmarkscores_.Set(index, value);
  // @@protoc_insertion_point(field_set:dg.model.FaceAlignResult.LandMarkScores)
}
 void FaceAlignResult::add_landmarkscores(float value) {
  landmarkscores_.Add(value);
  // @@protoc_insertion_point(field_add:dg.model.FaceAlignResult.LandMarkScores)
}
 const ::google::protobuf::RepeatedField< float >&
FaceAlignResult::landmarkscores() const {
  // @@protoc_insertion_point(field_list:dg.model.FaceAlignResult.LandMarkScores)
  return landmarkscores_;
}
 ::google::protobuf::RepeatedField< float >*
FaceAlignResult::mutable_landmarkscores() {
  // @@protoc_insertion_point(field_mutable_list:dg.model.FaceAlignResult.LandMarkScores)
  return &landmarkscores_;
}

// optional .dg.model.Rect Box = 3;
bool FaceAlignResult::has_box() const {
  return !_is_default_instance_ && box_ != NULL;
}
void FaceAlignResult::clear_box() {
  if (GetArenaNoVirtual() == NULL && box_ != NULL) delete box_;
  box_ = NULL;
}
const ::dg::model::Rect& FaceAlignResult::box() const {
  // @@protoc_insertion_point(field_get:dg.model.FaceAlignResult.Box)
  return box_ != NULL ? *box_ : *default_instance_->box_;
}
::dg::model::Rect* FaceAlignResult::mutable_box() {
  
  if (box_ == NULL) {
    box_ = new ::dg::model::Rect;
  }
  // @@protoc_insertion_point(field_mutable:dg.model.FaceAlignResult.Box)
  return box_;
}
::dg::model::Rect* FaceAlignResult::release_box() {
  
  ::dg::model::Rect* temp = box_;
  box_ = NULL;
  return temp;
}
void FaceAlignResult::set_allocated_box(::dg::model::Rect* box) {
  delete box_;
  box_ = box;
  if (box) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dg.model.FaceAlignResult.Box)
}

// map<string, float> Scores = 4;
int FaceAlignResult::scores_size() const {
  return scores_.size();
}
void FaceAlignResult::clear_scores() {
  scores_.Clear();
}
 const ::google::protobuf::Map< ::std::string, float >&
FaceAlignResult::scores() const {
  // @@protoc_insertion_point(field_map:dg.model.FaceAlignResult.Scores)
  return scores_.GetMap();
}
 ::google::protobuf::Map< ::std::string, float >*
FaceAlignResult::mutable_scores() {
  // @@protoc_insertion_point(field_mutable_map:dg.model.FaceAlignResult.Scores)
  return scores_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RecFace::kIdFieldNumber;
const int RecFace::kConfidenceFieldNumber;
const int RecFace::kImgFieldNumber;
const int RecFace::kAlignResultFieldNumber;
const int RecFace::kQualitiesFieldNumber;
const int RecFace::kFeaturesFieldNumber;
const int RecFace::kAttributesFieldNumber;
const int RecFace::kAlignedImageFieldNumber;
const int RecFace::kTransformedAlignResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RecFace::RecFace()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dg.model.RecFace)
}

void RecFace::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  img_ = const_cast< ::dg::model::CutboardImage*>(&::dg::model::CutboardImage::default_instance());
  alignresult_ = const_cast< ::dg::model::FaceAlignResult*>(&::dg::model::FaceAlignResult::default_instance());
  alignedimage_ = const_cast< ::dg::model::Image*>(&::dg::model::Image::default_instance());
  transformedalignresult_ = const_cast< ::dg::model::FaceAlignResult*>(&::dg::model::FaceAlignResult::default_instance());
}

RecFace::RecFace(const RecFace& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dg.model.RecFace)
}

void RecFace::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  confidence_ = 0;
  img_ = NULL;
  alignresult_ = NULL;
  qualities_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  qualities_.SetEntryDescriptor(
      &::dg::model::RecFace_QualitiesEntry_descriptor_);
  features_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  alignedimage_ = NULL;
  transformedalignresult_ = NULL;
}

RecFace::~RecFace() {
  // @@protoc_insertion_point(destructor:dg.model.RecFace)
  SharedDtor();
}

void RecFace::SharedDtor() {
  features_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete img_;
    delete alignresult_;
    delete alignedimage_;
    delete transformedalignresult_;
  }
}

void RecFace::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecFace::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecFace_descriptor_;
}

const RecFace& RecFace::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

RecFace* RecFace::default_instance_ = NULL;

RecFace* RecFace::New(::google::protobuf::Arena* arena) const {
  RecFace* n = new RecFace;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RecFace::Clear() {
  id_ = GOOGLE_LONGLONG(0);
  confidence_ = 0;
  if (GetArenaNoVirtual() == NULL && img_ != NULL) delete img_;
  img_ = NULL;
  if (GetArenaNoVirtual() == NULL && alignresult_ != NULL) delete alignresult_;
  alignresult_ = NULL;
  features_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && alignedimage_ != NULL) delete alignedimage_;
  alignedimage_ = NULL;
  if (GetArenaNoVirtual() == NULL && transformedalignresult_ != NULL) delete transformedalignresult_;
  transformedalignresult_ = NULL;
  qualities_.Clear();
  attributes_.Clear();
}

bool RecFace::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dg.model.RecFace)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 Id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_Confidence;
        break;
      }

      // optional float Confidence = 2;
      case 2: {
        if (tag == 21) {
         parse_Confidence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &confidence_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Img;
        break;
      }

      // optional .dg.model.CutboardImage Img = 3;
      case 3: {
        if (tag == 26) {
         parse_Img:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_img()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_AlignResult;
        break;
      }

      // optional .dg.model.FaceAlignResult AlignResult = 4;
      case 4: {
        if (tag == 34) {
         parse_AlignResult:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_alignresult()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_Qualities;
        break;
      }

      // map<string, float> Qualities = 5;
      case 5: {
        if (tag == 42) {
         parse_Qualities:
          DO_(input->IncrementRecursionDepth());
         parse_loop_Qualities:
          ::google::protobuf::scoped_ptr<RecFace_QualitiesEntry> entry(qualities_.NewEntry());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, entry.get()));
          (*mutable_qualities())[entry->key()] = *entry->mutable_value();
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            entry->key().data(), entry->key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "dg.model.RecFace.QualitiesEntry.key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_loop_Qualities;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(50)) goto parse_Features;
        break;
      }

      // optional string Features = 6;
      case 6: {
        if (tag == 50) {
         parse_Features:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_features()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->features().data(), this->features().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "dg.model.RecFace.Features"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_Attributes;
        break;
      }

      // repeated .dg.model.FaceAttribute Attributes = 7;
      case 7: {
        if (tag == 58) {
         parse_Attributes:
          DO_(input->IncrementRecursionDepth());
         parse_loop_Attributes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_attributes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_loop_Attributes;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(66)) goto parse_AlignedImage;
        break;
      }

      // optional .dg.model.Image AlignedImage = 8;
      case 8: {
        if (tag == 66) {
         parse_AlignedImage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_alignedimage()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_TransformedAlignResult;
        break;
      }

      // optional .dg.model.FaceAlignResult TransformedAlignResult = 9;
      case 9: {
        if (tag == 74) {
         parse_TransformedAlignResult:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transformedalignresult()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dg.model.RecFace)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dg.model.RecFace)
  return false;
#undef DO_
}

void RecFace::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dg.model.RecFace)
  // optional int64 Id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional float Confidence = 2;
  if (this->confidence() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->confidence(), output);
  }

  // optional .dg.model.CutboardImage Img = 3;
  if (this->has_img()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->img_, output);
  }

  // optional .dg.model.FaceAlignResult AlignResult = 4;
  if (this->has_alignresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->alignresult_, output);
  }

  // map<string, float> Qualities = 5;
  {
    ::google::protobuf::scoped_ptr<RecFace_QualitiesEntry> entry;
    for (::google::protobuf::Map< ::std::string, float >::const_iterator
        it = this->qualities().begin();
        it != this->qualities().end(); ++it) {
      entry.reset(qualities_.NewEntryWrapper(it->first, it->second));
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
          5, *entry, output);
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        it->first.data(), it->first.length(),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "dg.model.RecFace.QualitiesEntry.key");
    }
  }

  // optional string Features = 6;
  if (this->features().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->features().data(), this->features().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.model.RecFace.Features");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->features(), output);
  }

  // repeated .dg.model.FaceAttribute Attributes = 7;
  for (unsigned int i = 0, n = this->attributes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->attributes(i), output);
  }

  // optional .dg.model.Image AlignedImage = 8;
  if (this->has_alignedimage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->alignedimage_, output);
  }

  // optional .dg.model.FaceAlignResult TransformedAlignResult = 9;
  if (this->has_transformedalignresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->transformedalignresult_, output);
  }

  // @@protoc_insertion_point(serialize_end:dg.model.RecFace)
}

::google::protobuf::uint8* RecFace::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dg.model.RecFace)
  // optional int64 Id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional float Confidence = 2;
  if (this->confidence() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->confidence(), target);
  }

  // optional .dg.model.CutboardImage Img = 3;
  if (this->has_img()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *this->img_, target);
  }

  // optional .dg.model.FaceAlignResult AlignResult = 4;
  if (this->has_alignresult()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, *this->alignresult_, target);
  }

  // map<string, float> Qualities = 5;
  {
    ::google::protobuf::scoped_ptr<RecFace_QualitiesEntry> entry;
    for (::google::protobuf::Map< ::std::string, float >::const_iterator
        it = this->qualities().begin();
        it != this->qualities().end(); ++it) {
      entry.reset(qualities_.NewEntryWrapper(it->first, it->second));
      target = ::google::protobuf::internal::WireFormatLite::
          WriteMessageNoVirtualToArray(
              5, *entry, target);
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        it->first.data(), it->first.length(),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "dg.model.RecFace.QualitiesEntry.key");
    }
  }

  // optional string Features = 6;
  if (this->features().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->features().data(), this->features().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.model.RecFace.Features");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->features(), target);
  }

  // repeated .dg.model.FaceAttribute Attributes = 7;
  for (unsigned int i = 0, n = this->attributes_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->attributes(i), target);
  }

  // optional .dg.model.Image AlignedImage = 8;
  if (this->has_alignedimage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, *this->alignedimage_, target);
  }

  // optional .dg.model.FaceAlignResult TransformedAlignResult = 9;
  if (this->has_transformedalignresult()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, *this->transformedalignresult_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:dg.model.RecFace)
  return target;
}

int RecFace::ByteSize() const {
  int total_size = 0;

  // optional int64 Id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());
  }

  // optional float Confidence = 2;
  if (this->confidence() != 0) {
    total_size += 1 + 4;
  }

  // optional .dg.model.CutboardImage Img = 3;
  if (this->has_img()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->img_);
  }

  // optional .dg.model.FaceAlignResult AlignResult = 4;
  if (this->has_alignresult()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->alignresult_);
  }

  // optional string Features = 6;
  if (this->features().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->features());
  }

  // optional .dg.model.Image AlignedImage = 8;
  if (this->has_alignedimage()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->alignedimage_);
  }

  // optional .dg.model.FaceAlignResult TransformedAlignResult = 9;
  if (this->has_transformedalignresult()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->transformedalignresult_);
  }

  // map<string, float> Qualities = 5;
  total_size += 1 * this->qualities_size();
  {
    ::google::protobuf::scoped_ptr<RecFace_QualitiesEntry> entry;
    for (::google::protobuf::Map< ::std::string, float >::const_iterator
        it = this->qualities().begin();
        it != this->qualities().end(); ++it) {
      entry.reset(qualities_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // repeated .dg.model.FaceAttribute Attributes = 7;
  total_size += 1 * this->attributes_size();
  for (int i = 0; i < this->attributes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attributes(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecFace::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RecFace* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RecFace>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RecFace::MergeFrom(const RecFace& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  qualities_.MergeFrom(from.qualities_);
  attributes_.MergeFrom(from.attributes_);
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.confidence() != 0) {
    set_confidence(from.confidence());
  }
  if (from.has_img()) {
    mutable_img()->::dg::model::CutboardImage::MergeFrom(from.img());
  }
  if (from.has_alignresult()) {
    mutable_alignresult()->::dg::model::FaceAlignResult::MergeFrom(from.alignresult());
  }
  if (from.features().size() > 0) {

    features_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.features_);
  }
  if (from.has_alignedimage()) {
    mutable_alignedimage()->::dg::model::Image::MergeFrom(from.alignedimage());
  }
  if (from.has_transformedalignresult()) {
    mutable_transformedalignresult()->::dg::model::FaceAlignResult::MergeFrom(from.transformedalignresult());
  }
}

void RecFace::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecFace::CopyFrom(const RecFace& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecFace::IsInitialized() const {

  return true;
}

void RecFace::Swap(RecFace* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RecFace::InternalSwap(RecFace* other) {
  std::swap(id_, other->id_);
  std::swap(confidence_, other->confidence_);
  std::swap(img_, other->img_);
  std::swap(alignresult_, other->alignresult_);
  qualities_.Swap(&other->qualities_);
  features_.Swap(&other->features_);
  attributes_.UnsafeArenaSwap(&other->attributes_);
  std::swap(alignedimage_, other->alignedimage_);
  std::swap(transformedalignresult_, other->transformedalignresult_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RecFace::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RecFace_descriptor_;
  metadata.reflection = RecFace_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RecFace

// optional int64 Id = 1;
void RecFace::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 RecFace::id() const {
  // @@protoc_insertion_point(field_get:dg.model.RecFace.Id)
  return id_;
}
 void RecFace::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:dg.model.RecFace.Id)
}

// optional float Confidence = 2;
void RecFace::clear_confidence() {
  confidence_ = 0;
}
 float RecFace::confidence() const {
  // @@protoc_insertion_point(field_get:dg.model.RecFace.Confidence)
  return confidence_;
}
 void RecFace::set_confidence(float value) {
  
  confidence_ = value;
  // @@protoc_insertion_point(field_set:dg.model.RecFace.Confidence)
}

// optional .dg.model.CutboardImage Img = 3;
bool RecFace::has_img() const {
  return !_is_default_instance_ && img_ != NULL;
}
void RecFace::clear_img() {
  if (GetArenaNoVirtual() == NULL && img_ != NULL) delete img_;
  img_ = NULL;
}
const ::dg::model::CutboardImage& RecFace::img() const {
  // @@protoc_insertion_point(field_get:dg.model.RecFace.Img)
  return img_ != NULL ? *img_ : *default_instance_->img_;
}
::dg::model::CutboardImage* RecFace::mutable_img() {
  
  if (img_ == NULL) {
    img_ = new ::dg::model::CutboardImage;
  }
  // @@protoc_insertion_point(field_mutable:dg.model.RecFace.Img)
  return img_;
}
::dg::model::CutboardImage* RecFace::release_img() {
  
  ::dg::model::CutboardImage* temp = img_;
  img_ = NULL;
  return temp;
}
void RecFace::set_allocated_img(::dg::model::CutboardImage* img) {
  delete img_;
  img_ = img;
  if (img) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dg.model.RecFace.Img)
}

// optional .dg.model.FaceAlignResult AlignResult = 4;
bool RecFace::has_alignresult() const {
  return !_is_default_instance_ && alignresult_ != NULL;
}
void RecFace::clear_alignresult() {
  if (GetArenaNoVirtual() == NULL && alignresult_ != NULL) delete alignresult_;
  alignresult_ = NULL;
}
const ::dg::model::FaceAlignResult& RecFace::alignresult() const {
  // @@protoc_insertion_point(field_get:dg.model.RecFace.AlignResult)
  return alignresult_ != NULL ? *alignresult_ : *default_instance_->alignresult_;
}
::dg::model::FaceAlignResult* RecFace::mutable_alignresult() {
  
  if (alignresult_ == NULL) {
    alignresult_ = new ::dg::model::FaceAlignResult;
  }
  // @@protoc_insertion_point(field_mutable:dg.model.RecFace.AlignResult)
  return alignresult_;
}
::dg::model::FaceAlignResult* RecFace::release_alignresult() {
  
  ::dg::model::FaceAlignResult* temp = alignresult_;
  alignresult_ = NULL;
  return temp;
}
void RecFace::set_allocated_alignresult(::dg::model::FaceAlignResult* alignresult) {
  delete alignresult_;
  alignresult_ = alignresult;
  if (alignresult) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dg.model.RecFace.AlignResult)
}

// map<string, float> Qualities = 5;
int RecFace::qualities_size() const {
  return qualities_.size();
}
void RecFace::clear_qualities() {
  qualities_.Clear();
}
 const ::google::protobuf::Map< ::std::string, float >&
RecFace::qualities() const {
  // @@protoc_insertion_point(field_map:dg.model.RecFace.Qualities)
  return qualities_.GetMap();
}
 ::google::protobuf::Map< ::std::string, float >*
RecFace::mutable_qualities() {
  // @@protoc_insertion_point(field_mutable_map:dg.model.RecFace.Qualities)
  return qualities_.MutableMap();
}

// optional string Features = 6;
void RecFace::clear_features() {
  features_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& RecFace::features() const {
  // @@protoc_insertion_point(field_get:dg.model.RecFace.Features)
  return features_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RecFace::set_features(const ::std::string& value) {
  
  features_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dg.model.RecFace.Features)
}
 void RecFace::set_features(const char* value) {
  
  features_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dg.model.RecFace.Features)
}
 void RecFace::set_features(const char* value, size_t size) {
  
  features_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dg.model.RecFace.Features)
}
 ::std::string* RecFace::mutable_features() {
  
  // @@protoc_insertion_point(field_mutable:dg.model.RecFace.Features)
  return features_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RecFace::release_features() {
  
  return features_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RecFace::set_allocated_features(::std::string* features) {
  if (features != NULL) {
    
  } else {
    
  }
  features_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), features);
  // @@protoc_insertion_point(field_set_allocated:dg.model.RecFace.Features)
}

// repeated .dg.model.FaceAttribute Attributes = 7;
int RecFace::attributes_size() const {
  return attributes_.size();
}
void RecFace::clear_attributes() {
  attributes_.Clear();
}
const ::dg::model::FaceAttribute& RecFace::attributes(int index) const {
  // @@protoc_insertion_point(field_get:dg.model.RecFace.Attributes)
  return attributes_.Get(index);
}
::dg::model::FaceAttribute* RecFace::mutable_attributes(int index) {
  // @@protoc_insertion_point(field_mutable:dg.model.RecFace.Attributes)
  return attributes_.Mutable(index);
}
::dg::model::FaceAttribute* RecFace::add_attributes() {
  // @@protoc_insertion_point(field_add:dg.model.RecFace.Attributes)
  return attributes_.Add();
}
::google::protobuf::RepeatedPtrField< ::dg::model::FaceAttribute >*
RecFace::mutable_attributes() {
  // @@protoc_insertion_point(field_mutable_list:dg.model.RecFace.Attributes)
  return &attributes_;
}
const ::google::protobuf::RepeatedPtrField< ::dg::model::FaceAttribute >&
RecFace::attributes() const {
  // @@protoc_insertion_point(field_list:dg.model.RecFace.Attributes)
  return attributes_;
}

// optional .dg.model.Image AlignedImage = 8;
bool RecFace::has_alignedimage() const {
  return !_is_default_instance_ && alignedimage_ != NULL;
}
void RecFace::clear_alignedimage() {
  if (GetArenaNoVirtual() == NULL && alignedimage_ != NULL) delete alignedimage_;
  alignedimage_ = NULL;
}
const ::dg::model::Image& RecFace::alignedimage() const {
  // @@protoc_insertion_point(field_get:dg.model.RecFace.AlignedImage)
  return alignedimage_ != NULL ? *alignedimage_ : *default_instance_->alignedimage_;
}
::dg::model::Image* RecFace::mutable_alignedimage() {
  
  if (alignedimage_ == NULL) {
    alignedimage_ = new ::dg::model::Image;
  }
  // @@protoc_insertion_point(field_mutable:dg.model.RecFace.AlignedImage)
  return alignedimage_;
}
::dg::model::Image* RecFace::release_alignedimage() {
  
  ::dg::model::Image* temp = alignedimage_;
  alignedimage_ = NULL;
  return temp;
}
void RecFace::set_allocated_alignedimage(::dg::model::Image* alignedimage) {
  delete alignedimage_;
  alignedimage_ = alignedimage;
  if (alignedimage) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dg.model.RecFace.AlignedImage)
}

// optional .dg.model.FaceAlignResult TransformedAlignResult = 9;
bool RecFace::has_transformedalignresult() const {
  return !_is_default_instance_ && transformedalignresult_ != NULL;
}
void RecFace::clear_transformedalignresult() {
  if (GetArenaNoVirtual() == NULL && transformedalignresult_ != NULL) delete transformedalignresult_;
  transformedalignresult_ = NULL;
}
const ::dg::model::FaceAlignResult& RecFace::transformedalignresult() const {
  // @@protoc_insertion_point(field_get:dg.model.RecFace.TransformedAlignResult)
  return transformedalignresult_ != NULL ? *transformedalignresult_ : *default_instance_->transformedalignresult_;
}
::dg::model::FaceAlignResult* RecFace::mutable_transformedalignresult() {
  
  if (transformedalignresult_ == NULL) {
    transformedalignresult_ = new ::dg::model::FaceAlignResult;
  }
  // @@protoc_insertion_point(field_mutable:dg.model.RecFace.TransformedAlignResult)
  return transformedalignresult_;
}
::dg::model::FaceAlignResult* RecFace::release_transformedalignresult() {
  
  ::dg::model::FaceAlignResult* temp = transformedalignresult_;
  transformedalignresult_ = NULL;
  return temp;
}
void RecFace::set_allocated_transformedalignresult(::dg::model::FaceAlignResult* transformedalignresult) {
  delete transformedalignresult_;
  transformedalignresult_ = transformedalignresult;
  if (transformedalignresult) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dg.model.RecFace.TransformedAlignResult)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NameAndConfidence::kIdFieldNumber;
const int NameAndConfidence::kNameFieldNumber;
const int NameAndConfidence::kConfidenceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NameAndConfidence::NameAndConfidence()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dg.model.NameAndConfidence)
}

void NameAndConfidence::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

NameAndConfidence::NameAndConfidence(const NameAndConfidence& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dg.model.NameAndConfidence)
}

void NameAndConfidence::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  confidence_ = 0;
}

NameAndConfidence::~NameAndConfidence() {
  // @@protoc_insertion_point(destructor:dg.model.NameAndConfidence)
  SharedDtor();
}

void NameAndConfidence::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void NameAndConfidence::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NameAndConfidence::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NameAndConfidence_descriptor_;
}

const NameAndConfidence& NameAndConfidence::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

NameAndConfidence* NameAndConfidence::default_instance_ = NULL;

NameAndConfidence* NameAndConfidence::New(::google::protobuf::Arena* arena) const {
  NameAndConfidence* n = new NameAndConfidence;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NameAndConfidence::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<NameAndConfidence*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(id_, confidence_);
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool NameAndConfidence::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dg.model.NameAndConfidence)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Name;
        break;
      }

      // optional string Name = 2;
      case 2: {
        if (tag == 18) {
         parse_Name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "dg.model.NameAndConfidence.Name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_Confidence;
        break;
      }

      // optional float Confidence = 3;
      case 3: {
        if (tag == 29) {
         parse_Confidence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &confidence_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dg.model.NameAndConfidence)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dg.model.NameAndConfidence)
  return false;
#undef DO_
}

void NameAndConfidence::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dg.model.NameAndConfidence)
  // optional int32 Id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional string Name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.model.NameAndConfidence.Name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional float Confidence = 3;
  if (this->confidence() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->confidence(), output);
  }

  // @@protoc_insertion_point(serialize_end:dg.model.NameAndConfidence)
}

::google::protobuf::uint8* NameAndConfidence::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dg.model.NameAndConfidence)
  // optional int32 Id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional string Name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.model.NameAndConfidence.Name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional float Confidence = 3;
  if (this->confidence() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->confidence(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:dg.model.NameAndConfidence)
  return target;
}

int NameAndConfidence::ByteSize() const {
  int total_size = 0;

  // optional int32 Id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // optional string Name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional float Confidence = 3;
  if (this->confidence() != 0) {
    total_size += 1 + 4;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NameAndConfidence::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const NameAndConfidence* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const NameAndConfidence>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NameAndConfidence::MergeFrom(const NameAndConfidence& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.confidence() != 0) {
    set_confidence(from.confidence());
  }
}

void NameAndConfidence::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NameAndConfidence::CopyFrom(const NameAndConfidence& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NameAndConfidence::IsInitialized() const {

  return true;
}

void NameAndConfidence::Swap(NameAndConfidence* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NameAndConfidence::InternalSwap(NameAndConfidence* other) {
  std::swap(id_, other->id_);
  name_.Swap(&other->name_);
  std::swap(confidence_, other->confidence_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NameAndConfidence::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NameAndConfidence_descriptor_;
  metadata.reflection = NameAndConfidence_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NameAndConfidence

// optional int32 Id = 1;
void NameAndConfidence::clear_id() {
  id_ = 0;
}
 ::google::protobuf::int32 NameAndConfidence::id() const {
  // @@protoc_insertion_point(field_get:dg.model.NameAndConfidence.Id)
  return id_;
}
 void NameAndConfidence::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:dg.model.NameAndConfidence.Id)
}

// optional string Name = 2;
void NameAndConfidence::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& NameAndConfidence::name() const {
  // @@protoc_insertion_point(field_get:dg.model.NameAndConfidence.Name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NameAndConfidence::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dg.model.NameAndConfidence.Name)
}
 void NameAndConfidence::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dg.model.NameAndConfidence.Name)
}
 void NameAndConfidence::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dg.model.NameAndConfidence.Name)
}
 ::std::string* NameAndConfidence::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:dg.model.NameAndConfidence.Name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* NameAndConfidence::release_name() {
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NameAndConfidence::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:dg.model.NameAndConfidence.Name)
}

// optional float Confidence = 3;
void NameAndConfidence::clear_confidence() {
  confidence_ = 0;
}
 float NameAndConfidence::confidence() const {
  // @@protoc_insertion_point(field_get:dg.model.NameAndConfidence.Confidence)
  return confidence_;
}
 void NameAndConfidence::set_confidence(float value) {
  
  confidence_ = value;
  // @@protoc_insertion_point(field_set:dg.model.NameAndConfidence.Confidence)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CategoryAndFeature::kIdFieldNumber;
const int CategoryAndFeature::kCategoryNameFieldNumber;
const int CategoryAndFeature::kItemsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CategoryAndFeature::CategoryAndFeature()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dg.model.CategoryAndFeature)
}

void CategoryAndFeature::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

CategoryAndFeature::CategoryAndFeature(const CategoryAndFeature& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dg.model.CategoryAndFeature)
}

void CategoryAndFeature::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  categoryname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CategoryAndFeature::~CategoryAndFeature() {
  // @@protoc_insertion_point(destructor:dg.model.CategoryAndFeature)
  SharedDtor();
}

void CategoryAndFeature::SharedDtor() {
  categoryname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void CategoryAndFeature::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CategoryAndFeature::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CategoryAndFeature_descriptor_;
}

const CategoryAndFeature& CategoryAndFeature::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

CategoryAndFeature* CategoryAndFeature::default_instance_ = NULL;

CategoryAndFeature* CategoryAndFeature::New(::google::protobuf::Arena* arena) const {
  CategoryAndFeature* n = new CategoryAndFeature;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CategoryAndFeature::Clear() {
  id_ = 0;
  categoryname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  items_.Clear();
}

bool CategoryAndFeature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dg.model.CategoryAndFeature)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_CategoryName;
        break;
      }

      // optional string CategoryName = 2;
      case 2: {
        if (tag == 18) {
         parse_CategoryName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_categoryname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->categoryname().data(), this->categoryname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "dg.model.CategoryAndFeature.CategoryName"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Items;
        break;
      }

      // repeated .dg.model.NameAndConfidence Items = 3;
      case 3: {
        if (tag == 26) {
         parse_Items:
          DO_(input->IncrementRecursionDepth());
         parse_loop_Items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_Items;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dg.model.CategoryAndFeature)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dg.model.CategoryAndFeature)
  return false;
#undef DO_
}

void CategoryAndFeature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dg.model.CategoryAndFeature)
  // optional int32 Id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional string CategoryName = 2;
  if (this->categoryname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->categoryname().data(), this->categoryname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.model.CategoryAndFeature.CategoryName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->categoryname(), output);
  }

  // repeated .dg.model.NameAndConfidence Items = 3;
  for (unsigned int i = 0, n = this->items_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->items(i), output);
  }

  // @@protoc_insertion_point(serialize_end:dg.model.CategoryAndFeature)
}

::google::protobuf::uint8* CategoryAndFeature::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dg.model.CategoryAndFeature)
  // optional int32 Id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional string CategoryName = 2;
  if (this->categoryname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->categoryname().data(), this->categoryname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.model.CategoryAndFeature.CategoryName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->categoryname(), target);
  }

  // repeated .dg.model.NameAndConfidence Items = 3;
  for (unsigned int i = 0, n = this->items_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->items(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:dg.model.CategoryAndFeature)
  return target;
}

int CategoryAndFeature::ByteSize() const {
  int total_size = 0;

  // optional int32 Id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // optional string CategoryName = 2;
  if (this->categoryname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->categoryname());
  }

  // repeated .dg.model.NameAndConfidence Items = 3;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CategoryAndFeature::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CategoryAndFeature* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CategoryAndFeature>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CategoryAndFeature::MergeFrom(const CategoryAndFeature& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  items_.MergeFrom(from.items_);
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.categoryname().size() > 0) {

    categoryname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.categoryname_);
  }
}

void CategoryAndFeature::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CategoryAndFeature::CopyFrom(const CategoryAndFeature& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CategoryAndFeature::IsInitialized() const {

  return true;
}

void CategoryAndFeature::Swap(CategoryAndFeature* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CategoryAndFeature::InternalSwap(CategoryAndFeature* other) {
  std::swap(id_, other->id_);
  categoryname_.Swap(&other->categoryname_);
  items_.UnsafeArenaSwap(&other->items_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CategoryAndFeature::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CategoryAndFeature_descriptor_;
  metadata.reflection = CategoryAndFeature_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CategoryAndFeature

// optional int32 Id = 1;
void CategoryAndFeature::clear_id() {
  id_ = 0;
}
 ::google::protobuf::int32 CategoryAndFeature::id() const {
  // @@protoc_insertion_point(field_get:dg.model.CategoryAndFeature.Id)
  return id_;
}
 void CategoryAndFeature::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:dg.model.CategoryAndFeature.Id)
}

// optional string CategoryName = 2;
void CategoryAndFeature::clear_categoryname() {
  categoryname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& CategoryAndFeature::categoryname() const {
  // @@protoc_insertion_point(field_get:dg.model.CategoryAndFeature.CategoryName)
  return categoryname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CategoryAndFeature::set_categoryname(const ::std::string& value) {
  
  categoryname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dg.model.CategoryAndFeature.CategoryName)
}
 void CategoryAndFeature::set_categoryname(const char* value) {
  
  categoryname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dg.model.CategoryAndFeature.CategoryName)
}
 void CategoryAndFeature::set_categoryname(const char* value, size_t size) {
  
  categoryname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dg.model.CategoryAndFeature.CategoryName)
}
 ::std::string* CategoryAndFeature::mutable_categoryname() {
  
  // @@protoc_insertion_point(field_mutable:dg.model.CategoryAndFeature.CategoryName)
  return categoryname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CategoryAndFeature::release_categoryname() {
  
  return categoryname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CategoryAndFeature::set_allocated_categoryname(::std::string* categoryname) {
  if (categoryname != NULL) {
    
  } else {
    
  }
  categoryname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), categoryname);
  // @@protoc_insertion_point(field_set_allocated:dg.model.CategoryAndFeature.CategoryName)
}

// repeated .dg.model.NameAndConfidence Items = 3;
int CategoryAndFeature::items_size() const {
  return items_.size();
}
void CategoryAndFeature::clear_items() {
  items_.Clear();
}
const ::dg::model::NameAndConfidence& CategoryAndFeature::items(int index) const {
  // @@protoc_insertion_point(field_get:dg.model.CategoryAndFeature.Items)
  return items_.Get(index);
}
::dg::model::NameAndConfidence* CategoryAndFeature::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:dg.model.CategoryAndFeature.Items)
  return items_.Mutable(index);
}
::dg::model::NameAndConfidence* CategoryAndFeature::add_items() {
  // @@protoc_insertion_point(field_add:dg.model.CategoryAndFeature.Items)
  return items_.Add();
}
::google::protobuf::RepeatedPtrField< ::dg::model::NameAndConfidence >*
CategoryAndFeature::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:dg.model.CategoryAndFeature.Items)
  return &items_;
}
const ::google::protobuf::RepeatedPtrField< ::dg::model::NameAndConfidence >&
CategoryAndFeature::items() const {
  // @@protoc_insertion_point(field_list:dg.model.CategoryAndFeature.Items)
  return items_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StorageConfig::kAddressFieldNumber;
const int StorageConfig::kTypeFieldNumber;
const int StorageConfig::kTagsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StorageConfig::StorageConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dg.model.StorageConfig)
}

void StorageConfig::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

StorageConfig::StorageConfig(const StorageConfig& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dg.model.StorageConfig)
}

void StorageConfig::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
}

StorageConfig::~StorageConfig() {
  // @@protoc_insertion_point(destructor:dg.model.StorageConfig)
  SharedDtor();
}

void StorageConfig::SharedDtor() {
  address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void StorageConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StorageConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StorageConfig_descriptor_;
}

const StorageConfig& StorageConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

StorageConfig* StorageConfig::default_instance_ = NULL;

StorageConfig* StorageConfig::New(::google::protobuf::Arena* arena) const {
  StorageConfig* n = new StorageConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StorageConfig::Clear() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  tags_.Clear();
}

bool StorageConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dg.model.StorageConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Address = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->address().data(), this->address().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "dg.model.StorageConfig.Address"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Type;
        break;
      }

      // optional .dg.model.DBType Type = 2;
      case 2: {
        if (tag == 16) {
         parse_Type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::dg::model::DBType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Tags;
        break;
      }

      // repeated string Tags = 3;
      case 3: {
        if (tag == 26) {
         parse_Tags:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_tags()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tags(this->tags_size() - 1).data(),
            this->tags(this->tags_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "dg.model.StorageConfig.Tags"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Tags;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dg.model.StorageConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dg.model.StorageConfig)
  return false;
#undef DO_
}

void StorageConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dg.model.StorageConfig)
  // optional string Address = 1;
  if (this->address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.model.StorageConfig.Address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->address(), output);
  }

  // optional .dg.model.DBType Type = 2;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // repeated string Tags = 3;
  for (int i = 0; i < this->tags_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tags(i).data(), this->tags(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.model.StorageConfig.Tags");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->tags(i), output);
  }

  // @@protoc_insertion_point(serialize_end:dg.model.StorageConfig)
}

::google::protobuf::uint8* StorageConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dg.model.StorageConfig)
  // optional string Address = 1;
  if (this->address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.model.StorageConfig.Address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->address(), target);
  }

  // optional .dg.model.DBType Type = 2;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // repeated string Tags = 3;
  for (int i = 0; i < this->tags_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tags(i).data(), this->tags(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dg.model.StorageConfig.Tags");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->tags(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:dg.model.StorageConfig)
  return target;
}

int StorageConfig::ByteSize() const {
  int total_size = 0;

  // optional string Address = 1;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->address());
  }

  // optional .dg.model.DBType Type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // repeated string Tags = 3;
  total_size += 1 * this->tags_size();
  for (int i = 0; i < this->tags_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->tags(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StorageConfig::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const StorageConfig* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const StorageConfig>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StorageConfig::MergeFrom(const StorageConfig& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  tags_.MergeFrom(from.tags_);
  if (from.address().size() > 0) {

    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void StorageConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StorageConfig::CopyFrom(const StorageConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StorageConfig::IsInitialized() const {

  return true;
}

void StorageConfig::Swap(StorageConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StorageConfig::InternalSwap(StorageConfig* other) {
  address_.Swap(&other->address_);
  std::swap(type_, other->type_);
  tags_.UnsafeArenaSwap(&other->tags_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StorageConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StorageConfig_descriptor_;
  metadata.reflection = StorageConfig_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StorageConfig

// optional string Address = 1;
void StorageConfig::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& StorageConfig::address() const {
  // @@protoc_insertion_point(field_get:dg.model.StorageConfig.Address)
  return address_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StorageConfig::set_address(const ::std::string& value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dg.model.StorageConfig.Address)
}
 void StorageConfig::set_address(const char* value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dg.model.StorageConfig.Address)
}
 void StorageConfig::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dg.model.StorageConfig.Address)
}
 ::std::string* StorageConfig::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:dg.model.StorageConfig.Address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* StorageConfig::release_address() {
  
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StorageConfig::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:dg.model.StorageConfig.Address)
}

// optional .dg.model.DBType Type = 2;
void StorageConfig::clear_type() {
  type_ = 0;
}
 ::dg::model::DBType StorageConfig::type() const {
  // @@protoc_insertion_point(field_get:dg.model.StorageConfig.Type)
  return static_cast< ::dg::model::DBType >(type_);
}
 void StorageConfig::set_type(::dg::model::DBType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:dg.model.StorageConfig.Type)
}

// repeated string Tags = 3;
int StorageConfig::tags_size() const {
  return tags_.size();
}
void StorageConfig::clear_tags() {
  tags_.Clear();
}
 const ::std::string& StorageConfig::tags(int index) const {
  // @@protoc_insertion_point(field_get:dg.model.StorageConfig.Tags)
  return tags_.Get(index);
}
 ::std::string* StorageConfig::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:dg.model.StorageConfig.Tags)
  return tags_.Mutable(index);
}
 void StorageConfig::set_tags(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:dg.model.StorageConfig.Tags)
  tags_.Mutable(index)->assign(value);
}
 void StorageConfig::set_tags(int index, const char* value) {
  tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:dg.model.StorageConfig.Tags)
}
 void StorageConfig::set_tags(int index, const char* value, size_t size) {
  tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dg.model.StorageConfig.Tags)
}
 ::std::string* StorageConfig::add_tags() {
  return tags_.Add();
}
 void StorageConfig::add_tags(const ::std::string& value) {
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:dg.model.StorageConfig.Tags)
}
 void StorageConfig::add_tags(const char* value) {
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:dg.model.StorageConfig.Tags)
}
 void StorageConfig::add_tags(const char* value, size_t size) {
  tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:dg.model.StorageConfig.Tags)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
StorageConfig::tags() const {
  // @@protoc_insertion_point(field_list:dg.model.StorageConfig.Tags)
  return tags_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
StorageConfig::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:dg.model.StorageConfig.Tags)
  return &tags_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace model
}  // namespace dg

// @@protoc_insertion_point(global_scope)
